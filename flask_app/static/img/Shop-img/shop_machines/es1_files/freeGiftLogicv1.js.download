
let DEFAULT_addToCartBtnSelectorsApp7Ext = 'input[name="add"], button[name="add"], form[action*="/cart/add"] .gfg__add-to-cart,form[action*="/cart/add"] button[type="submit"], form[action*="/cart/add"] input[type="submit"]';
let DEFAULT_checkoutBtnSelectorsApp7Ext = 'button[name="checkout"], input[name="checkout"], form[action*="/cart"] a[href="/checkout"], a[href="/checkout"], form[action="/cart"] input[type="submit"][name="checkout"], form[action="/cart"] button[type="submit"][name="checkout"]';
let DEFAULT_quantityBtnSelectorsApp7Ext = '.ajaxcart__qty,quantity-input .quantity,.quantity-input,.quantity__input,.quantity_input,.product-form__input, .product-form__quantity,.quantity,.quantity__container,.quantity_container';
let DEFAULT_sideCartSelectorsApp7Ext = '.cart-notification,cart-notification,.cart-notification-wrapper,#cart-notification, #CartDrawer, .drawer, .drawer-cover, .Drawer';
let DEFAULT_buyNowBtnApp7Ext = '.shopify-payment-button__button, .shopify-payment-button__button--unbranded';
let DEFAULT_cartFormApp7Ext = 'form[action="/cart"], form[action="/cart/"], form[action="cart"]';
//for cart integration
let DEFAULT_cartItemSelectorApp7Ext = ".cart-item";
let DEFAULT_cartItemRemoveParentSelectorApp7Ext = "cart-remove-button";
let DEFAULT_cartItemRemoveSelectorApp7Ext = "";
let DEFAULT_cartItemQuantityBtnSelectorsApp7Ext = "";
let CONSTANT_ARROW_SVG_APP7EXT = '<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">' +
'<path d="M22.6666 18.6667L15.9999 12L9.33325 18.6667" stroke="#3C3C3C" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>' +
'</svg>';

let CONSTANT_LOADING_SPINNER_SVG = `<div class="gfgLoadingSpinner" style="width:15px;z-index:100"><svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
<circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
</svg></div>`;

var gfgUtils = {
    f: {}
}
window.gfgUtils = gfgUtils;
console.log("gfgUtils", gfgUtils);



gfgUtils.f.loadScript = function (a, b) {
    var c = document.createElement("script");
    c.type = "text/javascript";
    c.src = a;
    document.getElementsByTagName("head")[0].appendChild(c)
    c.onload = function () { b() };
};

/*
* we changed loadScript function - if else block for onload is removed as it was not making sense
*fn(param1) =>  
*param1 - represents function that should be executed once jquery is loaded 
*https://www.w3schools.com/jquery/jquery_noconflict.asp
*/
gfgUtils.f.loadJquery = function (b) {
    console.log("does this work");
    let flag = false;
    if("undefined" === typeof jQuery || 3.0 > parseFloat(jQuery.fn.jquery)){
        flag = true;
    }
    if("undefined" != typeof jQuery && jQuery.post == undefined){
        flag = true;
    }

    if(flag){
        gfgUtils.f.loadScript("https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js", function () {
           gfgJquery = jQuery.noConflict(!0);
            b(gfgJquery)
        })
    }else{
        b(jQuery);
    }
};

var gfg = {
    debug: [],
    version: 1.35,
    state: {
        submitted: "",
        product_added: "",
        page_type: "",
        lastClickTimestamps: new Map(),
        insertWrapperOnPage: [],
        cartData: undefined,
        isOverWriteBuyNowBtnTriggered: false,
        timer: undefined,
        freeGiftcardPopupModalTriggered: false,
        atleastOneProduct:{},
        checkForFreeGift: false,
        isCheckForFreeGiftTriggered: false,
        gfgFreeGiftMsgRowButton: false,
        CONSTANT_DEBUG_FLAG: undefined,
        freeGiftsCartDataMap_productId: {},
        freeGiftsCartDataMap_variantId: {},
        freeGiftsCartData: {},
        gfgFreeGiftCartData: {},
        activeCampaignName: "EMPTY",
        activeCustomerData: "EMPTY"
    },
    constants: {
        themesIds: {
            DAWN_THEME: 887,
            VENTURE_THEME: 775,
            EXPRESS_THEME: 885,
            CRAVE_THEME: 1363,
            SENSE_THEME: 1356,
            CRAFT_THEME: 1368,
        }
    },
    
    settings: {}, //object from function
    selectors: {},
    cartInterval: "",
    productinterval: "",
    f: {
        bootstrap: function (settings) {
            gfg.utility.debugConsole("bootstap?");
            
            gfg.f.initThemeCSS();
            gfg.f.globalListener(settings)

        },
        initThemeCSS: function (){
        },
        getSettings: async function () {
            //promise
            gfg.utility.debugConsole("GET setting of giftboxbuilder ext fired")
            
            return new Promise(function (resolve, reject) {
        
                gfg.utility.debugConsole("fetching from s3")
                gfg.f.getSettingsFromS3().then(
                    success => {
                        resolve(success);
                    }
                ).catch(error => {
                    gfg.utility.debugError("error in s3 fetch. ", error);

            });
        });    
        },
        getSettingsFromS3: async function () {
            //promise
            let shopName = window.Shopify.shop
            gfg.utility.debugConsole("GET setting of giftlab pro fired")
            return new Promise(function (resolve, reject) {
                fetch(`https://free-gift-app7.s3.us-east-2.amazonaws.com/tempCartSettings/${shopName}.json?nocache=${(new Date()).getTime()}`,{
                    method: 'GET',
                    }).then(
                        response => response.json() // if the response is a JSON object
                    ).then(
                        success => {
                            if(success.responseCode == 200){
                                gfg.utility.debugConsole("success-data", success);
                            }
                            resolve(success);
                        }
                    ).catch(error => {
                        gfg.utility.debugConsole(error) // Handle the error response object
                        reject(error)
                        })
                    })
        },

        setSettings: function(tmpCartSettings){
            var cart_settings = {
                SERVER_URL: tmpCartSettings.SERVER_URL,
                app: {
                    disableApp: tmpCartSettings.userData.customSettings.disableApp || false,
                    disableSideCart: tmpCartSettings.userData.customSettings.disableSideCart || false,
                    refreshProductPageOnGiftWrap: tmpCartSettings.userData.customSettings.refreshProductPageOnGiftWrap || false,
                    addToCartBtnSelectors: tmpCartSettings.userData.customSettings.addToCartBtnSelectors || DEFAULT_addToCartBtnSelectorsApp7Ext,
                    checkoutBtnSelectors: tmpCartSettings.userData.customSettings.checkoutBtnSelectors || DEFAULT_checkoutBtnSelectorsApp7Ext,
                    sideCartCheckoutBtnSelectors: tmpCartSettings.userData.customSettings.sideCartCheckoutBtnSelectors || DEFAULT_checkoutBtnSelectorsApp7Ext,
                    overWriteCheckoutBtn: tmpCartSettings.userData.customSettings.overWriteCheckoutBtn || false,
                    quantityBtnSelectors: tmpCartSettings.userData.customSettings.quantityBtnSelectors || DEFAULT_quantityBtnSelectorsApp7Ext,
                    sideCartSelectors: tmpCartSettings.userData.customSettings.sideCartSelectors || DEFAULT_sideCartSelectorsApp7Ext,
                    isCartIntegrationEnabled: tmpCartSettings.userData.customSettings.isCartIntegrationEnabled || false,
                    cartItemSelectors: tmpCartSettings.userData.customSettings.cartItemSelectors || DEFAULT_cartItemSelectorApp7Ext,
                    cartItemRemoveParentSelectors: tmpCartSettings.userData.customSettings.cartItemRemoveParentSelectors || DEFAULT_cartItemRemoveParentSelectorApp7Ext,
                    cartItemRemoveSelectors: tmpCartSettings.userData.customSettings.cartItemRemoveSelectors || DEFAULT_cartItemRemoveSelectorApp7Ext,
                    cartItemQuantityBtnSelectors: tmpCartSettings.userData.customSettings.cartItemQuantityBtnSelectors || DEFAULT_cartItemQuantityBtnSelectorsApp7Ext,
                    customCartIntegrationScript: tmpCartSettings.userData.customSettings.customCartIntegrationScript || null,
                    activeVariantCodes: tmpCartSettings.userData.customSettings.activeVariantCodes || "123456789",
                    showBranding : tmpCartSettings.userData.customSettings.showBranding,
                    buyNowBtn: tmpCartSettings.userData.customSettings.buyNowBtn || DEFAULT_buyNowBtnApp7Ext,
                    customStyle: tmpCartSettings.userData.customSettings.customStyle || null,
                    enablingApiFromSetInterval: tmpCartSettings.userData.customSettings.enablingApiFromSetInterval || false,
                    isMultipleFreeGiftAllowed:  tmpCartSettings.userData.customSettings.isMultipleFreeGiftAllowed || false,
                    addAfterAddTocartBtn: tmpCartSettings.userData.customSettings.addAfterAddTocartBtn || false,
                    addAftercheckoutBtn: tmpCartSettings.userData.customSettings.addAftercheckoutBtn || false,
                    // sideCartSectionId = "cart-drawer"
                    sideCartSectionId: tmpCartSettings.userData.customSettings.sideCartSectionId || "cart-drawer",
                    sideCartSectionSelector:  tmpCartSettings.userData.customSettings.sideCartSectionSelector || null,
                    // cartPageItemsId = "cart-items"
                    cartPageItemsSectionId :  tmpCartSettings.userData.customSettings.cartPageItemsSectionId  || tmpCartSettings.userData.customSettings.cartPageItemsId || "cart-items",
                    cartPageItemsSelector: tmpCartSettings.userData.customSettings.cartPageItemsSelector || ".cart__row",
                    disableApiCallListen: tmpCartSettings.userData.customSettings.disableApiCallListen || false,
                    executeScriptAfterAddToCart: tmpCartSettings.userData.customSettings.executeScriptAfterAddToCart || "",

                    executeCustomScriptAfterFreeGiftAddition: tmpCartSettings.userData.customSettings.executeCustomScriptAfterFreeGiftAddition || "",
                    executeCustomScriptAfterBogoAddition : tmpCartSettings.userData.customSettings.executeCustomScriptAfterBogoAddition || "",


                   },
                merchantInfo: tmpCartSettings.userData,
                languageData: tmpCartSettings.languageData || {},
                freeGifts: tmpCartSettings.promotionCampaigns,
                discounts: tmpCartSettings.discounts,
                urlSearchString: window.location.search ? window.location.search : "",
                boGoFeature: tmpCartSettings.boGo,

            }
            // cart_settings.freeGifts[0].configuration.addtionalFields =  {
            //     claimText: "Claim",
            //     claimedText: "Claimed",
            //     addingText:"Adding",
            //     alreadyClaimedText:"Note: Only one gift can be claimed at a time!",
			// 	claimedCartTitle:"Congratulations! Free Gift Won!",
            //     claimedCartSubtitle:"Gift Added to Bag"
            // }
            // let drivedSettings = gfg.f.drivedSettings(tmpCartSettings)
            gfg.settings = cart_settings;
            gfg.utility.debugConsole("settings assigned")
            
        },

        updateSettingsBasedOnLanguage: function(){

            const currentLocale = gfg.utility.getLocale();

            // handle MultiLanguage for Free Gift
            if(gfg.settings.freeGifts && gfg.settings.freeGifts.length > 0){
                const multiLanguageConfiguration = gfg.settings.freeGifts[0]?.MultiLanguageConfiguration;
                const tierConfig = gfg.settings.freeGifts[0]?.configuration?.tierConfig;
                if(multiLanguageConfiguration){

                    const configObj = multiLanguageConfiguration[currentLocale] || multiLanguageConfiguration['en'];
                    configObj.tierConfig = tierConfig;
                    gfg.settings.freeGifts[0].configuration = configObj;

                }
                for(let i=0; i<tierConfig?.length; i++){
                    if(currentLocale in tierConfig[i]){
                        gfg.settings.freeGifts[0].configuration.tierConfig[i]['conditionNotMet'] = tierConfig[i][currentLocale];
                    }
                }
            }

            // handle MultiLanguage for Discounts

            if(gfg.settings.discounts && gfg.settings.discounts.length > 0){
                const discounts = gfg.settings.discounts;
                for(let i=0; i<discounts.length; i++){

                    // handle For product page widget
                    if(discounts[i]?.productPageWidgetMultiLanguageConfiguration?.[currentLocale]){

                        let configObj = discounts[i].productPageWidgetMultiLanguageConfiguration[currentLocale] || {};

                        configObj = {
                        ...discounts[i].configuration,
                        ...configObj,
                        };

                        gfg.settings.discounts[i].configuration = configObj;
                    }

                    // handle For cart page widget

                   if(currentLocale !=='en'){
                        const tierConfigArray = discounts[i]?.cartWidgetConfiguration?.tierConfig;
                        if(tierConfigArray?.length > 0){
                            for(let j=0; j<tierConfigArray.length; j++){
                                if(currentLocale in tierConfigArray[j]){
                                    gfg.settings.discounts[i].cartWidgetConfiguration.tierConfig[j]['conditionNotMet'] = tierConfigArray[j][currentLocale];
                                }
                            }
                        }
                   }
                }
            }

        },

        checkIfCartItemIsPartOfValidCollectionList : (cartItem,validCollectionList)=>{
            for(let i=0; i<validCollectionList.length; i++){
                const collection = validCollectionList[i];
                for(let j=0; j<collection.productIds.length; j++){
                    const product = collection.productIds[j];
                    if(product.productId == cartItem.product_id){
                        return true;
                    }
                }
            }
            return false;
        },

        drivedSettings: function(tmpCartSettings){
            let bundleLinkData = tmpCartSettings.bundleLinkData
            let bundleLinkProductIdMap = new Map()
            let bundleLinkProductHandleMap = new Map()
            for(let i=0; i<bundleLinkData.length; i++){
                let bundleLink = bundleLinkData[i]
                if(bundleLink.productsForBundleLink && bundleLink.productsForBundleLink.length && bundleLink.productsForBundleLink.length  > 0){
                    bundleLinkProductIdMap.set(parseInt(bundleLink.productsForBundleLink[0].productId),{productData:bundleLink.productsForBundleLink[0], bundleId: bundleLink.bundleId})
                    bundleLinkProductHandleMap.set(bundleLink.productsForBundleLink[0].handle,{productData:bundleLink.productsForBundleLink[0], bundleId: bundleLink.bundleId})
                }
            }

            return {
                bundleLinkProductIdMap: bundleLinkProductIdMap,
                bundleLinkProductHandleMap: bundleLinkProductHandleMap,

            }
        },
        setSelectors:  function(){
            let settings =  gfg.settings
            gfg.selectors = {
                addToCart: settings.app.addToCartBtnSelectors,
                checkoutBtn : settings.app.checkoutBtnSelectors,
                sideCartCheckoutBtn: settings.app.sideCartCheckoutBtnSelectors,
                sideCartSelectors: settings.app.sideCartSelectors,
                buyNowBtn: settings.app.buyNowBtn,
                cartForm: settings.app.cartForm,
                productPageWrapperV2: '.gfgProductPageWrapperV2',
                cartPageWrapperV2: '.gfgCartPageWrapperV2',
                quantityBtnSelectors : settings.app.quantityBtnSelectors,
                cartItemSelectors : settings.app.cartItemSelectors,
                cartItemRemoveSelectors : settings.app.cartItemRemoveSelectors,
                cartItemRemoveParentSelectors : settings.app.cartItemRemoveParentSelectors,
                customCartIntegrationScript : settings.app.customCartIntegrationScript,
                cartItemQuantityBtnSelectors : settings.app.cartItemQuantityBtnSelectors,
            }
        },
        setCustomStyling: function (){
            let customStyle =  gfg.settings.app.customStyle
            if(customStyle){
                var styleSheet = document.createElement("style")
                styleSheet.innerText = customStyle
                document.body.appendChild(styleSheet)

            }
        },
        getPageType: function () {
            var pageType = "";
            if (window.location.pathname.includes("/cart") && !window.location.pathname.includes("/products")) {
                pageType = "cart";
            } else if (window.location.pathname.includes("/products")) {
                pageType = "product";
            } else if (window.location.pathname.includes("/collections")) {
                pageType = "COLLECTION";
            } else if (window.location.pathname.includes("/")) {
                pageType = "HOME";
            } else if ("undefined" != typeof Shopify && "undefined" != typeof Shopify.Checkout) {
                pageType = "CHECKOUT";
            } else {
                pageType = "PAGE_NOT_FOUND";
            }
            return pageType;
        },
        addPoweredByBlock: function () {
            try {
                let gfgPoweredByLabelBlock =  gfg.$("<div>").addClass("gfgPoweredByLabelBlock");
                let htmlForPoweredByBlock = gfg.utility.renderPoweredByLabel();
                if(!htmlForPoweredByBlock){
                    return
                }
                
                gfgPoweredByLabelBlock.append(gfg.utility.renderPoweredByLabel());

                // find instances of  gfgPageWrapper and then attach it on those elements
                gfg.$(".gfgPageWrapper").each(function (index, element) {
                    
                    let isVolDiscountWrapperPresentIsEmpty = gfg.$(element).find('.gfgVolDiscountWrapper').children().length < 1;
                    let isGftFreeGiftWrapperPresentIsEmpty = gfg.$(element).find('.gftFreeGiftWrapper').children().length < 1;
                    let isGfgBogoWrapperIsEmpty = gfg.$(element).find('.gfgBogoWrapper').children().length < 1;
                    // let is  gfg.$(".gfgBulkDiscountWidgetHTMLWrapper").children().length
                    let isGfgBulkDiscountWidgetHTMLWrapperEmpty = gfg.$(element).find('.gfgBulkDiscountWidgetHTMLWrapper').children().length < 1 || gfg.$(element).find('.gfgBulkDiscountWidgetHTML')?.children().length < 1;
                    let isGfgCountDiscountEmpty =   gfg.$(element).find('.gfgCountDiscount') ? gfg.$(element).find('.gfgCountDiscount').children().length < 1: true;

                    if(isGfgBulkDiscountWidgetHTMLWrapperEmpty && isGfgCountDiscountEmpty ){
                        isVolDiscountWrapperPresentIsEmpty = true;
                    }


                    if(isVolDiscountWrapperPresentIsEmpty && isGftFreeGiftWrapperPresentIsEmpty 
                        && isGfgBulkDiscountWidgetHTMLWrapperEmpty && isGfgBogoWrapperIsEmpty){

                            gfg.$(element).find(".gfgPoweredByLabelBlock").remove();

                        // gfg.$(element).append(gfgPoweredByLabelBlock.clone());
                        return;
                    }

                    if (gfg.$(element).find(".gfgPoweredByLabelBlock").length == 0){
                        gfg.$(element).append(gfgPoweredByLabelBlock.clone());
                    }else{
                        // use html instead of append to replace the existing block
                        gfg.$(element).find(".gfgPoweredByLabelBlock").html(gfgPoweredByLabelBlock.clone());
                    }
                });




            } catch (error) {

            }
        },
        getProductPageHandle: function () {
            if ("product" === gfg.state.page_type && window.shopifyLiquidValuesApp7Ext && window.shopifyLiquidValuesApp7Ext.product.handle) {
                // let pattern = /(?<=\\/products\\/)((?!\\?|\\$).)+/g
                // if(window && window.location && window.location.href){
                //     return window.location.href.match(pattern)[0]
                // }
                gfg.state.productPageHandle = shopifyLiquidValuesApp7Ext.product.handle
                return shopifyLiquidValuesApp7Ext.product.handle
            }else if("product" === gfg.state.page_type && window.location.pathname.includes("/products/")){
                const urlRef = Object.fromEntries(new URLSearchParams(window.location))

                let productHandle = urlRef.pathname.split("/products/")[1];

                if (productHandle && productHandle.includes("?")) {
                    productHandle = productHandle.split("?")[0];
                }

                gfg.state.productPageHandle = productHandle
                return productHandle
            }
            return undefined
        },
        getProductPageId: function () {
            if (meta && meta.product && meta.product.id) {
                gfg.state.productPageId = meta.product.id
                return meta.product.id
            }
            return undefined;
        },
        getSelectedVariant: function () {
            if ("product" === gfg.state.page_type) {

                let activeCodes = gfg.settings.app.activeVariantCodes;  
                  
                if(activeCodes.indexOf("1") >= 0){
                    const params = Object.fromEntries(new URLSearchParams(location.search))
                    if(params && params.variant){
                        return params.variant
                    }
                }
               
                if(activeCodes.indexOf("2") >= 0){
                        if (ShopifyAnalytics && ShopifyAnalytics.meta && ShopifyAnalytics.meta.selectedVariantId) {
                        for(let i = 0; i < ShopifyAnalytics.meta.product.variants.length; i++){
                            if(ShopifyAnalytics.meta.product.variants[i].id == ShopifyAnalytics.meta.selectedVariantId){
                                return ShopifyAnalytics.meta.selectedVariantId
                            }
                        }
                    }
                }
                if(activeCodes.indexOf("3") >= 0){
                    if (document.querySelector('[name="id"]') && document.querySelector('[name="id"]').value) {
                        return document.querySelector('[name="id"]').value
                    }
                }
                
                if(activeCodes.indexOf("4") >= 0){
                    if (shopifyLiquidValuesApp7Ext.selected_or_first_available_variant) {
                        return shopifyLiquidValuesApp7Ext.selected_or_first_available_variant.id
                    }
                }

                return undefined
            }
        },

        getProductQuantity: function () {
            if (document.querySelector('[name="quantity"]') && document.querySelector('[name="quantity"]').value) {
                if(Number(document.querySelector('[name="quantity"]').value)){
                    return Number(document.querySelector('[name="quantity"]').value)
                }else{
                    return 1
                }       
            }else {
                return 1
            }
        },

        getElements: function (settings) {
            return {
                addToCartBtn: gfg.$(document).find(gfg.selectors.addToCart),
                addToCartButtonCloned: undefined,
                checkoutBtn: gfg.$(document).find(gfg.selectors.checkoutBtn),
                cartForm: gfg.$(document).find(gfg.selectors.cartForm),
                productPageWrapperV2: gfg.$(gfg.$.parseHTML('<div class="gfgPageWrapper gfgProductPageWrapperV2"><div class="gftFreeGiftWrapper"></div><div class="gfgVolDiscountWrapper"></div><div class="gfgBogoWrapper"></div></div>')),
                cartPageWrapperV2:    gfg.$(gfg.$.parseHTML('<div class="gfgPageWrapper gfgCartPageWrapperV2"><div class="gftFreeGiftWrapper"></div><div class="gfgVolDiscountWrapper"></div></div>')),
                buyNowBtn: gfg.$(document).find(gfg.selectors.buyNowBtn),
                quantityBtn: gfg.$(document).find(gfg.selectors.quantityBtnSelectors),
                cartDrawer: gfg.$(document).find(gfg.selectors.sideCartSelectors),
            }
        },

        initialize: async function (jQuery) {
            //  gfg.$.ajaxSetup({global: true});
            let tmpCartSettings =  await gfg.f.getSettings();
            gfg.f.setSettings(tmpCartSettings)
            gfg.f.updateSettingsBasedOnLanguage();
            gfg.f.setSelectors()
            gfg.f.setCustomStyling()
            gfg.state.page_type = gfg.f.getPageType();
            gfg.elements = gfg.f.getElements(gfg.settings);
            if ("" === gfg.state.page_type) return false;
            gfg.utility.setLanguageLocale();
            return gfg.f.bootstrap(gfg.settings);
        },
        globalListener : async function (settings) {
            let isIntervalActive = false
            //if app is disabled reurn
            if(gfg.state && gfg.state.activeCampaignName == "EMPTY"){
                gfg.utility.getUrlRewardCampaignName()
            }
            if(gfg.state && gfg.state.activeCustomerData == "EMPTY"){
                gfg.utility.setCustomerSpecificData();
                // check conditioin and update cart attribute
                await gfg.utility.updateCartAttributeWithCustomerData();
            }
            try{
                if (settings.app.disableApp) {
                    return
                } else {
                    console.log('inside else of global listener')
                    //setTIMOUT FOR API CALLS
                    // setTimeout(() => {
                        if (gfg.settings.app.disableApiCallListen == false) {
                            try{
                                gfg.utility.listenForApiCalls(settings)
                                gfg.utility.listenForAjaxApiCalls(settings)
                                gfg.utility.listenForXmlHttpApiCalls(settings)
                            }catch(error) {
                                // debugConsole
                                gfg.utility.debugConsole("error in listenForApiCalls", error)
                            }
                        } else {
                            gfg.utility.debugConsole("listenForApiCalls disabled")
                            // not listening for api calls
                        }  

                        
                        // gfg.utility.listenForFormSubmits();
                        // gfg.utility.interceptFetchRequest()
                        // gfg.utility.interceptXMLHttpRequest()
                    // }, 800);
    
                    if ("product" === gfg.state.page_type) {
                        gfg.productPage.init(settings);
                    }
    
                    if (settings.app.disableSideCart) {
                        if ("cart" === gfg.state.page_type) {
                            gfg.cartPage.init(settings)
                        }
                    } else {
                        gfg.cartPage.init(settings)
    
                    }
                }
                
                let runProcessFreeGiftCount = 0;
                setInterval(async () => {
                    if (!isIntervalActive) {
                        // console.log("gfg-globalListener-active")
    
                        isIntervalActive = true
                        gfg.gfgVolDiscount.actions.handleQuantityUpdate();
                        if(settings.app.enablingApiFromSetInterval || settings.app.disableApiCallListen){
                            // if (url.includes('app=gfgfreegift')) {
                            //     return ;
                            // }
                            // var cartData = undefined;
                            // if (cartData) {
                            //     gfg.state.cartData = cartData;
                            // } else {
                            //     gfg.state.cartData = await gfg.utility.getCart();
                            // }
                            // gfg.gfgFreeGift.f.checkForFreeGift(cartData)
                            await gfg.utility.callchecksAfterApiCalls()
                        }

                        await gfg.utility.syncRewardCampaignName();

                        if ("product" === gfg.state.page_type && gfg.elements.addToCartBtn &&
                            gfg.elements.addToCartBtn.length > 0 &&
                            gfg.$(document).find(gfg.selectors.productPageWrapperV2).length == 0) {
                                gfg.utility.debugConsole("productPage-insertWrapperIntoPage1")
                            gfg.productPage.f.insertWrapperIntoPage(settings)
                        }
    
                        let checkoutBtnEle = gfg.$(document).find(gfg.selectors.checkoutBtn)
    
                        // insert cartPage wrapper if cartPage is initialized 
                        if (checkoutBtnEle.length > 0 &&
                            gfg.$(document).find(gfg.selectors.cartPageWrapperV2).length == 0) {
                                gfg.utility.debugConsole("cartPage-insertWrapperIntoPage")
                            gfg.cartPage.f.insertWrapperIntoPage(settings);
                        }
                        let _cartPageWrapper = gfg.$(document).find(gfg.selectors.cartPageWrapperV2);
                        let isGftFreeGiftWrapperEmpty = _cartPageWrapper.find('.gftFreeGiftWrapper');
                        //runProcessFreeGiftCount
                        if(isGftFreeGiftWrapperEmpty.is(":empty")  && checkoutBtnEle.length > 0 && runProcessFreeGiftCount == 0){
                        // if(isGftFreeGiftWrapperEmpty.length < 1 && checkoutBtnEle.length > 0 && runProcessFreeGiftCount == 0){
                            runProcessFreeGiftCount = 1;
                            console.log("running process free gift")
                            gfg.utility.debugConsole("runProcessFreeGiftCount")
                            // await gfg.utility.callchecksAfterApiCalls()
                            // // await gfg.gfgFreeGift.f.processFreeGift();
                            // await gfg.gfgFreeGift.checkForFreeGift();
                            await gfg.gfgFreeGift.f.checkForFreeGift();
                            // if (localStorage.getItem("runForceFully") == "true") {
                            //   setTimeout(async () => {
                            //     await gfg.gfgFreeGift.f.processFreeGift();
                            //   }, 1000);
                            // }
                          
                        }

                        
                        let  gfgFreeGiftMsgRowButton = gfg.$(document).find(".gfgFreeGiftMsgRowButton")
                        if(gfgFreeGiftMsgRowButton && gfgFreeGiftMsgRowButton.length == 1 && gfg.state.gfgFreeGiftMsgRowButton == false){
                            gfg.state.gfgFreeGiftMsgRowButton = truncate
                            gfg.utility.debugConsole("gfgFreeGiftMsgRowButton click behavior")
                            gfgFreeGiftMsgRowButton.on('click', function(e) {
                                gfg.utility.debugConsole("button clicked")
                            // let gfgFreeGiftMsg = gfgFreeGiftMsgContainer.querySelector('gfgFreeGiftMsgRow');
                            let gfgFreeGiftMsg  = gfg.$(document).find(".gfgFreeGiftMsgRow")
                            if(gfgFreeGiftMsg && gfgFreeGiftMsg.length >= 1){
                                gfgFreeGiftMsg.style.display = gfgFreeGiftMsg.style.display === "none" ? "block" : "none";
                            }
                           
                             });
                        }
                        

    
    
                        isIntervalActive = false
    
                    }
                }, 1000)
            }catch(error){
                console.error("globalListenerError" , error)
            }
        }
    },
    utility: {
        getLocale: function () {
            if (window.Shopify && window.Shopify.locale) {
                return window.Shopify.locale
            }else{
                return "en"
            } 
        },
        setLanguageLocale: function () {
            let locale = gfg.utility.getLocale()
            
            if(gfg.settings.languageData && gfg.settings.languageData.languageMode == "SINGLE"){
                locale = "en"
            }

            if(!gfg.settings.languageData[locale]){
                locale = "en"
            }
            gfg.settings.languageData = gfg.settings.languageData[locale]
        },
        getUrlRewardCampaignName: function () {
            let activeCampaignName = "";
        
            if(gfg.state.activeCampaignName != "EMPTY"){
                return gfg.state.activeCampaignName;
            }
            
        
           let campaginString = gfg.settings?.urlSearchString.split("kite_campaign=")
           if(campaginString && campaginString.length > 1){
                let campaignName = campaginString[1].split("&")[0]
                if(campaignName){
                    gfg.state.activeCampaignName = campaignName;
                    sessionStorage.setItem("kite_campaign", campaignName)
                    return campaignName
                }else{
                    return ""
                }
           }

            if(sessionStorage.getItem("kite_campaign")){
                activeCampaignName = sessionStorage.getItem("kite_campaign")
                gfg.state.activeCampaignName = activeCampaignName;
                return activeCampaignName;
            }

            return "";

        },
        syncRewardCampaignName: async function (){
            if (gfg.state.activeCampaignName != "" && gfg.state.activeCampaignName != "EMPTY") {
              let urlRewardCampaignName = gfg.state.activeCampaignName;
            //   let rewardCampaign = gfg.settings.discounts.find((campaign) => {
            //     let campaignData = JSON.parse(campaign);
            //     return campaignData.urlBasedCampaign && campaignData.urlBasedCampaign.value && campaignData.urlBasedCampaign.value == urlRewardCampaignName;
            //   });
             //   gfg.settings.rewardCampaigns = rewardCampaign;

              if (!gfg.state.setCampaignUrlattribute) {
                gfg.state.setCampaignUrlattribute = true;
                await gfg.utility.updateCart({ attributes: { kite_campaign: gfg.state.activeCampaignName } });
              }
            }
            return;
        },
        getDate: function (date) {
            let d = new Date(date);
            let month = "" + (d.getMonth() + 1);
            let day = "" + d.getDate();
            let year = d.getFullYear();

            if (month.length < 2) month = "0" + month;
            if (day.length < 2) day = "0" + day;

            return [year, month, day].join("-");
        },
        addToCart: async function (data) {

            try {
                // if there is nothing to add in cart..just return true
                // if (!data.id) {
                //     return true
                // }
                let result = await gfg.$.ajax({
                    url: "/cart/add.js?app=gfgfreegift",
                    data: data,
                    type: "POST",
                    dataType: "json",
                })
                return true
            } catch (error) {
                gfg.utility.debugError("gfg-utility-addToCart");
                gfg.utility.debugError(error);
                return false
            }
        },
        updateCart: async function (data) {
            try {
                let result = await gfg.$.ajax({
                    type: "POST",
                    url: "/cart/update.js?app=gfgfreegift",
                    data: data,
                    dataType: "json",
                });
                return result
            } catch (error) {
                gfg.utility.debugError("gfg-utility-updateCart");
                gfg.utility.debugError(error);
                return false
            }
        },
        changeCart: async function (data) {
            try {
                let result = await gfg.$.ajax({
                    type: "POST",
                    url: "/cart/change.js?app=gfgfreegift",
                    data: data,
                    dataType: "json",
                });
                return true
            } catch (error) {
                gfg.utility.debugError("gfg-utility-changeCart");
                gfg.utility.debugError(error);
                return false
            }
        },
        getProductDataV2: function (productName) {
            try {
                let languageValue = window?.Shopify?.routes?.root ? window.Shopify.routes.root : "/"
                return new Promise((res, rej) => {
                    gfg.$.getJSON(languageValue +  "products/" + productName + ".js?app=gfgfreegift", function (product) {
                        gfg.utility.debugConsole("success-productName: ", productName)
                        res(product)
                    }).fail(function () { gfg.utility.debugConsole("fail-productName: ", productName); res(false) })
                })
                return result;
            } catch (error) {
                gfg.utility.debugError("gfg-utility-getProductDataV2");
                gfg.utility.debugError(error);
                return false
            }
        },
        addToCartV2: function (data) {
            try {
                return new Promise((res, rej) => {
                    gfg.$.post('/cart/add.js?app=gfgfreegift', data)
                        .done(function () { gfg.utility.debugConsole("success-/cart/add.js': "); res(true) })
                        .fail(function () { gfg.utility.debugConsole("fail-/cart/add.js"); res(false) })
                })
                return result;
            } catch (error) {
                gfg.utility.debugError("gfg-utility-addToCartV2");
                gfg.utility.debugError(error);
                return false
            }
        },
        clearCart: function (data) {
            try {
                return new Promise((res, rej) => {
                    gfg.$.post('/cart/clear.js?app=gfgfreegift', data)
                        .done(function () { gfg.utility.debugConsole("success-/cart/clear.js': "); res(true) })
                        .fail(function () { gfg.utility.debugConsole("fail-/cart/clear.js"); res(false) })
                })
                return result;
            } catch (error) {
                gfg.utility.debugError("gfg-utility-clearCart");
                gfg.utility.debugError(error);
                return false
            }
        },
        getCart: async function (data) {
            try {
                let result = await gfg.$.ajax({
                    type: "GET",
                    url: "/cart.js?app=gfgfreegift",
                    dataType: "json",
                });
                gfg.utility.refreshFreeGiftCartData(result)
                return result
            } catch (error) {
                gfg.utility.debugError("gfg-utility-getCart");
                gfg.utility.debugError(error);
                return false
            }
        },
        
        isCartEmpty: function () {
            if (gfg.state.cartData && gfg.state.cartData.items.length <= 0) {
                return true;
                
            } else {
                return false
            }
        },
        
        cloneAddToCartBtn: function () {
        },
        renderLanguageValue: function (parent) {
            if (parent){
                return parent.value;
            }
         return;
        },  
        slider: {
            state: {
                slideIndex: 0,
            },
        },
        isMobileView: function () {
            if (window.innerWidth < 768) {
                return true;
            } else {
                return false;
            }
        },
        updateCart: async function (cartData) {
            try {
                let result = await gfg.$.ajax({
                    url: "/cart/update.js?app=gfgfreegift",
                    data: cartData,
                    type: "POST",
                    dataType: "json",
                })
                return true;
            } catch (error) {
                gfg.utility.debugConsole("error in shopifyUtility.updateCart", error)
                // throw error
                return false
            }
        }, 
        getCurrencySymbol: function () {
            if (window && window.Shopify && window.Shopify.currency && window.Shopify.currency.active) {
                let symbol = gfg.settings.merchantInfo.multipleCurrenciesInfo[window.Shopify.currency.active]?.symbol || Shopify.currency.active;
                return symbol;
            }
        },
        getActiveCurrencyRate : function(){
            let currencyRate = 1;
            if(window.Shopify && window.Shopify.currency && window.Shopify.currency.rate){
                currencyRate = window.Shopify.currency.rate;
            }
            return currencyRate;
        },
        getAmountInActiveCurrency: function (amount) {
            if(!amount || amount == "" || amount == null || amount == undefined) {
                return 0;
            }
            if(window && window.Shopify && window.Shopify.currency && window.Shopify.currency.rate) {
                let rate = window.Shopify.currency.rate;
                if(rate == "1.0") {
                    return amount;
                }else{
                    return parseFloat(parseFloat(amount) * parseFloat(rate)).toFixed(2);
                }
            }
        },
        checkIfBrandingShouldBeVisible: function(type) {
            try{
                // if(gfg.settings.merchantInfo.createdAt && new Date(gfg.settings.merchantInfo.createdAt) > new Date("2023-10-25T00:00:00.000Z")) {
                //     return true;
                // }
                // based on createdAt date
    
                
                // if (!)
                //check if gfgVolDiscountWrapper or gftFreeGiftWrapper is present and has children
                if(gfg.$(".gfgVolDiscountWrapper").children().length < 1 
                   && gfg.$(".gftFreeGiftWrapper").children().length < 1  
                   && gfg.$(".gfgBulkDiscountWidgetHTMLWrapper").children().length < 1  
                   && gfg.$(".gfgBogoWrapper").children().length < 1) {
                    return false;
                }
    
                if(!gfg.settings?.merchantInfo?.isSubscription || !gfg.settings?.merchantInfo?.isSubscription.name){
                    return true;
                }
                if(gfg.settings?.merchantInfo?.isSubscription && gfg.settings?.merchantInfo?.isSubscription?.name?.search('Free') !== -1 && !type  && type !== 'checkout'){
                    return true;
                }
                return false;
            }catch(err) {
                gfg.utility.debugConsole(err);
                return true;
            }
            
        },
        renderPoweredByLabel: function() {
            if(gfg.utility.checkIfBrandingShouldBeVisible()){
                let gfgPoweredByLabel = gfg.$("<a>").addClass("gfgPoweredAnchorTag")
                .attr("href", "https://apps.shopify.com/kite-free-gift").attr("target", "_blank")
                .css("text-align", "end").css("display", "block").css("color", "black").css("font-size", "14px").css("text-decoration", "none");
                gfgPoweredByLabel.text("✨Powered By Kite✨");
                return gfgPoweredByLabel;
            }else{
                return null;
            }
        },
        formatPrice: function (price) {
            try {
                if (window && window.Shopify && window.Shopify.currency && window.Shopify.currency.active) {
                    //find the currency symbol from  gfg.settings.merchantInfo.multipleCurrencies[window.Shopify.currency.active] get the symbol
                    let currencySymbol = gfg.utility.getCurrencySymbol();
                    return currencySymbol + "" + parseFloat(price / 100).toFixed(2)
                }
            } catch(err) {
                gfg.utility.debugConsole(err);
            }
        },
        formatPriceWithoutSymbol: function (price) {
            if (window && window.Shopify && window.Shopify.currency && window.Shopify.currency.active) {
                //find the currency symbol from  gbb.settings.merchantInfo.multipleCurrencies[window.Shopify.currency.active] get the symbol
                return parseFloat(price / 100).toFixed(2)
            } else {
                return parseFloat(price / 100).toFixed(2)
            }
        },
        refreshFreeGiftCartData: function (cartData) {
            try {
                // gfg.state.freeGiftsCartData = {...freeGiftsCartData}
                let freeGiftsPresentInCart = [];
                if (cartData && cartData.items && cartData.items.length > 0) {
                    // let freeGifts = gfg.settings.freeGifts;
                    for(let i=0; i<cartData.items.length; i++){
                        // let cartItems = cartData.items;
                        let cartItem = cartData.items[i]
                        if(cartItem && cartItem.properties && cartItem.properties["_free_product"]){
                            if (cartItem.properties["_free_product"] == "true") {
                                freeGiftsPresentInCart.push(cartItem)
                            }
                        }
                    }
                }
                
                

                gfg.state.freeGiftsCartDataMap_productId = gfg.utility.convertArrayToObject(freeGiftsPresentInCart, "product_id");
                gfg.state.freeGiftsCartDataMap_variantId = gfg.utility.convertArrayToObject(freeGiftsPresentInCart, "variant_id");
                gfg.state.freeGiftsCartData['items'] = freeGiftsPresentInCart;

                // convert
            } catch (error) {
                gfg.utility.debugError("gfg-utility-refreshFreeGiftCartData");
                gfg.utility.debugError(error);
                return false
            }
        },
        createMapForVariantId  : function(products, extraInfo=undefined) {
            try{
                //products is an objects with product handle as key
                //this function returns an object with product id as key
                let productsWithIdAsKey = {};
                for (let [key, value] of Object.entries(products)) {
                    let product = value
                    //if product has variants
                    if (product.variants.length > 0) {
    
                        for (let i = 0; i < product.variants.length; i++) {
                            product.variants[i].variant_id = product.variants[i].id;
                            product.variants[i].image = product.variants[i].featured_image?.src;
                            if (!product.variants[i].image) {
                                product.variants[i].image = product.featured_image
                            }
                            if(extraInfo == undefined || product.variants[i].title == "" || product?.variants?.length == 1) {
                                product.variants[i].title = product.variants[i].name
                            } else if(!extraInfo.shouldVariantTitleBeConvertedToProductTitle) {
                                product.variants[i].title = product.variants[i].title
                            }
                            product.variants[i].product_id = product.id
                            if(product.selling_plan_groups) {
                                //product.variants[i].sellingPlanDetails = gbb.utility.getSellingPlanDetailsForVariant(product?.selling_plan_groups, product.variants[i]?.selling_plan_allocations)
                                product.variants[i].selling_plan_groups = product.selling_plan_groups || [];
                                product.variants[i].selling_plan_allocations =  product?.variants[i]?.selling_plan_allocations || [];
                            }
                            productsWithIdAsKey[product.variants[i].id] = product.variants[i];
    
                        }
                    }
                    //if product has no variants
                    else {
                        productsWithIdAsKey[product.id] = product;
                    }
                }
                return productsWithIdAsKey;
            }catch(err){
                gfg.utility.debugConsole(err);
                return {};
            }
        },
        convertFromStoreCurrencyToCustomer : function(amount) {
            try {
                let activeCurrencyRate = gfg.utility.getActiveCurrencyRate(); 
                let convertedAmount = parseFloat(amount * activeCurrencyRate).toFixed(2);
                return convertedAmount;
            } catch(err) {
                gfg.utility.debugConsole(err)
            }
        },
        checkIfClickIsAllowed_sastaDebounce : function(selector,delay=500){
            try {
                const currentTime = new Date().getTime();
                let lastClickTimestamps = gfg.state.lastClickTimestamps
                const previousClickTime = lastClickTimestamps.get(selector) || 0;
                const timeDifference = currentTime - previousClickTime;
              
                if (timeDifference < delay) {
                  console.log("time difference:" + timeDifference + "ms")
                  return false;
                }
              
                lastClickTimestamps.set(selector, currentTime);
                gfg.state.lastClickTimestamps = lastClickTimestamps;
                return true;
            } catch (error) {
                console.log("error in checkIfClickIsAllowed_sastaDebounce", error)                
                return true;
            }
        },
        convertArrayToObject : function(array, key) {
            try {
                let obj = {};
                for(let i=0; i<array.length; i++) {
                    obj[array[i][key]] = array[i];
                }
                return obj;
            } catch(err) {
                gfg.utility.debugConsole(err)
            }
        },
        listenForApiCalls: function () {
            // Save a reference to the original fetch function
           try {
             const originalFetch = window.fetch;
             // Define a new fetch function that intercepts requests
             window.fetch = function(url, options) {
                 // Log the request URL
                 gfg.utility.debugConsole("gfg Request URL: " + url);
                 // Check if the URL contains "/cart"
                 if (url &&  typeof url == "string" && ( url.includes("graphql.json") ||  url.includes('/cart/change') || url.includes('/cart/add') || url.includes('/cart/update') || url.includes('/cart/clear'))) {
                     // Call the original fetch function to make the request
                     
                     return originalFetch.apply(this, arguments).then(async (response) => {
                         // Log the response data
                         try {
                           if (typeof response === 'string') {
                             await gfg.utility.callchecksAfterApiCalls(url, undefined);
                           }else{
                             response.clone().text().then(async (data) => {
                               await gfg.utility.callchecksAfterApiCalls(url, data);
                             });
                           }
                          
                           return response;
     
                         } catch (error) {
     
                             gfg.utility.debugError("Error in response data: ", error);
                           return response;
                         }
                        
                     });
 
                 } else {
                     // If the URL doesn't contain "/cart", call the original fetch function directly
                     return originalFetch.apply(this, arguments);
                 }
             };
 
           } catch (error) {
            gfg.utility.debugError("Error in listenForApiCalls: ", error);
           }
        
          
        },
        listenForAjaxApiCalls: function () {
            try {
                    // Save a reference to the original gfg.$.ajax function
                    var originalAjax = gfg.$.ajax;
                
                    // Override the gfg.$.ajax function
                    gfg.$.ajax = function(reqObj, options) {
                    let url = reqObj.url;
                    // Log the request URL
                    gfg.utility.debugConsole("gfg Request URL: " + url);
                
                    
                    // Check if the URL contains "/cart"
                    if (
                        url && 
                        typeof url == "string"
                        &&
                        (
                        url.includes('/cart/change') ||
                        url.includes('graphql.json') ||
                        // url.includes('/cart.js') ||
                        url.includes('/cart/add') ||
                        url.includes('/cart/update') ||
                        url.includes('/cart/clear') )
                    ) {
                        // Call the original gfg.$.ajax function to make the request
                        return originalAjax.apply(this, arguments).then(async function(response) {
                        // Log the response data
                        try {
                            if (typeof response === 'string') {
                            await gfg.utility.callchecksAfterApiCalls(url, undefined);
                            }else{
                            response.clone().text().then(async (data) => {
                                await gfg.utility.callchecksAfterApiCalls(url, data);
                            });
                            }
                            return response;
        
                        } catch (error) {
                            gfg.utility.debugConsole("Error in ajax response data: ", error);
                            return response;
                        }
                        });
                    } else {
                        // If the URL doesn't contain "/cart", call the original gfg.$.ajax function directly
                        return originalAjax.apply(this, arguments);
                    }
                    };
            } catch (error) {
                gfg.utility.debugConsole("Error in listenForAjaxApiCalls: ", error);
            }
        },
        listenForXmlHttpApiCalls: function() {
            // Save a reference to the original XMLHttpRequest constructor
         try {
             console.log('inside xml http api call');
             const OriginalXMLHttpRequest = window.XMLHttpRequest;
         
             // Override the XMLHttpRequest constructor
             window.XMLHttpRequest = function() {
                 const xhr = new OriginalXMLHttpRequest();
         
                 // Save references to the original methods
                 const originalOpen = xhr.open;
                 const originalSend = xhr.send;
         
                 // Override the open method to store the URL
                 xhr.open = function(method, url) {
                     // Store the URL in the xhr object
                     xhr._url = url;
         
                     // Log the request URL
                    //  console.log("XMLHttpRequest open url", url);
                     gfg.utility.debugConsole("XMLHttpRequest Request URL: " + url);
         
                     // Call the original open method
                     return originalOpen.apply(this, arguments);
                 };
         
                 // Override the send method
                 xhr.send = function(data) {
                     // Check if the URL contains "/cart" immediately
                     if (
                         xhr._url &&
                         typeof xhr._url == "string" &&
                        ( xhr._url.includes('/cart/change') ||
                            xhr._url.includes('graphql.json') ||
                        //   xhr._url.includes('/cart.js') ||
                         xhr._url.includes('/cart/add') ||
                         xhr._url.includes('/cart/update') ||
                         xhr._url.includes('/cart/clear'))
                     ) {
                         // Override the onreadystatechange event handler
                         const originalOnReadyStateChange = xhr.onreadystatechange;
                         xhr.onreadystatechange = async function() {
                             if (xhr.readyState == XMLHttpRequest.DONE || xhr.readyState == 4) {
                                 // Log the response data
                                 const response = xhr.responseText;

                                 try {
                                    //  const response = xhr.responseText;
                                     //console.log("XMLHttpRequest Response Data", response);
         
                                     // Perform your desired actions with the response data
                                     if (typeof response === 'string') {
                                         gfg.utility.debugConsole(" callchecksAfterApiCalls for" , xhr._url);
 
                                         await gfg.utility.callchecksAfterApiCalls(xhr._url, undefined);
                                        //  return response;
                                     } else {
                                         response.clone().text().then(async (data) => {
                                             await gfg.utility.callchecksAfterApiCalls(xhr._url, data);
                                         });
                                         return response;
                                     }
                                 } catch (error) {
                                     gfg.utility.debugConsole("Error in XMLHttpRequest response data: ", error);
                                     return response;
                                 }
                             }
         
                             // Call the original onreadystatechange event handler
                             if (typeof originalOnReadyStateChange === 'function') {
                                  originalOnReadyStateChange.apply(xhr, arguments);
                             }
                         };
                     }
         
                     // Call the original send method
                     return originalSend.apply(this, arguments);
                 };
         
                 return xhr;
             };
           } catch (error) {
             gfg.utility.debugConsole("Error in listenForXmlHttpApiCalls: ", error);
           }
        },    
        listenForXmlHttpApiCallsNew: function() {
            try {
                console.log('inside xml http api call');
                const OriginalXMLHttpRequest = window.XMLHttpRequest;
        
                window.XMLHttpRequest = function() {
                    const xhr = new OriginalXMLHttpRequest();
        
                    const originalOpen = xhr.open;
                    const originalSend = xhr.send;
        
                    xhr.open = function(method, url, ...args) {
                        xhr._url = url;
                        gfg.utility.debugConsole("XMLHttpRequest Request URL: " + url);
                        originalOpen.call(xhr, method, url, ...args);
                    };
        
                    xhr.send = function(data) {
                        const originalOnReadyStateChange = xhr.onreadystatechange || (() => {});
                        xhr.onreadystatechange = async function(...args) {
                            if (xhr.readyState === XMLHttpRequest.DONE) {
                                if (xhr._url && typeof xhr._url === "string" && 
                                    (xhr._url.includes('/cart/change') || xhr._url.includes('/cart/add') ||
                                     xhr._url.includes('/cart/update') || xhr._url.includes('/cart/clear'))) {
                                    try {
                                        const response = xhr.responseText;
                                        // Your custom logic here
                                        await gfg.utility.callchecksAfterApiCalls(xhr._url, response);
                                    } catch (error) {
                                        gfg.utility.debugConsole("Error in XMLHttpRequest response data: ", error);
                                    }
                                }
                            }
                            originalOnReadyStateChange.apply(this, args);
                        };
                        originalSend.call(xhr, data);
                    };
        
                    return xhr;
                };
            } catch (error) {
                gfg.utility.debugConsole("Error in listenForXmlHttpApiCalls: ", error);
            }
        },
        
        
        //  listenForFormSubmits:function() {
        //     const forms = document.querySelectorAll('form');
        
        //     forms.forEach(form => {
              
        //         const action = form.getAttribute('action');
                
        //         if (action.includes('/cart/change') || action.includes('/cart/add') || action.includes('/cart/update') || action.includes('/cart/clear')) {
        //             gfg.utility.debugConsole("gfg Form Action: " + action);
        //             event.preventDefault();
        //             form.addEventListener('submit', async (event) => {
        //                 try {
        //                     // form.submit();

        //                     //place a timeout here to wait for the form to submit
        //                     await new Promise(resolve => setTimeout(resolve, 1000));
        //                     console.log("form after submit:");
        //                     // callchecks after api calls should only happen after the form is submitted. 
        //                     await gfg.utility.callchecksAfterApiCalls(action, undefined);
        //                     } catch (error) {
        //                         gfg.utility.debugConsole("Error in ajax response data: ", error);
        //                     }
        //             });
        //         }
        //     });
        // },
        
        interceptFetchRequest(matches, cb) {
            const originalFetch = fetch
        
            window.fetch = function (input, init) {
            return originalFetch(input, init).then(async (res) => {
                if (input && typeof input == "string"   && ( input.includes('graphql.json') ||  input.includes('/cart/change') || input.includes('/cart/add') || input.includes('/cart/update') || input.includes('/cart/clear'))) {
                    // Call the original fetch function to make the request
                   await  gfg.utility.callchecksAfterApiCalls(input, res);
                }
                return Promise.resolve(res)
            })
            }
        },
        interceptXMLHttpRequest(matches, cb) {
            const originalOpen = XMLHttpRequest.prototype.open
        
            XMLHttpRequest.prototype.open = function () {
            this.addEventListener('load', async function () {
                if (input && typeof input == "string" &&
                    // input.includes("/cart.js") &&
                   (
                    input.includes('graphql.json') ||
                    
                    input.includes('/cart/change') || input.includes('/cart/add') || input.includes('/cart/update') || input.includes('/cart/clear'))) {
                    // Call the original fetch function to make the request
                    await gfg.utility.callchecksAfterApiCalls(input, res);
                }
            })
            originalOpen.apply(this, arguments)
            }
        },    
        callchecksAfterApiCalls: async function (url, data) {
            try {
                
                if (url && typeof url =="string"    && url.includes('app=gfgfreegift')) {
                 return data;
                }
                var cartData = undefined;
                if (cartData) {
                    gfg.state.cartData = cartData;
                } else {
                    gfg.state.cartData = await gfg.utility.getCart();
                    let relevantCartDataForFreeGiftEligibility = gfg.gfgFreeGift.utility.filterCartDataBasedOnSettings(gfg.state.cartData);
                    gfg.state.gfgFreeGiftCartData = relevantCartDataForFreeGiftEligibility;            
                    cartData = gfg.state.cartData;
                    gfg.gfgVolDiscount.actions.handleQuantityUpdate();
                }
             
              await gfg.gfgFreeGift.f.checkForFreeGift(cartData)
              gfg.gfgVolDiscount.actions.handleQuantityUpdate();
            } catch (e) {
              // gfg.utility.debugConsole("gfg Response data: ", data);
            }
        },
        combineObjects: function (obj1, obj2) {
            const combinedObject = {};

            // Copy properties from the first object
            for (let key in obj1) {
                if (obj1.hasOwnProperty(key)) {
                    combinedObject[key] = obj1[key];
                }
            }
        
            // Copy properties from the second object
            for (let key in obj2) {
                if (obj2.hasOwnProperty(key)) {
                    combinedObject[key] = obj2[key];
                }
            }
        
            return combinedObject;
        },
          debugConsole: function(...messages){
            try{
                let flag = gfg.state.CONSTANT_DEBUG_FLAG;
                if(flag == false){
                    return;
                }
                if(flag == true){
                    for (let message of messages) {
                        console.log(message);
                    }
                    return;
                }
                let isDebug = localStorage.getItem("debug");
                if (isDebug) {
                    for (let message of messages) {
                        console.log(message);
                    }
                    gfg.state.CONSTANT_DEBUG_FLAG = true

                }else{
                    gfg.state.CONSTANT_DEBUG_FLAG = false
                }
            }catch(err){
                console.error( 'error inside debugConsole ->' , err)
            }
        },
        debugError: function(...messages){
            try{
                let flag = gfg.state.CONSTANT_DEBUG_FLAG;
                if(flag == false){
                    return;
                }
                if(flag == true){
                    for (let message of messages) {
                        console.error(message);
                    }
                    return;
                }
                let isDebug = localStorage.getItem("debug");
                if (isDebug) {
                    gfg.state.CONSTANT_DEBUG_FLAG = true;
                    for (let message of messages) {
                        console.error(message);
                    }

                }else{
                    gfg.state.CONSTANT_DEBUG_FLAG = false
                }
            }catch(err){
                console.error( 'error inside the debugError function ->' , err)
            }
        },
        setCustomerSpecificData: function(){
            let customerId = undefined;
            let isCustomerLoggedInBool = false
            let customerTags = [];
            let activeCustomerData = {}
            if(window.shopifyLiquidValuesApp7Ext && window.shopifyLiquidValuesApp7Ext.customer){
                activeCustomerData = shopifyLiquidValuesApp7Ext.customer
            }
            
            if(activeCustomerData.email != null){
                customerId = activeCustomerData.id;
                customerTags = activeCustomerData?.customerTags || [];
                isCustomerLoggedInBool = true
            }

            gfg.state.activeCustomerData = {
                customerId: customerId,
                customerTags: customerTags,
                isCustomerLoggedInBool: isCustomerLoggedInBool
            }
        },
        updateCartAttributeWithCustomerData: async function(){
            try{

                // freeGiftConditionChecker
                let isFreeGiftConditionMet = gfg.gfgFreeGift.f.gfgFreeGiftCheckCustomerConditions();
                let isVolumeDiscountConditionMet = true;
                // volumenDiscountChecker
                gfg.gfgVolDiscount.f.removeInactiveCampaigns();
                if(gfg.gfgVolDiscount.state.customerSpecificDiscount.length == 0){
                    isVolumeDiscountConditionMet = false;
                }


                let result = isFreeGiftConditionMet || isVolumeDiscountConditionMet;

                // if any true update cart data
                if(result){
                    // update cart
                    let customerData = gfg.state.activeCustomerData;
                    await gfg.utility.updateCart({ attributes:{ _loggedInId: customerData.customerId, _customerTags: customerData.customerTags }});
                }else{
                    await gfg.utility.updateCart({ attributes:{ _loggedInId: null, _customerTags: null }});
                }

            
            }catch(err){
                gfg.utility.debugConsole(err)
            }
        }
        
    },
    
    productPage: {
        init: async function (settings) {
            gfg.utility.debugConsole("productPage-init")
            gfg.productPage.f.insertWrapperIntoPage(settings)
            gfg.gfgFreeGift.init(settings, "PRODUCT_PAGE")
            gfg.gfgVolDiscount.init(settings, "PRODUCT_PAGE")
            gfg.gfgBogoFeature.init(settings, "PRODUCT_PAGE")
        },
        f: {
            insertWrapperIntoPage: function (settings) {

                let productPageWrapperElement =  gfg.$(document).find(".gfgProductPageAppBlock"); 
               
                if(productPageWrapperElement && productPageWrapperElement.length > 0){
                   console.log("productPageWrapperElement already present")
                    return
                }

                if ("undefined" != typeof gfg.elements.addToCartBtn) {
                    let addToCartBtnEle = gfg.$(document).find(gfg.elements.addToCartBtn)
                    addToCartBtnEle.each(function (index) {
                        if (gfg.$(this).is(":visible")) {
                            if(gfg.settings.app.addAfterAddTocartBtn){
                                gfg.$(this).after(gfg.elements.productPageWrapperV2);
                            }else{
                                gfg.$(this).before(gfg.elements.productPageWrapperV2);
                            }   
                        }
                    });
                }
            },
        },
         
        actions: {
            insertUpsellModal: function () {
                //   Gs.$("body").append(Gs.settings._modalHtml);
                alert("popModal for upsell action")
            },
        },
    },
    cartPage: {
        init: async function (settings) {
            gfg.utility.debugConsole("cartPage-init")
            gfg.cartPage.f.insertWrapperIntoPage(settings)
            gfg.gfgFreeGift.init(settings, "CART_PAGE")
            gfg.gfgVolDiscount.init(settings, "CART_PAGE")
            gfg.gfgBogoFeature.init(settings, "CART_PAGE")

        },
        f: {
            insertWrapperIntoPage: function (settings) {


                let cartPageWrapperElement =  gfg.$(document).find(".gfgCartPageAppBlock");
                
                if(cartPageWrapperElement && cartPageWrapperElement.length > 0){
                    // if page_type is cart then return and empty the div
                    console.log("cartPageWrapperElement already present")
                    return
                }


                return new Promise((res, rej) => {
                    if ("undefined" != typeof gfg.elements.checkoutBtn) {
                        let checkoutBtnEle = gfg.$(document).find(gfg.selectors.checkoutBtn)
                        checkoutBtnEle.each(function (index) {
                            // console.log("index", index)
                            if (gfg.$(this).is(":visible")) {
                                // check if theme ids matches otherwise add element to default position
                                if (window.Shopify && window.Shopify.theme && window.Shopify.theme.theme_store_id && window.Shopify.theme.theme_store_id == gfg.constants.themesIds.DAWN_THEME) {
                                    gfg.$(this).parent().before(gfg.elements.cartPageWrapperV2);
                                } else if(gfg.settings.app.addAftercheckoutBtn) {
                                    gfg.$(this).after(gfg.elements.cartPageWrapperV2);
                                }else{
                                    gfg.$(this).before(gfg.elements.cartPageWrapperV2);
                                }
                            }
                        });

                    }
                    res()
                })
            },
        },
        events: {
            ajaxSuccess: function (cartSettings) {
                gfg.utility.debugConsole("register ajax success event")
                gfg.$(document).ajaxSuccess(function (event, xhr, settings) {
                    gfg.utility.debugConsole("ajaxSuccess", settings.url)
                    if (settings.url == "/change.js?line=1&quantity=0" || settings.url == "change.js?line=1&quantity=0" || settings.url == "change.js" || settings.url == "/change.js" || settings.url == "/cart.js" || settings.url == "cart.js" || settings.url == "cart" || settings.url == "/cart") {
                        setTimeout(function () {
                            gfg.utility.debugConsole("ajaxSuccess")

                        }, 2000);
                    }
                });
            }
        }
    },
    gfgFreeGift: {
        state:{
            freeGiftsShopifyData: [],
            freeGiftsShopifyDataByHandles: {},
            freeGiftsShopifyDataByVariantIds: {},
            superiorTier: undefined,
            prepareUIState: "CONDITION_NOT_MET",
            isCartUpdatedByUs: false,
            isEventListenerRegistered: false,
            isAccordion: true,
            isToastPresent: true,
            CURRENT_QTY_BUY_ANY_PRODUCT_FROM_COLLECTION_Y: [],
            CURRENT_QTY_BUY_PRODUCT_X: [],
            CURRENT_TOTAL_FOR_SPEND_X_IN_COLLECTION_Y: [],
            isCustomerConditionMet: true,
            // freeGiftsShopifyDatafired : false
        },
        init: async function (settings, parent) {
            try{
                let isFreeGiftConditionMet = gfg.gfgFreeGift.state.isCustomerConditionMet;
                if(isFreeGiftConditionMet == false){
                    return;
                }
                await gfg.gfgFreeGift.f.gfgGetAllFreeGiftData()
                gfg.gfgFreeGift.f.checkForFreeGift();
               
            }catch(e){
                gfg.utility.debugConsole("error in gfgFreeGift init", e)
            }
        },
        initialize: async function (settings, parent) {
            // let productHandle = gfg.f.getProductPageHandle(settings)
    
          
    
        },
        f: {
            checkForFreeGift: async function (apicartData) {
    
                // if (gfg.gfgFreeGift.state.freeGiftsShopifyDatafired == false){
                //     await gfg.gfgFreeGift.f.gfgGetAllFreeGiftData()
                // }  
                let isFreeGiftConditionMet = gfg.gfgFreeGift.state.isCustomerConditionMet;
                if(isFreeGiftConditionMet == false){
                    return;
                }

                // check if checkForFreeGift is already triggered then return
                if( gfg.state.isCheckForFreeGiftTriggered) {
                    gfg.state.checkForFreeGift = true
                    return
                }
    
                gfg.state.isCheckForFreeGiftTriggered = true
    
                // get cart data 
                if(apicartData){
                    let relevantCartDataForFreeGiftEligibility = gfg.gfgFreeGift.utility.filterCartDataBasedOnSettings(apicartData);
                    gfg.state.gfgFreeGiftCartData = relevantCartDataForFreeGiftEligibility;
                }else{
                    // gfg.state.cartData = await  gfg.gfgFreeGift.utility.getCart()
                    gfg.state.gfgFreeGiftCartData = await  gfg.gfgFreeGift.utility.getCart();
                }
                
                await gfg.gfgFreeGift.f.processFreeGift()
                await gfg.gfgVolDiscount.init(gfg.settings ,"CART_PAGE");
    
                // set to false, so that checkForFreeGift can be triggered again
                gfg.state.isCheckForFreeGiftTriggered = false
                
                // call again if checkForFreeGift is triggered while executing this function
                if( gfg.state.checkForFreeGift) {
                    gfg.state.checkForFreeGift = false
                    gfg.gfgFreeGift.f.checkForFreeGift()
                }
            },
            processFreeGift: async function () {
    

                // gfgFreeGiftSelectDivExpanded gfgFreeGiftOptionsContainerDivExpanded
                let checkIfFreeGifSelectAccordionIsExpanded = gfg.$(".gfgFreeGiftSelectDivExpanded").length > 0;
                let checkIfFreeGiftOptionsAccordionIsExpanded = gfg.$(".gfgFreeGiftOptionsContainerDivExpanded").length > 0;
                if(checkIfFreeGifSelectAccordionIsExpanded || checkIfFreeGiftOptionsAccordionIsExpanded){
                    return
                }


                // check if freeGifts there is atleast one active freegift
                if(gfg.settings.freeGifts && gfg.settings.freeGifts.length > 0 && gfg.settings.freeGifts[0].rulesList ){
                }else{
                    return
                }
                

                // check if the schedule is active or not
                // check gfg.settings.freeGifts[0]. check if campaignScheduleData is there or not.
                // if yes then call a function to check if it is active or not

                let checkIfFreeGiftCampaignScheduleIsActive = gfg.gfgFreeGift.f.checkIfFreeGiftCampaignScheduleIsActive();

                if(!checkIfFreeGiftCampaignScheduleIsActive){
                    return
                }
    
                let isMultipleFreeGiftAllowed = gfg.settings.freeGifts[0].isMultipleFreeGiftAllowed || false
                gfg.gfgFreeGift.utility.modifySettingsForRuleIds()
                
                try {
                    // gfg.settings.freeGifts[0].isAutoAdd = false
                    let autoAdd = gfg.settings.freeGifts[0].isAutoAdd;
                    if(!isMultipleFreeGiftAllowed){
                        if(autoAdd){
    
                            await gfg.gfgFreeGift.f.gfgHandleAutoAddEnabled()
    
                        }else{
                            await gfg.gfgFreeGift.f.gfgHandleAutoAddDisabled();
                        }
                    }else{
                        if(autoAdd){
    
                            await gfg.gfgFreeGift.f.gfgHandleAutoAddEnabled_multipleFreeGift()
    
                        }else{
                            await gfg.gfgFreeGift.f.gfgHandleAutoAddDisabled_multipleFreeGift();
                        }  
                    }
                    
                } catch (error) {
                    gfg.utility.debugError("processFreeGift", error)
                }
                
            },
            checkIfFreeGiftCampaignScheduleIsActive: function() {
                try {
                    // use campaignScheduleData object of free gift and check if it is active or not
                    let campaignScheduleData = gfg.settings.freeGifts[0].campaignScheduleData;


                    if(!campaignScheduleData){
                        return true
                    }
                     
                    if (campaignScheduleData?.campaignSchedule != "SCHEDULED"){
                        return true
                    }

                    if(campaignScheduleData?.campaignSchedule == "SCHEDULED"){
                        let currentDateUTC = new Date().toISOString();
                        let startDateTime_UTC = campaignScheduleData.startDateTime_UTC;
                        let endDateTime_UTC = campaignScheduleData.endDateTime_UTC;
                
                        if (currentDateUTC >= startDateTime_UTC && currentDateUTC <= endDateTime_UTC) {
                            console.log('Campaign is active');
                            return true;
                        } else {
                            console.log('Campaign is not active');
                            return false;
                        }
                    }

                    return true;
                    
                } catch (err) {
                    gfg.utility.debugError("checkIfFreeGiftCampaignScheduleIsActive", err)
                    return true;
                }
            },
    
            processAddingValidFreeGiftsToCart_multipleFreeGift : async function(validFreeGiftTiers){
               
                let results = [];
                let validFreeGiftTiersToBeAddedToCart = JSON.parse(JSON.stringify(validFreeGiftTiers))
               
    
                let allValidFreeGiftTiers_afterCheckingCart = gfg.gfgFreeGift.f.getAllValidFreeGiftTiers(validFreeGiftTiersToBeAddedToCart)
                // discard the one that is already in cart
                // use gfg.state.freeGiftsCartDataMap_productId
    
                // now whatever is left we just add the first variant of those many 
                let dataForFirstVariants = await gfg.gfgFreeGift.utility.getFirstVariantSelectedWithProperties(allValidFreeGiftTiers_afterCheckingCart)
    
                if(dataForFirstVariants.length == 0){
                    return
                }else {
                    //run it in a loop of dataForFirstVariants.length
                    for(let i=0; i<dataForFirstVariants.length; i++){
                        let itemValue = dataForFirstVariants[i];
                        itemValue = {
                            ...itemValue,
                            ...itemValue.properties
                        }
                        results.push(await gfg.gfgFreeGift.f.gfgAddFreeGiftToCart(itemValue))
                    }
                }
                // if any one of them is true then return true
                if (results.includes(true)) {
                    return true
                }
                return
            },
            isProductAllowedToBeAddedToCart: function(productId){
                let { validFreeGiftTiers } = gfg.gfgFreeGift.f.gfgFreeGiftAllOfferStatus();
    
                let productData = gfg.state.freeGiftsCartDataMap_productId[productId];
    
                if (productData) {
                    // If product data exists, update the ruleIdsAlreadyInCart
                    ruleIdsAlreadyInCart.push(productData.properties["_rule_id"]);
    
                    // Remove any tiers with this rule ID from the valid free gift tiers
                    validFreeGiftTiers = validFreeGiftTiers.filter(tier => {
                        return tier.ruleId !== productData.properties["_rule_id"];
                    });
                    
                    // Since product data exists, this product isn't allowed to be added again
                    return false;
                }else{
                    // check if its sibling is already in cart
                    validFreeGiftTiers = validFreeGiftTiers.filter(tier => {
                        return tier.ruleId !== productData.properties["_rule_id"];
                    });
                }            
            },
            gfgHandleAutoAddEnabled: async function(){
            
                let { validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers } = gfg.gfgFreeGift.f.gfgFreeGiftAllOfferStatus();
    
                let freeGiftsFromCart = gfg.gfgFreeGift.f.gfgFindAllFreeGiftsFromCart(gfg.state.gfgFreeGiftCartData)
    
                if(validFreeGiftTiers.length == 0){
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_NOT_MET"
                    if(freeGiftsFromCart.length > 0){
                       await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsFromCart, undefined)
                    }
                }

                if(inValidFreeGiftTiers.length > 0){
                    // remove all free gifts which are part of freegift teiers
                    // if present in cart
                    // remove All the invalid free gifts from cart
                    // let cartData JSON.parse JSON.stringify gfg.state.freeGiftsCartData;
                    let freeGiftsToBeRemovedFromCart = gfg.gfgFreeGift.f.freeGiftsToBeRemovedFromCart(inValidFreeGiftTiers)
                    // await gfg.gfgFreeGift.utility.removeCartItemsFromCart(freeGiftsToBeRemovedFromCart)
                    await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsToBeRemovedFromCart, undefined)
    
                };

                let isGiftAdded;

                if(validFreeGiftTiers.length > 0){
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_MET"
                    
                    if(freeGiftsFromCart.length > 0){
                        gfg.gfgFreeGift.state.prepareUIState = "CONDITION_FULFILLED"
                    }
    
                    gfg.gfgFreeGift.f.gfgFreeGiftSuperiorTier(validFreeGiftTiers)
                    let superiortierFreeGiftVariantId = gfg.gfgFreeGift.f.getSuperiorTierFreeGift()
    
                    let  isSuperiorTierFreeGiftAlreadyInCart = gfg.gfgFreeGift.f.checkIfSuperiorTierFreeGiftAlreadyInCart(freeGiftsFromCart, superiortierFreeGiftVariantId)
                    if(isSuperiorTierFreeGiftAlreadyInCart){
                        await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsFromCart, superiortierFreeGiftVariantId)
                    }else{
                        await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsFromCart, undefined)
                        isGiftAdded = await gfg.gfgFreeGift.f.gfgAddSuperiorTierFreeGiftToCart(superiortierFreeGiftVariantId)
                    }   
                }
    
                  
                if(isGiftAdded == true){
                    // gfg.state.cartData = await  gfg.gfgFreeGift.utility.getCart();
                    gfg.state.gfgFreeGiftCartData = await  gfg.gfgFreeGift.utility.getCart();
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_FULFILLED"
                }

                let freeGiftMsgHtml = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareUI(validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers );
                gfg.gfgFreeGift.f.insertIntoPageWrapper(freeGiftMsgHtml);
                gfg.gfgFreeGift.f.gfgFreeGiftContainerOverflow()
                gfg.gfgFreeGift.f.registerEvents()

                if(gfg.gfgFreeGift.state.isCartUpdatedByUs){
                    await gfg.gfgFreeGift.f.updateCartState()
                }
    
            },
            gfgHandleAutoAddDisabled: async function(){
    
                let { validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers } = gfg.gfgFreeGift.f.gfgFreeGiftAllOfferStatus();
    
                let freeGiftsFromCart = gfg.gfgFreeGift.f.gfgFindAllFreeGiftsFromCart(gfg.state.gfgFreeGiftCartData)
    
                if(validFreeGiftTiers.length == 0){
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_NOT_MET"
                    if(freeGiftsFromCart.length > 0){
                       await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsFromCart, undefined)
                    }
    
                }
                if(inValidFreeGiftTiers.length > 0){
                    // remove all free gifts which are part of freegift teiers
                    // if present in cart
                    // remove All the invalid free gifts from cart
                    // let cartData JSON.parse JSON.stringify gfg.state.freeGiftsCartData;
                    let freeGiftsToBeRemovedFromCart = gfg.gfgFreeGift.f.freeGiftsToBeRemovedFromCart(inValidFreeGiftTiers)
                    // await gfg.gfgFreeGift.utility.removeCartItemsFromCart(freeGiftsToBeRemovedFromCart)
                    await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsToBeRemovedFromCart, undefined)
    
                };
    
                if(validFreeGiftTiers.length > 0){
                    if(freeGiftsFromCart.length > 0){
                        let checkIfValidFreeGiftIsThereInCart = gfg.gfgFreeGift.f.checkIfValidFreeGiftIsThereInCart(freeGiftsFromCart, validFreeGiftTiers)
                        if(checkIfValidFreeGiftIsThereInCart){
                            gfg.gfgFreeGift.state.prepareUIState = "CONDITION_FULFILLED"
                        }else{
                            await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsFromCart, undefined)
                            gfg.gfgFreeGift.state.prepareUIState = "CONDITION_MET"
                        }
    
                    }else{
                        gfg.gfgFreeGift.state.prepareUIState = "CONDITION_MET"
                    }
    
                }
    
                let freeGiftMsgHtml = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareUI(validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers );
                gfg.gfgFreeGift.f.insertIntoPageWrapper(freeGiftMsgHtml)
                gfg.gfgFreeGift.f.gfgFreeGiftContainerOverflow();
                gfg.gfgFreeGift.f.registerEvents()
    
                if(gfg.gfgFreeGift.state.isCartUpdatedByUs){
                    gfg.gfgFreeGift.f.updateCartState()
                }
            },
            gfgHandleAutoAddEnabled_multipleFreeGift: async function(){
            
                let { validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers } = gfg.gfgFreeGift.f.gfgFreeGiftAllOfferStatus();
    
                let freeGiftsFromCart = gfg.gfgFreeGift.f.gfgFindAllFreeGiftsFromCart(gfg.state.gfgFreeGiftCartData)
    
    
                if(inValidFreeGiftTiers.length > 0){
                    // remove all free gifts which are part of freegift teiers
                    // if present in cart
                    // remove All the invalid free gifts from cart
                    // let cartData JSON.parse JSON.stringify gfg.state.freeGiftsCartData;
                    let freeGiftsToBeRemovedFromCart = gfg.gfgFreeGift.f.freeGiftsToBeRemovedFromCart(inValidFreeGiftTiers)
                    // await gfg.gfgFreeGift.utility.removeCartItemsFromCart(freeGiftsToBeRemovedFromCart)
                    await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsToBeRemovedFromCart, undefined)
    
                };
    
                if(validFreeGiftTiers.length == 0){
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_NOT_MET"
                    if(freeGiftsFromCart.length > 0){
                       await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsFromCart, undefined)
                    }
                }
                let isGiftAdded = false;
                if(validFreeGiftTiers.length > 0){
                  
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_MET"

                    if(freeGiftsFromCart.length > 0){
                        gfg.gfgFreeGift.state.prepareUIState = "CONDITION_FULFILLED"
                    }
                    isGiftAdded = await gfg.gfgFreeGift.f.processAddingValidFreeGiftsToCart_multipleFreeGift(validFreeGiftTiers)   
                }
    

                if (isGiftAdded == true) {
                    // gfg.state.cartData = await  gfg.gfgFreeGift.utility.getCart();
                    gfg.state.gfgFreeGiftCartData = await  gfg.gfgFreeGift.utility.getCart();
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_FULFILLED"
                }
                let freeGiftMsgHtml = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareUI(validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers );
                gfg.gfgFreeGift.f.insertIntoPageWrapper(freeGiftMsgHtml)
                gfg.gfgFreeGift.f.gfgFreeGiftContainerOverflow();
                gfg.gfgFreeGift.f.registerEvents();
                if(gfg.gfgFreeGift.state.isCartUpdatedByUs){
                    await gfg.gfgFreeGift.f.updateCartState()
                }

            },
            gfgHandleAutoAddDisabled_multipleFreeGift: async function(){
    
                let { validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers } = gfg.gfgFreeGift.f.gfgFreeGiftAllOfferStatus();
    
                let freeGiftsFromCart = gfg.gfgFreeGift.f.gfgFindAllFreeGiftsFromCart(gfg.state.gfgFreeGiftCartData)
    
                if(validFreeGiftTiers.length == 0){
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_NOT_MET"
                    if(freeGiftsFromCart.length > 0){
                       await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsFromCart, undefined)
                    }
                }
    
                if(validFreeGiftTiers.length > 0){
                    if(freeGiftsFromCart.length > 0){
                        let checkIfValidFreeGiftIsThereInCart = gfg.gfgFreeGift.f.checkIfValidFreeGiftIsThereInCart(freeGiftsFromCart, validFreeGiftTiers)
                        if(checkIfValidFreeGiftIsThereInCart){
                            gfg.gfgFreeGift.state.prepareUIState = "CONDITION_FULFILLED"
                        }else{
                            await gfg.gfgFreeGift.f.gfgRemoveAllFreeGiftProductsExceptGiven(freeGiftsFromCart, undefined)
                            gfg.gfgFreeGift.state.prepareUIState = "CONDITION_MET"
                        }
    
                    }else{
                        gfg.gfgFreeGift.state.prepareUIState = "CONDITION_MET"
                    }
    
                }
    
                let freeGiftMsgHtml = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareUI(validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers );
                gfg.gfgFreeGift.f.insertIntoPageWrapper(freeGiftMsgHtml)
                gfg.gfgFreeGift.f.gfgFreeGiftContainerOverflow();
                gfg.gfgFreeGift.f.registerEvents()
    
                if(gfg.gfgFreeGift.state.isCartUpdatedByUs){
                    gfg.gfgFreeGift.f.updateCartState()
                }
            },
            gfgFreeGiftFindAndUpdateInArray: function(id, updateValue, dataArray){
                let found = false;
    
                for (let i = 0; i < dataArray.length; i++) {
                    if (dataArray[i].id === id) {
                        dataArray[i].value = updateValue;
                        found = true;
                        return {id: id, value: updateValue}
                        break;
                    }
                }
    
                if (!found) {
                    dataArray.push({ id: id, value: updateValue });
                }
            },
            gfgFreeGiftFindInArray: function(id, dataArray){
                for (let i = 0; i < dataArray.length; i++) {
                    if (dataArray[i].id === id) {
                      return dataArray[i].value;
                    }
                  }
                  // Return null (or any other default value) if the id is not found in the array
                  return 0;
            },
            gfgAddSuperiorTierFreeGiftToCart:async function(superiortierFreeGiftVariantId){


                return await gfg.gfgFreeGift.f.gfgAddFreeGiftToCart({
                    variantId: superiortierFreeGiftVariantId,
                    _rule_id: "Free Gift"
                })

                let items = []
                items.push({ id: superiortierFreeGiftVariantId, quantity: 1, properties: { _free_product: true } })
                let freeGiftProductData = await gfg.utility.addToCartV2({ items: items })
                if(freeGiftProductData){
                    gfg.gfgFreeGift.state.isCartUpdatedByUs = true
                    return true
                }
                return false
            },
            gfgAddFreeGiftToCart:async function(freeGiftProduct){
                try {
                    let items = [];
                    let currentCartItems = gfg.state.gfgFreeGiftCartData.items;
    
                    //just check that the freeGiftInCart is in stock or notl
                    let isCurrentVariantInStock = gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds && gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds[freeGiftProduct.variantId]?.available || false;
    
                    if(!isCurrentVariantInStock){
                        return false
                    }
                    let defaultPropertyInFreeGift = "Free Gift"
                    let freeGiftLineItemProperties = { _free_product: true,_rule_id: freeGiftProduct?._rule_id  || defaultPropertyInFreeGift };
                    // check if freeGiftProduct is already in cart
                    let freeGiftProductInCart = currentCartItems.filter((product) => {
                        // do it based on variant Id
                        return product.variant_id == freeGiftProduct.variantId
                    })
    
                    if (freeGiftProductInCart.length > 0) {
                        for (let i = 0; i < freeGiftProductInCart.length; i++) {
                            let isSameTierItemAlreadyInCart = freeGiftProductInCart[i].properties["_rule_id"] == freeGiftProduct?._rule_id
                            let isRuleTierDefault = freeGiftProductInCart[i].properties["_rule_id"] == defaultPropertyInFreeGift
                            if(isSameTierItemAlreadyInCart && !isRuleTierDefault){
                                console.log("already in cart with free gift. not adding it again");
                                continue;
                            }
                            let freeGiftProductInCartLineItemKey = freeGiftProductInCart[i].key;
                            let currentQuantity = freeGiftProductInCart[i].quantity;
                            let items = {
                                id: freeGiftProductInCartLineItemKey,
                                properties: {
                                    ...freeGiftProductInCart[i]?.properties,
                                    ...freeGiftLineItemProperties
                                },
                                // quantity: currentQuantity
                            };
                            // use changeCart 
                            let freeGiftProductData = await gfg.utility.changeCart(items);
                            //add the same product again but with quantity 1
                            // and no properties
                            items = []
                            items.push({ id: freeGiftProduct.variantId, quantity: currentQuantity })
                            freeGiftProductData = await gfg.utility.addToCartV2({ items: items })


                            if (freeGiftProductData) {
                                gfg.gfgFreeGift.state.isCartUpdatedByUs = true;
                            } else {
                                return false;  // If any update fails, return false
                            }
                        }
                        return true;  // If all updates succeed, return true
                    }else{
                        items.push({ id: freeGiftProduct.variantId, quantity: 1, properties: freeGiftLineItemProperties })
                        let freeGiftProductData = await gfg.utility.addToCartV2({ items: items })
                        if(freeGiftProductData){
                            gfg.gfgFreeGift.state.isCartUpdatedByUs = true
                            return true
                        }
                        return false
                    }  
                } catch (error) {
                    gfg.utility.debugConsole("gfgAddFreeGiftToCart", error)
                    return false;
                }
            },
            getSuperiorTierFreeGift: function(){
                let superiorTier = gfg.gfgFreeGift.state.superiorTier;
                let freeGiftProduct = superiorTier.freeGiftProduct;
                // engineer the below code to run on a loop of freeGiftProduct array and use gfg.state.freeGiftsShopifyDataByVariantIds to check if they are in stock or not
                
                //---------------------------------------------------------------
                // ATTENTION: this code is no longer required as we filter valid free gift tiers based on stock availability in the beginning
                //---------------------------------------------------------------
                // for (let i = 0; i < freeGiftProduct.length; i++) {
                //     for (let j = 0; j < freeGiftProduct[i].variants.length; j++) {
                //         let variantId = freeGiftProduct[i].variants[j].variantId;
                //         let variantData = gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds[variantId];
                //         if (variantData && variantData.available == true) {
                //             return variantId;
                //         }
                //     }
                // }
                let superiortierFreeGiftVariantId =  freeGiftProduct[0].variants &&  freeGiftProduct[0].variants.length > 0 && freeGiftProduct[0].variants[0].variantId
                return superiortierFreeGiftVariantId
            },
            getAllValidFreeGiftTiers: function(validFreeGiftTiers){
                let allValidFreeGiftProductIds = []
                let alValidFreeGiftTiers = []
                for(let i=0; i< validFreeGiftTiers.length; i++){
                    let freeGiftProduct = validFreeGiftTiers[i].freeGiftProduct;
    
                    //check if this tier already has a product in cart
                    let ruleId = validFreeGiftTiers[i].ruleId
    
                    let freeGiftsFromCart = gfg.state.freeGiftsCartData.items
                    let freeGiftsFromCartForThisRuleId = freeGiftsFromCart.filter((product) => {
                        return product.properties["_rule_id"] == ruleId
                    })
    
    
                    if (freeGiftsFromCartForThisRuleId.length > 0) {
                        // if yes then remove this tier from validFreeGiftTiers
                        continue;
                    }else {
                        // if no then add this tier to allValidFreeGiftTiers
                        alValidFreeGiftTiers.push(validFreeGiftTiers[i])
                    }
    
                    // add all the free gift products to array
                }
    
                return alValidFreeGiftTiers;
                // return allValidFreeGiftProductIds
            },
            gfgGetAllFreeGiftData: async function(){
                // gfg.gfgFreeGift.state.freeGiftsShopifyDatafired = true;
                if(gfg.gfgFreeGift.state.freeGiftsShopifyData.length > 0){
                    return;
                }
                //check in session storage
                let freeGiftsShopifyDataFromSessionStorage = sessionStorage.getItem("gfgFreeGiftsShopifyData")
                let freeGiftsShopifyDataFromSessionStorageByHandle;
                
                if(freeGiftsShopifyDataFromSessionStorage && freeGiftsShopifyDataFromSessionStorage.length > 0){
                    freeGiftsShopifyDataFromSessionStorageByHandle = gfg.utility.convertArrayToObject(JSON.parse(freeGiftsShopifyDataFromSessionStorage), "handle")
                }
                let counterForHandlesPickedFromSessionStorage = 0;
                let productHandleArray = [];
                let rules =  gfg.settings.freeGifts.length > 0 ? gfg.settings.freeGifts[0]?.rulesList : [];
    
                for(let i=0; i< rules.length; i++){
                    let freeGiftProductArray = rules[i].freeGiftProduct
                    for(let j = 0; j< freeGiftProductArray.length; j++){
                        let handle = rules[i].freeGiftProduct[j].handle;
                        productHandleArray.push(handle);
                    }
                }
                const promises = productHandleArray.map(async (handle) => {
                    // check if freeGiftsShopifyDataFromSessionStorageByHandle[handle] is there or not
                    if(freeGiftsShopifyDataFromSessionStorageByHandle && freeGiftsShopifyDataFromSessionStorageByHandle[handle]){
                        counterForHandlesPickedFromSessionStorage++;
                        return freeGiftsShopifyDataFromSessionStorageByHandle[handle]
                    }else{
                        const productData = gfg.utility.getProductDataV2(handle)
                        return productData;
                    }
                });
    
                gfg.gfgFreeGift.state.freeGiftsShopifyData = await Promise.all(promises)

                // gfg.gfgFreeGift.state.freeGiftsShopifyData remove undefined and null and false values
                gfg.gfgFreeGift.state.freeGiftsShopifyData = gfg.gfgFreeGift.state.freeGiftsShopifyData.filter(item => item);


                console.log("counterForHandlesPickedFromSessionStorage", counterForHandlesPickedFromSessionStorage)
                let freeGiftsShopifyData = JSON.parse(JSON.stringify(gfg.gfgFreeGift.state.freeGiftsShopifyData))
                // convert array to an object with the key as handlevariantId
                gfg.gfgFreeGift.state.freeGiftsShopifyDataByHandles = gfg.utility.convertArrayToObject(freeGiftsShopifyData, "handle")
                gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds = gfg.utility.createMapForVariantId(gfg.gfgFreeGift.state.freeGiftsShopifyDataByHandles)
                
                sessionStorage.setItem("gfgFreeGiftsShopifyData", JSON.stringify(gfg.gfgFreeGift.state.freeGiftsShopifyData))
            },
            gfgFreeGiftSuperiorTier: function(validFreeGiftTiers){
                
                gfg.gfgFreeGift.state.superiorTier = validFreeGiftTiers[0]
                
                if(validFreeGiftTiers.length > 1){
                    for(let i=1; i< validFreeGiftTiers.length; i++){
                        let variantsExist = validFreeGiftTiers[i].freeGiftProduct[0] &&  validFreeGiftTiers[i].freeGiftProduct[0].variants && validFreeGiftTiers[i].freeGiftProduct[0].variants.length > 0;
                        if(variantsExist){
                            // let nextSuperiorTierFreeGift = parseFloat(validFreeGiftTiers[i].freeGiftProduct[0].variants[0].price)
                            let nextSuperiorTierFreeGift = validFreeGiftTiers[i].freeGiftProduct[0];
                            let nextSuperiorTierFreeGiftPrice = 0;

                            if(nextSuperiorTierFreeGift){
                                for (let k = 0; k < nextSuperiorTierFreeGift.variants.length; k++) {
                                    let variant = nextSuperiorTierFreeGift.variants[k];
                                    let currentVariantId = variant.variantId;

                                    let currentVariantData = gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds[currentVariantId];
                                    if(currentVariantData && currentVariantData.available == true){
                                        nextSuperiorTierFreeGiftPrice = parseFloat(variant.price);
                                        break;
                                    }
                                }
                            }

                            // let currentSuperiorTierFreeGift =  gfg.gfgFreeGift.state.superiorTier?.freeGiftProduct[0]?.variants[0]?.price || 0;
                            let currentSuperiorTierFreeGift = gfg.gfgFreeGift.state.superiorTier.freeGiftProduct[0];
                            let currentSuperiorTierFreeGiftPrice = 0;

                            if(currentSuperiorTierFreeGift){
                                for (let k = 0; k < currentSuperiorTierFreeGift.variants.length; k++) {
                                    let variant = currentSuperiorTierFreeGift.variants[k];
                                    let currentVariantId = variant.variantId;

                                    let currentVariantData = gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds[currentVariantId];
                                    if(currentVariantData && currentVariantData.available == true){
                                        currentSuperiorTierFreeGiftPrice = parseFloat(variant.price);
                                        break;
                                    }
                                }
                            }

                            let superiorTierFreeGift = parseFloat(currentSuperiorTierFreeGiftPrice)
                            if(nextSuperiorTierFreeGiftPrice > superiorTierFreeGift){
                                gfg.gfgFreeGift.state.superiorTier = validFreeGiftTiers[i]
                         }
                      }
                    }
                }
                gfg.utility.debugConsole("validFreeGiftTiers")
            },
            gfgRemoveAllFreeGiftProductsExceptGiven: async function(freeGiftsFromCart, superiortierFreeGiftVariantId){
                if(freeGiftsFromCart.length == 0){
                    return
                }
                let freeGiftProductVariantDataArray = []
                for(let i=0; i< freeGiftsFromCart.length; i++){
                    if(superiortierFreeGiftVariantId && superiortierFreeGiftVariantId == freeGiftsFromCart[i].variant_id){
                        continue
                    }else{
                        freeGiftProductVariantDataArray.push([String(freeGiftsFromCart[i].key)])
                    }
                    
                }
    
                if(freeGiftProductVariantDataArray.length > 0){
                    let freeGiftProductVariantDataObj = {}
                    //freeGiftProductVariantDataArray convert to object
                    for(let i=0; i< freeGiftProductVariantDataArray.length; i++){
                        let key = freeGiftProductVariantDataArray[i]
                        freeGiftProductVariantDataObj[key] = 0
                    }
    
                    let cartUpdateStatus =  await gfg.utility.updateCart({ updates: freeGiftProductVariantDataObj})
                    if(cartUpdateStatus){
                        // gfg.state.cartData = await  gfg.gfgFreeGift.utility.getCart();
                        gfg.state.gfgFreeGiftCartData = await  gfg.gfgFreeGift.utility.getCart();
                        gfg.gfgFreeGift.state.isCartUpdatedByUs = true
                        return true
    
                    }else{
                        return false
                    }
                  
                }
    
    
            },
            sortFreeGiftByVariantPrice: function(allFreeGiftsArray) {
                const n = allFreeGiftsArray.length;
                for (let i = 0; i < n - 1; i++) {
                    let swapped = false;
    
                    for (let j = 0; j < n - i - 1; j++) {
                    let variantsExist_i = allFreeGiftsArray[i].freeGiftProduct[0] &&  allFreeGiftsArray[i].freeGiftProduct[0].variants && allFreeGiftsArray[i].freeGiftProduct[0].variants.length > 0;
                    let variantsExist_j = allFreeGiftsArray[j].freeGiftProduct[0] &&  allFreeGiftsArray[j].freeGiftProduct[0].variants && allFreeGiftsArray[j].freeGiftProduct[0].variants.length > 0;
                    if(variantsExist_i && variantsExist_j ){
                        const priceA = allFreeGiftsArray[j].freeGiftProduct[0].variants[0].price;
                        const priceB = allFreeGiftsArray[j + 1].freeGiftProduct[0].variants[0].price;
        
                            if (priceA < priceB) {
                                const temp = allFreeGiftsArray[j];
                                allFreeGiftsArray[j] = allFreeGiftsArray[j + 1];
                                allFreeGiftsArray[j + 1] = temp;
                                swapped = true;
                            }
                        }
                    }
    
                        if (!swapped) {
                            break;
                    }
                }
            },
            checkIfValidFreeGiftIsThereInCart: function(freeGiftsFromCart, validFreeGiftTiers){
                // if free gift variant 
                let validFreeGiftProductVariantIds = []
                for(let i=0; i< validFreeGiftTiers.length; i++){
                    let freeGiftProductVariantData = gfg.gfgFreeGift.f.getFreeGiftProductVariantsDataId(validFreeGiftTiers[i].freeGiftProduct);
                    //expand freeGiftProductVariantData and push to validFreeGiftProductVariantIds
                    for(let j=0; j< freeGiftProductVariantData.length; j++){
                        freeGiftProductVariantData[j] = parseInt(freeGiftProductVariantData[j]);
                        validFreeGiftProductVariantIds.push(freeGiftProductVariantData[j])
                    }
                }
    
                //check if atleast one valid free gift is there in cart
                let isThereValidFreeGiftInCart = false
                for(let i=0; i< freeGiftsFromCart.length; i++){
                    let cartItem = freeGiftsFromCart[i]
                    if(cartItem && cartItem.properties && cartItem.properties["_free_product"] && validFreeGiftProductVariantIds.includes(cartItem.variant_id)){
                        isThereValidFreeGiftInCart = true
                    }
                }
                return isThereValidFreeGiftInCart
            },
            getFreeGiftProductVariantsDataId: (freeGiftProducts)=>{
                let allProductVariantIds = [];
                for(let i=0; i<freeGiftProducts.length; i++){
                    let freeGiftProduct = freeGiftProducts[i];
                    let freeGiftProductVariantData = freeGiftProduct.variants.map((variant)=>{
                        allProductVariantIds.push(variant.variantId);
                    })
                }
                return allProductVariantIds;
            },
            checkIfSuperiorTierFreeGiftAlreadyInCart: function(freeGiftsFromCart, superiortierFreeGiftVariantId){
                let isSuperiorTierFreeGiftAlreadyInCart = false
                for(let i=0; i< freeGiftsFromCart.length; i++){
                    let cartItem = freeGiftsFromCart[i]
                    if(cartItem && cartItem.properties && cartItem.properties["_free_product"] && cartItem.variant_id == superiortierFreeGiftVariantId){
                        isSuperiorTierFreeGiftAlreadyInCart = true
                    }
                }
                return isSuperiorTierFreeGiftAlreadyInCart
            },
            gfgFindAllFreeGiftsFromCart: function(cartData){
                let freeGiftsFromCart = [];
                for(let i=0; i< cartData.items.length; i++){
                    let cartItem = cartData.items[i];
                    if(cartItem && cartItem.properties && cartItem.properties["_free_product"]){
                        freeGiftsFromCart.push(cartItem);
                    }
                }
                return freeGiftsFromCart;
            },
            freeGiftsToBeRemovedFromCart: function(inValidFreeGiftTiers){
                try {
    
                    // inValidGiftTiers have an array and then freeGiftProduct
                    // freeGiftProduct have an array and then variants // get the productId from there
                    gfg.utility.debugConsole("inValidFreeGiftTiers", inValidFreeGiftTiers)
                    let cartData = JSON.parse(JSON.stringify(gfg.state.freeGiftsCartData));
                    let freeGiftsProductDataBeRemovedFromCart = []
                    for(let i=0; i < inValidFreeGiftTiers.length; i++){
                        let freeGiftProduct = inValidFreeGiftTiers[i].freeGiftProduct;
                        for(let j=0; j< freeGiftProduct.length; j++){
                            freeGiftsProductDataBeRemovedFromCart.push(freeGiftProduct[j]);
                        }
                    }
    
                    let freeGiftsToBeRemovedFromCart = []
    
                    for(let i=0; i< freeGiftsProductDataBeRemovedFromCart.length; i++){
                        // use cartData
                        let freeGiftProduct = freeGiftsProductDataBeRemovedFromCart[i];
                        let freeGiftProductVariantData = freeGiftProduct.variants.map((variant)=>{
                            let variant_id = variant.variantId;
                            let variantDataInCart = gfg.state.freeGiftsCartDataMap_variantId[variant_id];
                            if(variantDataInCart && Object.keys(variantDataInCart).length > 0){
                                freeGiftsToBeRemovedFromCart.push(variantDataInCart);
                            }
                        })
                    }
                    
                    // return freeGiftsToBeRemovedFromCart/
    
                    // search the data in gfg.state.freeGiftsCartDataMap_productId
                    // if found then add to freeGiftsToBeRemovedFromCart
                    // if(freeGiftsToBeRemovedFromCart.length > 0){
                    //     // lets check if any of the variant is already in cart
                    //     let freeGiftsToBeRemovedFromCart_variantIds = []
                    //     for(let i=0; i< freeGiftsToBeRemovedFromCart.length; i++){
                    //         let freeGiftProduct = freeGiftsToBeRemovedFromCart[i];
                    //         let freeGiftProductVariantData = freeGiftProduct.variants.map((variant)=>{
                    //             freeGiftsToBeRemovedFromCart_variantIds.push(variant.id);
                    //         })
                    //     }
    
                    //     let freeGiftsToBeRemovedFromCart_variantIds_unique = [...new Set(freeGiftsToBeRemovedFromCart_variantIds)];
    
                    //     // nowcheck in gfg.state.freeGiftsCartDataMap_variantId
                    //     for(let i=0; i< freeGiftsToBeRemovedFromCart_variantIds_unique.length; i++){
                    //         let variantId = freeGiftsToBeRemovedFromCart_variantIds_unique[i];
                    //         let freeGiftProductData = gfg.state.freeGiftsCartDataMap_variantId[variantId];
                    //         if(freeGiftProductData){
                    //             freeGiftsIdsToBeRemovedFromCart[variant_id] = variantId;
                    //             freeGiftsToBeRemovedFromCart.push(freeGiftProductData);
                    //         }
                    //     }
                    // }
    
    
                    return freeGiftsToBeRemovedFromCart;
    
                } catch (error) {
                    gfg.utility.debugError("freeGiftsToBeRemovedFromCart", error)
                }
            },
            gfgFreeGiftAllOfferStatus: function(){
                let rulesList = gfg.settings.freeGifts[0].rulesList;
                let validFreeGiftTiers = [];
                let inValidFreeGiftTiers = [];
    
                for(let i=0; i < rulesList.length ; i++){
                    let ruleListItem = rulesList[i]
    
                    // const freeGiftProductVariantData = gfg.gfgFreeGift.f.getFreeGiftProductVariantsData(ruleListItem.freeGiftProduct);
                    // ruleListItem.freeGiftsVariantsArr = freeGiftProductVariantData;
    
                  
                    let checkifFreeGiftConditionIsMetCnt = gfg.gfgFreeGift.f.checkifFreeGiftConditionIsMet(ruleListItem, gfg.state.gfgFreeGiftCartData, i);
    
                    if (checkifFreeGiftConditionIsMetCnt) {
                        validFreeGiftTiers.push(ruleListItem);
    
                    }else{
                        inValidFreeGiftTiers.push(ruleListItem)
                    }
                }
                gfg.gfgFreeGift.state.validFreeGiftTiers = validFreeGiftTiers;
                gfg.gfgFreeGift.state.inValidFreeGiftTiers = inValidFreeGiftTiers;
    
                // gfg.gfgFreeGift.f.sortFreeGiftByVariantPrice(rulesList)
    
                gfg.gfgFreeGift.state.AllFreeGiftTiers  = rulesList;
                return {
                    validFreeGiftTiers,
                    inValidFreeGiftTiers,
                    AllFreeGiftTiers: rulesList
                }
    
            },
            gfgFreeGiftGetValidTierProductIds: function (validFreeGiftTiers){
                const productIds = [];
                for (const tier of validFreeGiftTiers) {
                  for (const product of tier.freeGiftProduct) {
                    productIds.push(product.productId);
                  }
                }
                return productIds;
            },
            gfgFreeGiftPrepareParentUI: async function(validFreeGiftTiers, inValidFreeGiftTiers, configData){
                let isAccordion = gfg.gfgFreeGift.state.isAccordion
                let gfgFreeGiftMsgParentContainerForDropDown = gfg.$("<div>").addClass('gfgFreeGiftMsgParentContainerForDropDown')
    
                let gfgFreeGiftMsgContainerForAccordion = gfg.$("<div>").addClass('gfgFreeGiftMsgContainerForAccordion')
    
                let gfgFreeGiftOptionsContainerDiv = gfg.$("<div>").addClass("gfgFreeGiftOptionsContainerDiv")
    
                let gfgFreeGiftSelectDiv = gfg.$("<div>").addClass('gfgFreeGiftSelectDiv');
    
    
                if(isAccordion || (gfg.gfgFreeGift.state.prepareUIState == "CONDITION_FULFILLED")){
                    let gfgFreeGiftMsgIcon = gfg.$("<div>").addClass('gfgFreeGiftMsgIcon')
                    let gfgFreeGiftMsgIconImageElement = gfg.$("<img>").attr("src", configData.icon).attr("alt", "icon").addClass('gfgFreeGiftMsgIconImageElement')
                    gfgFreeGiftMsgIcon.append(gfgFreeGiftMsgIconImageElement);
    
                    let gfgFreeGiftMsgTextContainer = gfg.$("<div>").addClass('gfgFreeGiftMsgTextContainer')
                    let gfgFreeGiftMsgTitle = gfg.$("<div>").addClass('gfgFreeGiftMsgTitle').html(configData.title).css("font-weight", "700").css("font-size", "14px")
                    let gfgFreeGiftDropDownButton = gfg.$("<div>").addClass("gfgFreeGiftDropDownButton")
                    let gfgFreeGiftDropDownButtonImageEle = gfg.$("<img>").addClass("gfgFreeGiftDropDownButtonImageEle").attr("src", 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(CONSTANT_ARROW_SVG_APP7EXT));
    
                    gfgFreeGiftDropDownButton.append(gfgFreeGiftDropDownButtonImageEle);
    
                    gfgFreeGiftMsgTextContainer.append(gfgFreeGiftMsgTitle);
    
                    gfgFreeGiftSelectDiv.append(gfgFreeGiftMsgIcon);
                    gfgFreeGiftSelectDiv.append(gfgFreeGiftMsgTextContainer);
                    if(isAccordion){
                        gfgFreeGiftSelectDiv.append(gfgFreeGiftDropDownButton);
                    }
                    if(isAccordion === false && gfg.gfgFreeGift.state.prepareUIState == "CONDITION_FULFILLED"){
                        // gfgFreeGiftSelectDivExpanded.css("border", "1px solid black")
                    }
    
                }else{
                    validFreeGiftTiers = JSON.parse(JSON.stringify(validFreeGiftTiers))
                    gfgFreeGiftSelectDiv = await gfg.gfgFreeGift.f.gfgFreeGiftSingleOfferPrepareUI(validFreeGiftTiers, configData)
                }

                const checkIfSingleOffer = (isAccordion || (gfg.gfgFreeGift.state.prepareUIState == "CONDITION_FULFILLED")) ? false : true;
                const htmlElementsToSendObj = {
                    "gfgFreeGiftOptionsContainerDiv": gfgFreeGiftOptionsContainerDiv,
                    "gfgFreeGiftSingleOffer": checkIfSingleOffer ? gfgFreeGiftSelectDiv : undefined,
                    "gfgFreeGiftSelectDiv": checkIfSingleOffer ? undefined : gfgFreeGiftSelectDiv,
                }
                gfg.gfgFreeGift.f.handleCustomCssForWidget(htmlElementsToSendObj);

                return {
                    gfgFreeGiftMsgParentContainerForDropDown,
                    gfgFreeGiftMsgContainerForAccordion,
                    gfgFreeGiftOptionsContainerDiv,
                    gfgFreeGiftSelectDiv
                }
            },
    
            gfgFreeGiftSingleOfferPrepareUI:async  function(validFreeGiftTiers, configData){
                validFreeGiftTiers = JSON.parse(JSON.stringify(validFreeGiftTiers))
                const settings = gfg.settings.freeGifts[0];
                const allFreeGiftTiers = settings.rulesList;
                const userConfigData = settings.configuration;
                const allFreeGifts = settings.rulesList[0].freeGiftProduct;
                const allProductShopifyData = gfg.gfgFreeGift.state.freeGiftsShopifyData;
                const allProductShopifyDataByHandle = gfg.gfgFreeGift.state.freeGiftsShopifyDataByHandles;
                let freeGiftInsideCart;
                const validTierProductIds = gfg.gfgFreeGift.f.gfgFreeGiftGetValidTierProductIds(validFreeGiftTiers);
    
                const gfgSingleOffergiftContainerDiv = gfg.$("<div>").addClass("gfgSingleOffergiftContainerDiv");
                let tierLengthToBeIterated = gfg.settings.freeGifts[0].isAutoAdd ? 1 : allFreeGifts.length;
    
                for (let i = 0; i < tierLengthToBeIterated; i++) {
                    let product = allFreeGifts[i];
                    // const imagePath = product.images.length == 0 ? 
                    // `https://d1cjetlwgplgi5.cloudfront.net/public/freeGiftDymmyImage.png` : product.images[0].originalSrc;
                    
                    product["shopifyData"] = gfg.gfgFreeGift.state.freeGiftsShopifyDataByHandles[product.handle]

                    const imagePath = gfg.gfgFreeGift.utility.getFreeGiftProductModifiedBasicFieldData(product, "image");
                    product["title"] = gfg.gfgFreeGift.utility.getFreeGiftProductModifiedBasicFieldData(product, "title");


                    const isFreeGiftValid = validTierProductIds.includes(product.productId);
                    const tier = allFreeGiftTiers[0];
                    freeGiftInsideCart =  gfg.gfgFreeGift.f.gfgFreeGiftGetFreeProductInCart(tier);
                    const optionsConfigData = gfg.gfgFreeGift.f.gfgFreeGiftSetupConfigData(isFreeGiftValid, configData, 0, tier, product);
    
                    const gfgFreeGiftSingleOfferSelectDiv = gfg.$("<div>").addClass("gfgFreeGiftSingleOfferSelectDiv");
                    const gfgFreeGiftMsgIcon = gfg.$("<div>").addClass('gfgFreeGiftMsgIcon');
                    const gfgFreeGiftMsgIconImageElementOfItem = gfg.$("<img>").attr("src", imagePath).addClass('gfgFreeGiftMsgIconImageElementOfItem').attr("alt", "icon");
                    const gfgFreeGiftMsgTextContainer = gfg.$("<div>").addClass('gfgFreeGiftMsgTextContainer');
                    const gfgFreeGiftMsgTitle = gfg.$("<div>").addClass('gfgFreeGiftMsgTitle').html(optionsConfigData.title);
                    const gfgFreeGiftMsgSubTitle = gfg.$("<div>").addClass('gfgFreeGiftMsgSubTitle').append(optionsConfigData.subtitle);



                    // const variants = product.variants;

                    // use variantId and check if its stock is available
                    // if no then just simply discard the array 
                    product.variants = product.variants.filter((variant)=>{
                        if(variant.variantId){
                            let variantData = gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds[variant.variantId]
                            if(variantData && variantData.available){
                                return variant
                            }
                        }
                    })
                    
                    let variants = product.variants;
                    
                    gfgFreeGiftSingleOfferSelectDiv.attr("product-id", product.productId);
                    if(variants.length == 0){
                        product.shopifyData.available = false;
                    }

                    if(product.shopifyData && product.shopifyData.available == false){  
                        gfgFreeGiftSingleOfferSelectDiv.addClass("gfgFreeGiftOutOfStock")
                    }

                 
                    
                    let variantSelect;
                    if (!freeGiftInsideCart && isFreeGiftValid && variants.length > 1) {
                        variantSelect = gfg.$("<select>").addClass("gfgFreeGiftVariantSelect").addClass("gfgFreeGiftVariantSelect" + i);
                        variants.forEach(variant => {
                            const optionText = variant?.title || "XX";
                            const optionSelect = gfg.$("<option>").addClass("gfgFreeGiftVariantOption").val(variant?.variantId).text(optionText);
                            variantSelect.append(optionSelect);
                        });
                    }
    
                    const gfgFreeGiftClaimButton = gfg.$("<div>").addClass("gfgFreeGiftClaimButton").addClass("gfgFreeGiftClaimButton" + i);
                    gfgFreeGiftClaimButton.attr("data-rule-id", tier.ruleId);
                    gfgFreeGiftClaimButton.attr("data-product-id", product.productId);
    
    
                    let divsForMessaging = {
                        gfgFreeGiftMsgTitle,
                        gfgFreeGiftMsgSubTitle,
                    }
    
    
                    gfg.$('.gfgFreeGiftClaimButton' + i).off('click');
                    gfg.$('.gfgFreeGiftClaimButton' + i).unbind('click');
                    gfg.$(document).on("click", '.gfgFreeGiftClaimButton' + i, async function(event) {
                        // checkIfClickIsAllowed_sastaDebounce
                        // let ele = gfg.$('.gfgFreeGiftClaimButton' + i);
                        let ele = ".gfgFreeGiftClaimButton" + i;
                        if (gfg.utility.checkIfClickIsAllowed_sastaDebounce(ele)) {
                            await gfg.gfgFreeGift.f.gfgFreeGiftClaimButtonClickAction(event, product, i,validFreeGiftTiers);
                        }else{
                            console.log("ignored click")
                            return;
                        }
                       return;
                    });
                    
                    // gfgFreeGiftClaimButton.off('click');
    
                    // gfgFreeGiftClaimButton.on("click", async function(event) {
                    //     await gfg.gfgFreeGift.f.gfgFreeGiftClaimButtonClickAction(event, product, i, validFreeGiftTiers);
                    //     return;
                    // });
    
                    gfg.gfgFreeGift.f.setUpClaimButton(gfgFreeGiftClaimButton, userConfigData, isFreeGiftValid, freeGiftInsideCart, product, divsForMessaging);
                    
                    const htmlElementsToSendObj ={
                        "gfgFreeGiftMsgTitleSingleOffer": gfgFreeGiftMsgTitle,
                        "gfgFreeGiftMsgSubTitleSingleOffer": gfgFreeGiftMsgSubTitle,
                    }
                    gfg.gfgFreeGift.f.handleCustomCssForWidget(htmlElementsToSendObj)
                    
    
                    gfgFreeGiftMsgIcon.append(gfgFreeGiftMsgIconImageElementOfItem)
    
                    gfgFreeGiftMsgTextContainer.append(gfgFreeGiftMsgTitle)
                    
                    if(variantSelect == null){
                        gfgFreeGiftMsgTextContainer.append(gfgFreeGiftMsgSubTitle);
                    }else{
                        gfgFreeGiftMsgTextContainer.append(variantSelect)
                    }
    
                    gfgFreeGiftSingleOfferSelectDiv.append(gfgFreeGiftMsgIcon);
                    gfgFreeGiftSingleOfferSelectDiv.append(gfgFreeGiftMsgTextContainer);
                    gfgFreeGiftSingleOfferSelectDiv.append(gfgFreeGiftClaimButton);
    
                    
                    gfgSingleOffergiftContainerDiv.append(gfgFreeGiftSingleOfferSelectDiv);
                }
    
                    return gfgSingleOffergiftContainerDiv;
    
            },
            setUpClaimButton:function (claimButton, userConfig, isValid, productIdInsideCart, product,divsForMessaging) {
                let { gfgFreeGiftMsgTitle, gfgFreeGiftMsgSubTitle} = divsForMessaging;
                let isProductStockAvailable = product?.shopifyData ? product.shopifyData.available : true;

                // if(isProductStockAvailable == false){
                //     // add a class to to the parent of claim button
                //     claimButton.addClass("gfgFreeGiftOutOfStock")
                //     gfgFreeGiftMsgSubTitle.addClass("gfgFreeGiftOutOfStock");
                //     gfgFreeGiftMsgSubTitle.addClass("gfgFreeGiftOutOfStock");
                // }
                userConfig.addtionalFields.outOfStockSubtitle = userConfig.addtionalFields.outOfStockSubtitle ||  "Out of stock";
                let productInsideCartForThisTier =  productIdInsideCart;
                // let determinStateForButton =  gfg.gfgFreeGift.utility.getClaimButtonStatus(isValid, productIdInsideCart, product, userConfig);
    
                if(isProductStockAvailable == false){
                    // add outof stock msg subtitle
                    gfgFreeGiftMsgSubTitle.addClass("gfgFreeGiftOutOfStock").addClass("gfgFreeGiftMsgSubTitleOutOfStock");
                    gfgFreeGiftMsgSubTitle.html(userConfig.addtionalFields.outOfStockSubtitle);
                    return;
                }else{
                    gfgFreeGiftMsgSubTitle.removeClass("gfgFreeGiftOutOfStock").removeClass("gfgFreeGiftMsgSubTitleOutOfStock");
                }
                // Case when the free gift tier is not valid.
                if (!isValid) {
                    claimButton.html(userConfig.addtionalFields.claimText).addClass("gfgFreeGiftInvalidProductClaimButton");
                } 
                
                // Case when the free gift tier is valid and a gift from this tier is already in the cart.
                else if (isValid && productInsideCartForThisTier) {
                    claimButton.html(userConfig.addtionalFields.claimText).addClass("gfgFreeGiftValidProductInactiveClaimButton");
                    // Additional configurations for this state can be added here.
                } 
    
                // Case when the free gift tier is valid but a gift from this tier has not been added to the cart.
                else if (isValid && productInsideCartForThisTier == null) {
                    claimButton.html(userConfig.addtionalFields.claimText)
                            .addClass("gfgFreeGiftClaimButtonAddToCart")
                            .addClass("gfgFreeGiftReadyToClaimButton");
                    gfg.gfgFreeGift.f.handleCustomCssForWidget({"gfgFreeGiftReadyToClaimButton": claimButton})
                    gfgFreeGiftMsgSubTitle.html(userConfig?.addtionalFields?.conditionMetCartSubtitle);
                    // Additional configurations for this state can be added here.
                }
    
                // Case when the gift is already claimed and the product is in the cart.
                if (product.productId == productInsideCartForThisTier) {
                    claimButton.html(userConfig.addtionalFields.claimedText).addClass('gfgFreeGiftActiveFreeGiftClaimButton');
                    let pillContainer = gfg.gfgFreeGift.f.gfgFreeGiftCreatePill(userConfig.addtionalFields.claimedCartSubtitle, isValid);
                    gfgFreeGiftMsgSubTitle.html(pillContainer);
                    gfgFreeGiftMsgTitle = gfg.$("<div>").addClass('gfgFreeGiftMsgTitle').html(userConfig.addtionalFields.claimedCartTitle)
                    gfgFreeGiftMsgSubTitle.removeClass('gfgFreeGiftMsgSubTitleNoteTextColor');
                } 
    
                // Case when a gift is claimed for this tier but it's not the current product.
                else if (isValid && product.productId != productInsideCartForThisTier && productInsideCartForThisTier != null) {
                    gfgFreeGiftMsgSubTitle.css("display", "none");
                    console.log("Another product from this tier has already been claimed");
                    return;
                }


    
                                
                            
    
            },
            
            gfgFreeGiftContainerOverflow: function(){
                try {
                    gfg.utility.debugConsole('inside overflow')
                
                    let container = gfg.$(".gfgProductPageWrapperV2")
                    if(container.length == 0 || container.width() == 0){
                        container = gfg.$(".gfgCartPageWrapperV2")
                    }
                    // let container = gfg.$(".gfgPageWrapper");
                    let content
                    if(gfg.$(".gfgFreeGiftOptionsContainerDivExpanded").length > 0){
                        content = gfg.$(".gfgFreeGiftOptionsContainerDivExpanded")[0];
                    }else{
                        content = gfg.$(".gfgFreeGiftOptionsContainerDiv")[0]
                    }
    
                    // let contentWidth = gfg.$(".gfgFreeGiftMsgOptionRow")[0].scrollWidth
                    let contentWidth;
                    let isAccordion = gfg.gfgFreeGift.state.isAccordion;
                    if(isAccordion){
                        contentWidth = content.scrollWidth
                    }else{
                        container = gfg.$(".gfgProductPageWrapperV2")
                        // let container = gfg.$(".gfgPageWrapper");
                        if(container.length == 0 || container.width() == 0){
                            container = gfg.$(".gfgCartPageWrapperV2")
                        }

                        let containerWidth = container.width()
                      
    
                        let singleOfferDIv = gfg.$(".gfgFreeGiftSingleOfferSelectDiv").css("max-width", containerWidth).css("overflow", "auto")
                        container = gfg.$(".gfgSingleOffergiftContainerDiv")
                        contentWidth = gfg.$(".gfgFreeGiftSingleOfferSelectDiv")[0].scrollWidth
                        // let wrapper = gfg.$(".gfgCartPageWrapperV2").css("max-width", "100%").css("overflow", "auto")
                    }
    
                    let containerWidth = container.width()
                    let gfgClaimButtons = gfg.$(".gfgFreeGiftClaimButton")
    
                    gfg.utility.debugConsole(`contentWidth: ${contentWidth} , containerWidth: ${containerWidth} `)
    
                    isFull = contentWidth > containerWidth;
                    if (isFull) {
                        gfgClaimButtons.addClass('gfgFreeGiftScrollbar-visible');
                    } else {
                        gfgClaimButtons.removeClass('gfgFreeGiftScrollbar-visible');
                    }
                } catch (error) {
                    gfg.utility.debugError("gfgFreeGiftContainerOverflow", error)     
                }
            },
            gfgFreeGiftPrepareChildUI: async function(product, validFreeGiftTiers, inValidFreeGiftTiers, tierCount, tierData, configData, counter){
                    const settings = gfg.settings.freeGifts[0];
                    const AllFreeGiftTiers = settings.rulesList;
                    const allFreeGiftsShopifyData = gfg.gfgFreeGift.state.freeGiftsShopifyData;
                    const userConfigData = settings.configuration;
                    const validTierProductIds = gfg.gfgFreeGift.f.gfgFreeGiftGetValidTierProductIds(validFreeGiftTiers);
                    
                    const tier = tierData;
                    const freeGiftInsideCart = gfg.gfgFreeGift.f.gfgFreeGiftGetFreeProductInCart(tier); 

                    product["shopifyData"] = gfg.gfgFreeGift.state.freeGiftsShopifyDataByHandles[product.handle];

                    // const imagePath = product.images.length === 0 ? 
                    //     'https://d1cjetlwgplgi5.cloudfront.net/public/freeGiftDymmyImage.png' : product.images[0].originalSrc;

                    const imagePath = gfg.gfgFreeGift.utility.getFreeGiftProductModifiedBasicFieldData(product, "image");
                    product["title"] = gfg.gfgFreeGift.utility.getFreeGiftProductModifiedBasicFieldData(product, "title");
                

                    let isFreeGiftValid = validTierProductIds.includes(product.productId);
                
                    gfg.utility.debugConsole(isFreeGiftValid);
                
                    const optionsConfigData = gfg.gfgFreeGift.f.gfgFreeGiftSetupConfigData(isFreeGiftValid, configData, tierCount, tier, product);
                
                    const gfgFreeGiftMsgOptionRow = gfg.$("<div>").addClass("gfgFreeGiftMsgOptionRow").attr("rule-id-tier", tier.ruleId);

                    gfgFreeGiftMsgOptionRow.attr("product-id", product.productId);
    
                    const gfgFreeGiftMsgIconImageElementOfItem = gfg.$("<img>").attr("src", imagePath).addClass("gfgFreeGiftMsgIconImageElementOfItem").attr("alt", "icon");
    
                    const gfgFreeGiftMsgIcon = gfg.$("<div>").addClass("gfgFreeGiftMsgIcon").append(gfgFreeGiftMsgIconImageElementOfItem);
    
                    const gfgFreeGiftMsgTitle = gfg.$("<div>").addClass("gfgFreeGiftMsgTitle").html(optionsConfigData.title);
    
                    const gfgFreeGiftMsgSubTitle = gfg.$("<div>").addClass("gfgFreeGiftMsgSubTitle").html(optionsConfigData.subtitle);


                    // const variants = product.variants;

                    // use variantId and check if its stock is available
                    // if no then just simply discard the array 
                    product.variants = product.variants.filter((variant)=>{
                        if(variant.variantId){
                            let variantData = gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds[variant.variantId]
                            if(variantData && variantData.available){
                                return variant
                            }
                        }
                    })
                    
                    let variants = product.variants;
                    if (!product.shopifyData){
                        product.shopifyData = {}
                    }
                    if(variants.length == 0){
                        product.shopifyData.available = false;
                     }

                    if(product.shopifyData.available == false){
                        gfgFreeGiftMsgOptionRow.addClass("gfgFreeGiftOutOfStock")
                    };
                    

                    let variantSelect;
                    if (freeGiftInsideCart === null && isFreeGiftValid && variants.length > 1) {
                      variantSelect = gfg.$("<select>").addClass("gfgFreeGiftVariantSelect").addClass("gfgFreeGiftVariantSelect" + counter);
    
                      variants.forEach((variant) => {
                        const optionText = variant.title || "XX";
                        const optionSelect = gfg.$("<option>").addClass("gfgFreeGiftVariantOption").val(variant.variantId).text(optionText);
                        variantSelect.append(optionSelect);
                      });
                    }
    
                    const gfgFreeGiftClaimButton = gfg.$("<div>").addClass("gfgFreeGiftClaimButton").addClass("gfgFreeGiftClaimButton" + counter);
    
                    gfg.$('.gfgFreeGiftClaimButton' + counter).off('click');
    
                    gfg.$('.gfgFreeGiftClaimButton' + counter).unbind('click');
    
                    gfg.$(document).on("click", ".gfgFreeGiftClaimButton" + counter, function (event) {
                      gfg.utility.debugConsole("counter: ", counter, "   product: ", product);
                    
                        let ele = ".gfgFreeGiftClaimButton" + counter;
                        if (gfg.utility.checkIfClickIsAllowed_sastaDebounce(ele)) {
                          gfg.gfgFreeGift.f.gfgFreeGiftClaimButtonClickAction(event, product, counter, validFreeGiftTiers);
                        }else{
                            console.log("ignored click")
                        }
                    });
    
                    let divsForMessaging = {
                        gfgFreeGiftMsgTitle,
                        gfgFreeGiftMsgSubTitle,
                    }
                    gfg.gfgFreeGift.f.setUpClaimButton(gfgFreeGiftClaimButton,userConfigData, isFreeGiftValid, freeGiftInsideCart, product,divsForMessaging);

                    const htmlElementsToSendObj = {
                        "gfgFreeGiftMsgTitle": gfgFreeGiftMsgTitle,
                        "gfgFreeGiftMsgSubTitle": gfgFreeGiftMsgSubTitle,
                    }
                    gfg.gfgFreeGift.f.handleCustomCssForWidget(htmlElementsToSendObj)
    
                    const gfgFreeGiftMsgTextContainer = gfg.$("<div>").addClass("gfgFreeGiftMsgTextContainer")
                    gfgFreeGiftMsgTextContainer.append(gfgFreeGiftMsgTitle).append(variantSelect || gfgFreeGiftMsgSubTitle);
                
                    gfgFreeGiftMsgOptionRow.append(gfgFreeGiftMsgIcon, gfgFreeGiftMsgTextContainer, gfgFreeGiftClaimButton);
                
                    return gfgFreeGiftMsgOptionRow;
                
            },
            gfgFreeGiftPrepareUI: async function(validFreeGiftTiers, inValidFreeGiftTiers, AllFreeGiftTiers ){
                // let validFreeGiftTiers = validFreeGiftTiers;
                // let inValidFreeGiftTiers = inValidFreeGiftTiers;
                let configData = {}
                let userConfigData = gfg.settings.freeGifts[0].configuration
                let allProductsData = gfg.gfgFreeGift.state.freeGiftsShopifyData;
                let isAccordion = gfg.gfgFreeGift.state.isAccordion;
                
                gfg.utility.debugConsole('inside current prepare ui')
                let superiorTier = gfg.gfgFreeGift.state.superiorTier;
                // console.log(superiorTier, 'superior tier')
    
                // console.log(validFreeGiftTiers , 'valid free gift tiers')
    
                let freeGiftInsideCart = gfg.gfgFreeGift.f.gfgFreeGiftGetFreeProductInCart();
                
                if(AllFreeGiftTiers.length === 1 && AllFreeGiftTiers[0].freeGiftProduct.length === 1){
                    gfg.gfgFreeGift.state.isAccordion = false;
                    isAccordion = false
                }
                
                configData =  gfg.gfgFreeGift.f.prepareConfigData(userConfigData, freeGiftInsideCart)
                    
    
                let {
                    gfgFreeGiftMsgParentContainerForDropDown,
                    gfgFreeGiftMsgContainerForAccordion,
                    gfgFreeGiftOptionsContainerDiv,
                    gfgFreeGiftSelectDiv
    
                } = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareParentUI(validFreeGiftTiers, inValidFreeGiftTiers, configData)
    
                if(isAccordion){
                    let gfgFreeGiftPrepareChildUIArr = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareChildUIArr(AllFreeGiftTiers, configData)
                    gfgFreeGiftOptionsContainerDiv.html(gfgFreeGiftPrepareChildUIArr)
                }
                
                gfgFreeGiftMsgContainerForAccordion.append(gfgFreeGiftOptionsContainerDiv);
                gfgFreeGiftMsgParentContainerForDropDown.append(gfgFreeGiftMsgContainerForAccordion)
                gfgFreeGiftMsgParentContainerForDropDown.append(gfgFreeGiftSelectDiv)
                
                return gfgFreeGiftMsgParentContainerForDropDown;
    
            },
            gfgFreeGiftPrepareChildUIArr: async function(AllFreeGiftTiers, configData){
                let gfgFreeGiftPrepareChildUIArr = []
                let counter = 0
                for (let i = 0; i < AllFreeGiftTiers.length ; i++) {
                    let tier = AllFreeGiftTiers[i];
                    let isAutoAdd = gfg.settings.freeGifts[0].isAutoAdd
                    let freeGiftProductArray = tier.freeGiftProduct;
                    let tierLengthToBeIterated = 1;
                    if(!isAutoAdd){
                        tierLengthToBeIterated = freeGiftProductArray.length
                    }
    
                    for(let k=0; k < tierLengthToBeIterated; k++){
                        let product = freeGiftProductArray[k];
                        
                        let gfgFreeGiftMsgOptionRow = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareChildUI(product, gfg.gfgFreeGift.state.validFreeGiftTiers, gfg.gfgFreeGift.state.inValidFreeGiftTiers, i, tier, configData, counter);
    
                        // gfgFreeGiftMsgOptionRow
                        gfgFreeGiftPrepareChildUIArr.push(gfgFreeGiftMsgOptionRow);
                        counter++;
                    }
                      
                }
                return gfgFreeGiftPrepareChildUIArr
            },
            gfgFreeGiftCreatePill: function(title, isFreeGiftValid){
                let color;
                if(isFreeGiftValid == true){
                    color = '#90EE90'
                }else{
                    color = '#75ffff'
                }
                gfg.utility.debugConsole(title)
                let pillContainer = gfg.$('<div>').addClass('gfgFreeGiftPill-container');
                
                let pillSegment = gfg.$('<div>').addClass('gfgFreeGiftPill-segment')
                pillContainer.append(pillSegment);
                
                let pillCenter = gfg.$('<div>').addClass('gfgFreeGiftPill-segment').css("background-color", color).html(title)
                pillContainer.append(pillCenter);
    
                pillSegment = gfg.$('<div>').addClass('gfgFreeGiftPill-segment')
                pillContainer.append(pillSegment);
    
                return pillContainer;
            },
            gfgFreeGiftSetupConfigData: function(isFreeGiftValid, configData, iterator, tier, product){
                let optionsConfigData = {};
                let tierConfigs = gfg.settings.freeGifts[0].configuration.tierConfig[iterator];
                let userConfigData = gfg.settings.freeGifts[0].configuration
                let shopName = window.Shopify.shop
                    if(tier.ruleType == "BUY_PRODUCT_X"){
                        let FREE_GIFT_PRODUCT = product?.title || "XX";
                        let PRODUCT_QUANTITY = tier?.minProducts ||  "XX";    
                        // let PRODUCT = tier?.productList[0].title || "XX"; // [1].productList[0].title
                        // let PRODUCT_HANDLE = tier?.productList[0].handle || "XX"; // [1].productList[0].title
                        let PRODUCT_LIST_TITLE = [];
                        let PRODUCT_LIST_HANDLE = [];
                        let PRODUCT_LIST = tier?.productList || [];
                        if(PRODUCT_LIST.length > 0){
                            PRODUCT_LIST.forEach((product,index)=>{

                                // after 4th product add ellipsis
                                if(index > 3){
                                    PRODUCT_LIST_TITLE.push("...");
                                    return;
                                }
                                
                                PRODUCT_LIST_TITLE.push(product.title)
                                PRODUCT_LIST_HANDLE.push(product.handle)
                            })
                        }
                        let PRODUCT = PRODUCT_LIST_TITLE.join(", ");
                        if(PRODUCT_LIST.length > 1){
                            // add "(" and ")" to the product list
                            PRODUCT = "(" + PRODUCT + ")"
                            // PRODUCT = PRODUCT_LIST_TITLE.join(", ");
                        }
                        let PRODUCT_HANDLE = PRODUCT_LIST_HANDLE.join(", "); 
                        let CURRENT_QTY_BUY_PRODUCT_X = gfg.gfgFreeGift.f.gfgFreeGiftFindInArray(iterator, gfg.gfgFreeGift.state.CURRENT_QTY_BUY_PRODUCT_X)
                        let REMAINING_QUANTITY = parseInt(PRODUCT_QUANTITY) - CURRENT_QTY_BUY_PRODUCT_X
                        // optionsConfigData.title = optionsConfigData.title.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);
                        // optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);
                        let tierConfigStringified = JSON.stringify(tierConfigs.conditionNotMet);
    
                        optionsConfigData = JSON.parse(tierConfigStringified);
                        optionsConfigData.title = optionsConfigData.title.replace("{{PRODUCT_QUANTITY}}", PRODUCT_QUANTITY);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{PRODUCT_QUANTITY}}", PRODUCT_QUANTITY);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{PRODUCT}}", PRODUCT);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{PRODUCT}}", PRODUCT);
    
                        // optionsConfigData.title = optionsConfigData.title.replace("{{PRODUCT_LINK}}", `<a href="/products/${PRODUCT_HANDLE}" target="_blank">${PRODUCT}</a>`);
                        //  if PRODUCT_LIST_HANDLE is more than one then add a link to all products 
                        let prepareaAnchorTags = ""
                        if(PRODUCT_LIST_HANDLE.length > 1){
                            PRODUCT_LIST_HANDLE.forEach((handle, index)=>{
                                // add a small space between each product
                                if(index > 0){
                                    prepareaAnchorTags += ", "
                                }
                                prepareaAnchorTags += `<a href="/products/${handle}" target="_blank">${PRODUCT_LIST_TITLE[index]}</a>`
                            })
                        }else{
                            prepareaAnchorTags = `<a href="/products/${PRODUCT_HANDLE}" target="_blank">${PRODUCT}</a>`
                        }
                        optionsConfigData.title = optionsConfigData.title.replace("{{PRODUCT_LINK}}", prepareaAnchorTags);
                        // optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{PRODUCT_LINK}}", `<a href="/products/${PRODUCT_HANDLE}" target="_blank">${PRODUCT}</a>`);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{PRODUCT_LINK}}", prepareaAnchorTags);
                        optionsConfigData.title = optionsConfigData.title.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);
    
                        // remaining qty
                        optionsConfigData.title = optionsConfigData.title.replace("{{REMAINING_QUANTITY}}", REMAINING_QUANTITY);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{REMAINING_QUANTITY}}", REMAINING_QUANTITY);

                        optionsConfigData.title = optionsConfigData.title.replace(
                            "{{FREE_GIFT_PRODUCT_LINK}}", 
                            gfg.gfgFreeGift.utility.prepareTextInAnchorTag('PRODUCT_PAGE_HANDLE', FREE_GIFT_PRODUCT, product?.handle)
                            )
    
                        optionsConfigData.icon = optionsConfigData.icon
                    }
    
                    if(tier.ruleType == "SPEND_X"){
                        let FREE_GIFT_PRODUCT = product?.title || "XX";
                        let minAmount = tier?.minimumCartValue || "0"
                        minAmount = parseFloat(minAmount)
                        let minAmountUserCurrency = gfg.utility.convertFromStoreCurrencyToCustomer(minAmount)
                        // let REMAINING_AMOUNT = minAmountUserCurrency - (gfg.state.gfgFreeGiftCartData.items_subtotal_price/100) || '-1';
                        let REMAINING_AMOUNT = minAmountUserCurrency - (gfg.state.gfgFreeGiftCartData.total_price/100) || '-1';


                        let CURRENCY = gfg.utility.getCurrencySymbol() || "$";
                        REMAINING_AMOUNT = parseFloat(REMAINING_AMOUNT).toFixed(2)
                        let tierConfigStringified = JSON.stringify(tierConfigs.conditionNotMet);
    
                        optionsConfigData = JSON.parse(tierConfigStringified);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{REMAINING_AMOUNT}}", REMAINING_AMOUNT);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{REMAINING_AMOUNT}}", REMAINING_AMOUNT);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{CURRENCY}}", CURRENCY);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{CURRENCY}}", CURRENCY);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);

                        optionsConfigData.title = optionsConfigData.title.replace(
                            "{{FREE_GIFT_PRODUCT_LINK}}", 
                            gfg.gfgFreeGift.utility.prepareTextInAnchorTag('PRODUCT_PAGE_HANDLE', FREE_GIFT_PRODUCT, product?.handle)
                            )
    
                        optionsConfigData.icon = optionsConfigData.icon
                    }
    
                    if(tier.ruleType == "SPEND_X_IN_COLLECTION_Y"){
                        let FREE_GIFT_PRODUCT = product?.title || "XX";
                        let minAmount = tier?.minimumCartValue || "0"
                        minAmount = parseFloat(minAmount)
                        let minAmountUserCurrency = gfg.utility.convertFromStoreCurrencyToCustomer(minAmount)
                        minAmountUserCurrency = parseFloat(minAmountUserCurrency)
                        let REMAINING_AMOUNT_FROM_COLLECTION = gfg.gfgFreeGift.f.gfgFreeGiftFindInArray(iterator, gfg.gfgFreeGift.state.CURRENT_TOTAL_FOR_SPEND_X_IN_COLLECTION_Y)
                        let REMAINING_AMOUNT = minAmountUserCurrency - REMAINING_AMOUNT_FROM_COLLECTION;
                        REMAINING_AMOUNT = parseFloat(REMAINING_AMOUNT).toFixed(2)
                        let CURRENCY = gfg.utility.getCurrencySymbol() || "$";
    
                        let COLLECTION_LIST_TITLE = [];
                        let COLLECTION_LIST_HANDLE = [];
                        let COLLECTION_LIST = tier?.collection || [];
                        if (COLLECTION_LIST.length > 0) {
                            COLLECTION_LIST.forEach((collection,index) => {


                                // after 4th product add ellipsis
                                if(index > 3){
                                    COLLECTION_LIST_TITLE.push("...");
                                    return;
                                }

                                COLLECTION_LIST_TITLE.push(collection.title);
                                COLLECTION_LIST_HANDLE.push(collection.handle);
                            });
                        }
                        let COLLECTION = COLLECTION_LIST_TITLE.join(", ");
                        if (COLLECTION_LIST.length > 1) {
                            COLLECTION = "(" + COLLECTION + ")";
                        }
                        let COLLECTION_HANDLE = COLLECTION_LIST_HANDLE.join(", ");
                    
                        let tierConfigStringified = JSON.stringify(tierConfigs.conditionNotMet);
    
                        optionsConfigData = JSON.parse(tierConfigStringified);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{REMAINING_AMOUNT}}", REMAINING_AMOUNT);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{REMAINING_AMOUNT}}", REMAINING_AMOUNT);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{CURRENCY}}", CURRENCY);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{CURRENCY}}", CURRENCY);
    
                        // optionsConfigData.title = optionsConfigData.title.replace("{{COLLECTION}}", COLLECTION);
                        // optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{COLLECTION}}", COLLECTION);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{COLLECTION}}", COLLECTION);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{COLLECTION}}", COLLECTION);
                    
                        let prepareaAnchorTagsForCollections = "";
                        if (COLLECTION_LIST_HANDLE.length > 1) {
                            COLLECTION_LIST_HANDLE.forEach((handle, index) => {
                                debugger
                                if (index > 0) {
                                    prepareaAnchorTagsForCollections += ", ";
                                }
                                prepareaAnchorTagsForCollections += `<a href="/collections/${handle}" target="_blank">${COLLECTION_LIST_TITLE[index]}</a>`;
                            });
                        } else {
                            prepareaAnchorTagsForCollections = `<a href="/collections/${COLLECTION_HANDLE}" target="_blank">${COLLECTION}</a>`;
                        }
                    
                        // optionsConfigData.title = optionsConfigData.title.replace("{{COLLECTION_LINK}}", `<a href="/collections/${COLLECTION_HANDLE}" target="_blank">${COLLECTION}</a>`);
                        // optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{COLLECTION_LINK}}", `<a href="/collections/${COLLECTION_HANDLE}" target="_blank">${COLLECTION}</a>`);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{COLLECTION_LINK}}", prepareaAnchorTagsForCollections);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{COLLECTION_LINK}}", prepareaAnchorTagsForCollections);

                        optionsConfigData.title = optionsConfigData.title.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);

                        optionsConfigData.title = optionsConfigData.title.replace(
                            "{{FREE_GIFT_PRODUCT_LINK}}", 
                            gfg.gfgFreeGift.utility.prepareTextInAnchorTag('PRODUCT_PAGE_HANDLE', FREE_GIFT_PRODUCT, product?.handle)
                            )
    
                        optionsConfigData.icon = optionsConfigData.icon
                    }
    
                    if(tier.ruleType == "BUY_ANY_PRODUCT_FROM_COLLECTION_Y"){
                        // let COLLECTION = tier?.collection[0].title || "XX";
                        // let COLLECTION_HANDLE = tier?.collection[0].handle || "XX";
                        let FREE_GIFT_PRODUCT = product?.title || "XX";
                        let PRODUCT_QUANTITY = tier?.minProducts ||  "XX";
                        let CURRENT_QTY_BUY_ANY_PRODUCT_FROM_COLLECTION_Y = gfg.gfgFreeGift.f.gfgFreeGiftFindInArray(iterator, gfg.gfgFreeGift.state.CURRENT_QTY_BUY_ANY_PRODUCT_FROM_COLLECTION_Y)
                        let REMAINING_QUANTITY = parseInt(PRODUCT_QUANTITY) - CURRENT_QTY_BUY_ANY_PRODUCT_FROM_COLLECTION_Y
    
                        let tierConfigStringified = JSON.stringify(tierConfigs.conditionNotMet);
    
                        let COLLECTION_LIST_TITLE = [];
                        let COLLECTION_LIST_HANDLE = [];
                        let COLLECTION_LIST = tier?.collection || [];
                        if (COLLECTION_LIST.length > 0) {
                            COLLECTION_LIST.forEach((collection,index) => {

                                // after 4th product add ellipsis
                                if(index > 3){
                                    COLLECTION_LIST_TITLE.push("...");
                                    return;
                                }

                                COLLECTION_LIST_TITLE.push(collection.title);
                                COLLECTION_LIST_HANDLE.push(collection.handle);
                            });
                        }
                        let COLLECTION = COLLECTION_LIST_TITLE.join(", ");
                        if (COLLECTION_LIST.length > 1) {
                            COLLECTION = "(" + COLLECTION + ")";
                        }
                        let COLLECTION_HANDLE = COLLECTION_LIST_HANDLE.join(", ");





                        optionsConfigData = JSON.parse(tierConfigStringified);
    
                        // optionsConfigData.title = optionsConfigData.title.replace("{{PRODUCT}}", PRODUCT);
                        // optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{PRODUCT}}", PRODUCT);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{FREE_GIFT_PRODUCT}}", FREE_GIFT_PRODUCT);

                        optionsConfigData.title = optionsConfigData.title.replace(
                            "{{FREE_GIFT_PRODUCT_LINK}}", 
                            gfg.gfgFreeGift.utility.prepareTextInAnchorTag('PRODUCT_PAGE_HANDLE', FREE_GIFT_PRODUCT, product?.handle)
                            )
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{COLLECTION}}", COLLECTION);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{COLLECTION}}", COLLECTION);
                    
                        let prepareaAnchorTagsForCollections = "";
                        if (COLLECTION_LIST_HANDLE.length > 1) {
                            COLLECTION_LIST_HANDLE.forEach((handle, index) => {
                                
                                if (index > 0) {
                                    prepareaAnchorTagsForCollections += ", ";
                                }
                                prepareaAnchorTagsForCollections += `<a href="/collections/${handle}" target="_blank">${COLLECTION_LIST_TITLE[index]}</a>`;
                            });
                        } else {
                            prepareaAnchorTagsForCollections = `<a href="/collections/${COLLECTION_HANDLE}" target="_blank">${COLLECTION}</a>`;
                        }


                        optionsConfigData.title = optionsConfigData.title.replace("{{COLLECTION_LINK}}", prepareaAnchorTagsForCollections);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{COLLECTION_LINK}}", prepareaAnchorTagsForCollections);

                    

                        // optionsConfigData.title = optionsConfigData.title.replace("{{COLLECTION}}", COLLECTION);
                        // optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{COLLECTION}}", COLLECTION);
    
                        // optionsConfigData.title = optionsConfigData.title.replace("{{COLLECTION_LINK}}", `<a href="/collections/${COLLECTION_HANDLE}" target="_blank">${COLLECTION}</a>`);
                        // optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{COLLECTION_LINK}}", `<a href="/collections/${COLLECTION_HANDLE}" target="_blank">${COLLECTION}</a>`);
    
                        optionsConfigData.title = optionsConfigData.title.replace("{{REMAINING_QUANTITY}}", REMAINING_QUANTITY);
                        optionsConfigData.subtitle = optionsConfigData.subtitle.replace("{{REMAINING_QUANTITY}}", REMAINING_QUANTITY);
    
                        optionsConfigData.icon = optionsConfigData.icon
                    }
    
                    if(isFreeGiftValid == true){
                        // optionsConfigData.subtitle = "Condition success";
                        userConfigData = gfg.settings.freeGifts[0].configuration.addtionalFields
                        // optionsConfigData.title = userConfigData.claimedCartTitle
    
                    }else{
                        // optionsConfigData.title = userConfigData.addtionalFields.conditionNotMetText
    
                    }
                    // console.log(optionsConfigData)
    
                return optionsConfigData
            },
            gfgFreeGiftCreateMessageToast: function(event){
                let userConfigData = gfg.settings.freeGifts[0].configuration
                
                gfg.$('.gfgFreeGiftToast').remove();
                
                let message = userConfigData.addtionalFields.alreadyClaimedText
                let toast = gfg.$('<div>').addClass('gfgFreeGiftToast').text(message);
                let parentElement = gfg.$(event.currentTarget).parent();
                // Append the toast to the document body gfg.$(event.currentTarget)
                parentElement.append(toast);
              
                // Set a timeout to remove the toast after 5 seconds
                setTimeout(function() {
                  toast.remove();
                }, 5000);
            },
            gfgFreeGiftGetFreeProductInCart: function(ruleData){
                let productId = null;
                let items = gfg.state.gfgFreeGiftCartData.items
                if(!gfg.settings.freeGifts[0].isMultipleFreeGiftAllowed){
                    for (const item of items) {
                      if (item.properties && item.properties._free_product == "true") {
                        productId = item.product_id;
                        break;
                      }
                    }
                }else if(gfg.settings.freeGifts[0].isMultipleFreeGiftAllowed && ruleData){
                    productId = gfg.gfgFreeGift.utility.getProductIdFromRuleId(ruleData.ruleId)
                }
    
                return productId;
            },
            checkifFreeGiftConditionIsMet: function (ruleData, cartData, iterator) {
                if(ruleData.ruleType == "BUY_PRODUCT_X"){
                    let validProductList = []
                    ruleData.productList.forEach(product => {
                        validProductList.push(product.productId)
                    })
                    //check if condition is true 
                    let returnQty = 0

                    for(let i = 0; i < cartData.items.length; i++){
                        let cartItem = cartData.items[i]
                        if(cartItem && cartItem.properties && cartItem.properties["_free_product"]){
                            continue
                        }
                        // gfg.gfgFreeGift.state.CURRENT_QTY_BUY_PRODUCT_X = cartItem.quantity
                        // gfg.gfgFreeGift.f.gfgFreeGiftFindAndUpdateInArray(i, cartItem.quantity, gfg.gfgFreeGift.state.CURRENT_QTY_BUY_PRODUCT_X)
                        // if(validProductList.indexOf((""+cartItem.product_id)) >= 0 && cartItem.quantity >= ruleData.minProducts){
                        if(validProductList.indexOf((""+cartItem.product_id)) >= 0 ){
                            // return parseInt(cartItem.quantity / ruleData.minProducts)
                            returnQty += parseInt(cartItem.quantity)
                        }
                    
                    }

                    if(returnQty >= ruleData.minProducts){
                        return parseInt(returnQty / ruleData.minProducts)
                    }else{
                        return 0
                    }
                    
                }
                else if(ruleData.ruleType == "BUY_ANY_PRODUCT_FROM_COLLECTION_Y"){
                    let validCollectionList = []
                    ruleData.collectionsData.forEach(collection => {
                        validCollectionList.push(collection)
                    })
                    let returnQty = 0
                    //check if condition is true 
                    for(let i = 0; i < cartData.items.length; i++){
                        let cartItem = cartData.items[i]
                        if(cartItem && cartItem.properties && cartItem.properties["_free_product"]){
                            continue
                        }
                        if(gfg.f.checkIfCartItemIsPartOfValidCollectionList(cartItem,validCollectionList)){
                            returnQty += parseInt(cartItem.quantity)
                            
                        }
                    }
    
                    // gfg.gfgFreeGift.state.CURRENT_QTY_BUY_ANY_PRODUCT_FROM_COLLECTION_Y = returnQty
                    gfg.gfgFreeGift.f.gfgFreeGiftFindAndUpdateInArray(iterator, returnQty, gfg.gfgFreeGift.state.CURRENT_QTY_BUY_ANY_PRODUCT_FROM_COLLECTION_Y)    
                    if(returnQty >= ruleData.minProducts){
                        return parseInt(returnQty / ruleData.minProducts)
                    }else{
                        return 0
                    }
                }
                else if(ruleData.ruleType == "SPEND_X_IN_COLLECTION_Y"){
                    let validCollectionList = []
                    ruleData.collectionsData.forEach(collection => {
                        validCollectionList.push(collection)
                    })
                    //check if condition is true 
                    let totalCartValue =0;
                    for(let i = 0; i < cartData.items.length; i++){
                        let cartItem = cartData.items[i]
                        if(cartItem && cartItem.properties && cartItem.properties["_free_product"]){
                            continue
                        }
                        if(gfg.f.checkIfCartItemIsPartOfValidCollectionList(cartItem,validCollectionList)){
                        //    const cartItemPrice= gfg.utility.formatPriceWithoutSymbol(cartItem.price) 
                           const cartItemPrice= gfg.utility.formatPriceWithoutSymbol(cartItem.discounted_price) 
                           totalCartValue +=  cartItemPrice * cartItem.quantity
                        }
                    }
                    // gfg.gfgFreeGift.state.CURRENT_TOTAL_FOR_SPEND_X_IN_COLLECTION_Y = totalCartValue
                    gfg.gfgFreeGift.f.gfgFreeGiftFindAndUpdateInArray(iterator, totalCartValue, gfg.gfgFreeGift.state.CURRENT_TOTAL_FOR_SPEND_X_IN_COLLECTION_Y)
                    if(totalCartValue >= gfg.utility.convertFromStoreCurrencyToCustomer(ruleData.minimumCartValue)){
                        return 1;
                    }
                }else if(ruleData.ruleType == "SPEND_X"){
                    let totalCartValue =0;
                    for(let i = 0; i < cartData.items.length; i++){
                        let cartItem = cartData.items[i]
                        if(cartItem && cartItem.properties && cartItem.properties["_free_product"]){
                            continue
                        }
                        // const cartItemPrice= gfg.utility.formatPriceWithoutSymbol(cartItem.final_price) 
                        const cartItemPrice= gfg.utility.formatPriceWithoutSymbol(cartItem.discounted_price)
                        totalCartValue +=  cartItemPrice * cartItem.quantity
                    }
                    if(totalCartValue >= gfg.utility.convertFromStoreCurrencyToCustomer(ruleData.minimumCartValue)){
                        return 1;
                    }
                }
                return 0 
            },
            prepareConfigData:  function(userConfigData, freeGiftInsideCart){
    
                let configData = {}
                if(gfg.gfgFreeGift.state.prepareUIState == "CONDITION_NOT_MET"){
                    configData.icon = userConfigData.globalConfig.conditionNotMet.icon || "https://cdn-icons-png.flaticon.com/512/3209/3209955.png" ; // take from gfg
                    configData.title = userConfigData.globalConfig.conditionNotMet.title;
                    configData.subtitle = userConfigData.globalConfig.conditionNotMet.subtitle;
                    configData.buttonText = userConfigData.addtionalFields.claimText
                    configData.buttonBgColor = ""
                }else if(gfg.gfgFreeGift.state.prepareUIState == "CONDITION_FULFILLED"){
                        configData.icon = userConfigData.globalConfig.conditionFulFilled.icon || "https://cdn-icons-png.flaticon.com/512/3209/3209955.png";
                        configData.title = userConfigData.globalConfig.conditionFulFilled.title;
                        configData.subtitle = userConfigData.globalConfig.conditionFulFilled.subtitle;
                        configData.buttonText = userConfigData.addtionalFields.claimText
                        configData.buttonBgColor = "gray"
                }else if(gfg.gfgFreeGift.state.prepareUIState == "CONDITION_MET"){
                    configData.icon = userConfigData.globalConfig.conditionInProgress.icon || "https://cdn-icons-png.flaticon.com/512/3209/3209955.png"; // take from gfg
                    configData.title = userConfigData.globalConfig.conditionInProgress.title;
                    configData.subtitle = userConfigData.globalConfig.conditionInProgress.subtitle;
                    configData.buttonText = userConfigData.addtionalFields.claimText
                    configData.buttonBgColor = ""
                }
    
                if(freeGiftInsideCart == null){
                    configData.buttonBgColor = "black"
                }else if(freeGiftInsideCart != null){
                    configData.buttonBgColor = "gray"
                }
                return configData
    
            },
            rerenderCart: async function () {
                let cartData = await  gfg.gfgFreeGift.utility.getCart()
                let cartPageWrapperV2 = gfg.$(document).find(gfg.selectors.cartPageWrapperV2)
                cartPageWrapperV2.empty()
                await gfg.cartPage.f.insertWrapperIntoPage(gfg.settings)
                await gfg.gfgFreeGift.f.checkForFreeGift(cartData)
            },
            refreshCartPageSection : async function(uniqueHtmlId,selectorRef) {
                let sectionHtmlTags = 'div[id^="shopify-section"]';
                //check div ids are more than 1
                //find all the divs with id starting with shopify-section
                // const divsWithShopifySection =  find 

                const divsWithShopifySection = gfg.$(sectionHtmlTags);

                if(divsWithShopifySection.length > 1){
                    // gfg.$('div[id^="shopify-section"]').each(function() {
                    for(let i = 0; i < divsWithShopifySection.length; i++){
                        let possibleCartSectionId = gfg.$(divsWithShopifySection[i]).attr('id');
                        
                        if (possibleCartSectionId.includes(uniqueHtmlId)) {
                            possibleCartSectionId = "#" + possibleCartSectionId;
                            await gfg.gfgFreeGift.f.updateSectionContent(possibleCartSectionId,selectorRef);
                            return true; // break out of .each loop after finding the cart section
                        }

                        // else if  last item and no cart secton found then reload the page
                        else if(i == divsWithShopifySection.length - 1){
                            window.location.reload();
                        }
                    }
                    // });
                    
                }else{
                    window.location.reload(); return;
                }
            },
            updateCartState: async function(t, e, r) {
                //t is card data
                //e is even
                //refresh the cart 
                async function refreshThePage(t, e) {
                    try {
                        if (gfg.settings.app.executeCustomScriptAfterFreeGiftAddition) {
                            // gfg.settings.app.executeCustomScriptAfterFreeGiftAddition();
                            // execute the custom script
                             eval(gfg.settings.app.executeCustomScriptAfterFreeGiftAddition);
                      
                        }
                        
                        if("/cart" === window.location.pathname || window.location.pathname === i + "cart"){
                            const uniqueCartItemsId =  gfg.settings.app.cartPageItemsSectionId;
                            const cartPageItemsSelector = gfg.settings.app.cartPageItemsSelector;
                            await gfg.gfgFreeGift.f.refreshCartPageSection(uniqueCartItemsId,cartPageItemsSelector);
                            // await gfg.gfgFreeGift.f.checkForFreeGift();
                            // await gfg.gfgFreeGift.f.checkForFreeGift();

                            return;
                        }
                       
                        const sideCartSectionId = gfg.settings.app.sideCartSectionId;
                        const sideCartSectionSelector = gfg.settings.app.sideCartSectionSelector;

                        if(sideCartSectionId && sideCartSectionSelector){
                            await gfg.gfgFreeGift.f.updateSidecartSection(sideCartSectionId,sideCartSectionSelector);
                        }

                        // await gfg.gfgFreeGift.f.checkForFreeGift();
                        // await gfg.gfgFreeGift.f.checkForFreeGift();
                        return;
                    } catch (t) {
                        window.location.href = window.location.href.toString()
                        gfg.utility.debugError("Failed to reload page using href assignment!", t), window.location.reload()
                    }
                }
                var n = this;
                var i = window.Shopify && window.Shopify.routes ? window.Shopify.routes.root : "/";
                if ("/cart" === window.location.pathname || window.location.pathname === i + "cart") {
                    await refreshThePage(t, e);
                }
    
    
                //type check the function
                function hn(t) {
                    return hn = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                        return typeof t
                    } : function(t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                    }, hn(t)
                }
    
                
    
                function f(message) {
                    console.log(message);
                }
                function z(message){
                    console.log("z-function-",message);
                }
                
                try {
                    var o, a, c, d, u, l, p, s, m, g, h, y;
                    if (window.HsCartDrawer && "function" == typeof window.HsCartDrawer.updateSlideCart && document.querySelector(".hs-site-cart-popup-layout, .hs-header-layout")) return window.HsCartDrawer.updateSlideCart(), !1;
                    if (!window.ignoreRebuyDrawer && window.Rebuy && "object" === hn(window.Rebuy.Cart) && "function" == typeof window.Rebuy.Cart.fetchCart && document.querySelector("#rebuy-cart")) return window.Rebuy.Cart.fetchCart(), f("Update drawer Rebuy"), !1;
                    if (window.SATCB && "object" === hn(window.SATCB.Widgets) && "object" === hn(window.SATCB.Widgets.CartSlider) && "function" == typeof window.SATCB.Widgets.CartSlider.openSlider && document.querySelector(".satcb-cs")) return window.SATCB.Widgets.CartSlider.openSlider(), f("Update drawer SATCB"), !1;
                    
                    if (t && "function" == typeof window.SLIDECART_SET_CART && document.querySelector("#slidecarthq div")) return window.SLIDECART_SET_CART(t), f("Update drawer SLIDECART_SET_CART"), !1;
                    
                    if ("function" == typeof window.SLIDECART_UPDATE && document.querySelector("#slidecarthq div")) return window.SLIDECART_UPDATE(), f("Update drawer SLIDECART_UPDATE"), !1;
                    if (window.sellify && "object" === hn(window.sellify.ucd) && "object" === hn(window.sellify.ucd.helpers) && "object" === hn(window.sellify.ucd.helpers.ShopifyAPI) && "function" == typeof window.sellify.ucd.helpers.ShopifyAPI.getCart && document.querySelector("#sellify-ucd-cart-drawer")) return window.sellify.ucd.helpers.ShopifyAPI.getCart(window.sellify.ucd.helpers.ajaxCart.buildCart), f("Update drawer sellify"), !1;
                    if ("function" == typeof window.upcartRegisterAddToCart && document.querySelector(".upcart-product-item")) return window.upcartRegisterAddToCart(), f("Update drawer upcart app - upcartRegisterAddToCart"), !1;
                    
                    var w = window.csapps ? document.querySelector("[data-csapp_line_wrapper] .cart-quantity-wrap input[data-id]:not([readonly])") : null;
                    if (w) return t && t.item_count ? (w.dispatchEvent(new Event("change", { bubbles: !0 })), f("Update drawer aiod cart app"), !1) : (f("Update drawer aiod cart app - empty cart = refresh"), refreshThePage(t, e));
                    
                    if ("function" == typeof window.CD_REFRESHCART && document.querySelector("#cart-drawer-app .cd-cart")) return window.CD_REFRESHCART(), f("Update drawer CD_REFRESHCART"), !1;
                    if ("function" == typeof window.BoostPFS && "object" === hn(window.BoostPFS.Utils) && document.querySelector(".boost-pfs-minicart-wrapper")) return f("Update drawer not supported for BoostPFS drawer. Refresh!"), refreshThePage(t, e);
                    if ("function" == typeof window.openeamcart && document.querySelector("#shopify-section-eam-cart")) return window.openeamcart(), f("Update drawer openeamcart"), !1;
                    if (t && void 0 !== window.vndHlp && "function" == typeof window.vndHlp.refreshCart) return window.vndHlp.refreshCart(t), f("Update drawer vndHlp.refreshCart"), !1;
                    
                    if (t && window.Cart && "function" == typeof window.Cart.buildCart) return window.Cart.buildCart(t), f("Update drawer Cart.buildCart"), !1;
                    if (t && "function" == typeof window.buildCart && document.querySelector("#mini__cart.yv_side_drawer_wrapper")) return window.buildCart(t), f("Update drawer window.buildCart"), !1;
                    if (window.cartNotification && "function" == typeof window.cartNotification.getCart && document.querySelector("#cart-notification")) return window.cartNotification.getCart(), f("Update drawer cartNotification"), !1;
                    if ("function" == typeof window.do_cart_refresh) return window.do_cart_refresh(!1), f("Update drawer do_cart_refresh"), !1;
                    if (window.theme && "function" == typeof window.theme.CartDrawer && window.theme.CartDrawer.toString().includes("new theme.Drawers")) return setTimeout((function() {return new window.theme.CartDrawer}), 250), f("Update drawer theme CartDrawer"), !1;
                    if (null !== (o = window.theme) && void 0 !== o && null !== (a = o.settings) && void 0 !== a && a.cart_drawer && document.querySelector("#Cart-Drawer")) {
                        if (!t || !t.item_count) return f("Update drawer #Cart-Drawer no items need to refresh"), refreshThePage(t, e);
                        var v = document.createElement("input");
                        return v.style.display = "none", v.classList.add("qty"), v.dataset.index = "1", v.value = t.items[0].quantity, document.querySelector("#CartDrawerItem-1").appendChild(v), v.dispatchEvent(new Event("change", {
                            bubbles: !0
                        })), f("Update drawer #Cart-Drawer"), !1
                    }
                    if (window.Shopify && window.Shopify.theme && ("Expanse" === window.Shopify.theme.name || 902 === window.Shopify.theme.theme_store_id) && document.querySelector("#HeaderCart.site-header__drawer")) return document.dispatchEvent(new Event("cart:build")), f("Update drawer cart:build"), !1;
                    if (t && "function" == typeof window.refreshCart) return window.refreshCart(t), f("Update drawer window.refreshCart"), !1;
                    if ("undefined" != typeof slate && void 0 !== slate.cart && "function" == typeof slate.cart.updateCart) return slate.cart.updateCart(), f("Update drawer slate.cart.updateCart"), !1;
                    if (t && "undefined" != typeof Shopify && "function" == typeof Shopify.updateQuickCart) return Shopify.updateQuickCart(t), f("Update drawer Shopify.updateQuickCart"), !1;
                    if (t && void 0 !== window.bcActionList && "function" == typeof window.bcActionList.atcBuildMiniCartSlideTemplate) return window.bcActionList.atcBuildMiniCartSlideTemplate(t), "function" == typeof window.openMiniCart && window.openMiniCart(), f("Update drawer bcActionList"), !1;
                    if (t && "undefined" != typeof Shopify && void 0 !== Shopify.updateCartInfo && document.querySelector(".top-cart-holder .cart-target form .cart-info .cart-content")) return Shopify.updateCartInfo(t, ".top-cart-holder .cart-target form .cart-info .cart-content"), f("Update drawer Shopify.updateCartInfo"), !1;
                    if (t && "undefined" != typeof Shopify && void 0 !== Shopify.updateCartInfo && document.querySelector("#cart-info #cart-content")) return Shopify.updateCartInfo(t, "#cart-info #cart-content"), f("Update drawer Shopify.updateCartInfo, selector 2"), !1;
                    if (window.theme && "object" === hn(window.theme.cart) && "function" == typeof window.theme.cart._updateCart && "function" == typeof window.$) return window.theme.cart._updateCart({}), window.$("body").trigger("updateCart"), document.dispatchEvent(new Event("cart:build")), f("Update drawer cart:build + updateCart"), !1;
                    if (window.theme && "function" == typeof window.theme.refreshCart) return window.theme.refreshCart(), f("Update drawer theme.refreshCart"), !1;
                    if (document.querySelector("#sidebar-cart.Drawer form.Cart.Drawer__Content")) return setTimeout((function() {
                        var t = new Event("product:added");
                        t.detail = {}, t.detail.quantity = 0, document.dispatchEvent(t)
                    }), 250), setTimeout((function() {
                        document.documentElement.dispatchEvent(new Event("cart:refresh"))
                    }), 500), f("Update drawer BOOMR product:added / cart:refresh"), !1;
                    if ("function" == typeof window.updateQtyCart && "function" == typeof window.$ && document.querySelector("#sidebar-cart.cart-drawer .cart-content[data-cart-content]")) return fetch("/cart?view=drawer&timestamp=" + Date.now(), {
                        credentials: "same-origin",
                        method: "GET"
                    }).then((function(t) {
                        t.text().then((function(t) {
                            $("[data-cart-content]").html(t)
                        }))
                    })), f("Update drawer #sidebar-cart.cart-drawer"), !1;
                    if (document.querySelector("form#mini-cart .mini-cart__content .mini-cart__line-item")) return setTimeout((function() {
                        return document.documentElement.dispatchEvent(new Event("cart:refresh"))
                    }), 500), f("Update drawer custom cart-drawer elem form#mini-cart"), !1;
                    var b = z("shopify_cart_state");
                    if (t && b && document.querySelector("form.cart-drawer")) {
                        J("shopify_cart_state", JSON.stringify(t));
                        var S = new Event("storage");
                        return S.key = "shopify_cart_state", window.dispatchEvent(S), f("Update drawer BOOMR shopify_cart_state"), !1
                    }
                    if (document.querySelector(["#ajaxifyModal #ajaxifyCart", "#ajaxifyDrawer #ajaxifyCart", ".fixed-cart-wrap #slidedown-cart", ".sidebar-drawer-container .sidebar-drawer"].join(","))) return t && t.item_count ? window.forceUpdateModalCart ? (f("Update drawer using custom forceUpdateModalCart"), window.forceUpdateModalCart(), !1) : (gfg.utility.debugConsole("All-in-One Free Gift on Cart: forceUpdateModalCart not set, but was expected."), refreshThePage(t, e)) : (gfg.utility.debugConsole("All-in-One Free Gift on Cart: forceUpdateModalCart reload due to empty cart."), refreshThePage(t, e));
                    if (window.theme && "object" === hn(window.theme.Cart) && "function" == typeof window.theme.Cart.updateCart) return window.theme.Cart.updateCart(), f("Update drawer Cart updateCart"), !1;
                    if (t && "function" == typeof window.render_cart_drawer && window.render_cart_drawer.toString().includes("render_cart_drawer(cart, target, oldQtd, id_variant)")) return window.render_cart_drawer(t, jQuery(".list-products"), 0, ""), f("Update drawer render_cart_drawer"), !1;
                    if (window.cart && "function" == typeof window.cart.getCart && "function" == typeof window.cart.closeCartDropdown && "function" == typeof window.cart.openCartDropdown && document.getElementById("cart-dropdown")) return window.cart.getCart(), f("Update drawer cart.getCart, #cart-dropdown"), !1;
                    if (window.cart && "function" == typeof window.cart.getCart && document.querySelector(".cart-drawer")) return window.cart.getCart(), f("Update drawer cart.getCart, .cart-drawer"), !1;
                    if (window.ajaxCart && "function" == typeof window.ajaxCart.load) return window.ajaxCart.load(), f("Update drawer ajaxCart load"), !1;
                    if (window.Shopify && "object" === hn(window.Shopify.theme) && "object" === hn(window.Shopify.theme.jsAjaxCart) && "function" == typeof window.Shopify.theme.jsAjaxCart.updateView) return window.Shopify.theme.jsAjaxCart.updateView(), f("Update drawer jsAjaxCart updateView"), !1;
                    if (window.Shopify && "object" === hn(window.Shopify.theme) && "object" === hn(window.Shopify.theme.ajaxCart) && "function" == typeof window.Shopify.theme.ajaxCart.init && document.querySelector(".js-mini-cart-trigger")) return document.querySelector(".js-mini-cart-trigger").dispatchEvent(new Event("click")), f("Update drawer js-mini-cart-trigger"), !1;
                    if (window.theme && "object" === hn(window.theme.ajaxCart) && "function" == typeof window.theme.ajaxCart.update && document.querySelector("#CartDrawer.drawer")) return window.theme.ajaxCart.update(), f("Update drawer theme.ajaxCart.update"), !1;
                    if (window.Shopify && "function" == typeof window.Shopify.addItem && "function" == typeof window.jQuery && document.querySelector(".cart-flyout .cart-flyout__content")) return jQuery.get("/cart?view=json", (function(t) {
                        jQuery(".cart-flyout").html(t)
                    })), f("Update drawer g-addtoicart cart-flyout"), !1;
                    if (t && window.wetheme && "function" == typeof window.wetheme.toggleRightDrawer) return window.wetheme.toggleRightDrawer("cart", !0, {
                        cart: t
                    }), f("Update drawer toggleRightDrawer"), !1;
                    if (window.gfTheme && "function" == typeof window.gfTheme.getCart) return window.gfTheme.getCart((function() {})), f("Update drawer gfTheme"), !1;
                    if (t && z("cartCurrentData") && document.querySelector(".popup__body .js-popup-cart-ajax")) return J("cartCurrentData", JSON.stringify(t)), setTimeout((function() {
                        return J("cartCurrentData", JSON.stringify(t))
                    }), 100), setTimeout((function() {
                        return J("cartCurrentData", JSON.stringify(t))
                    }), 1e3), f("Update drawer cartCurrentData in local storage"), !1;
                    if (document.querySelector("cart-drawer#mini-cart form#mini-cart-form, #shopify-section-mini-cart cart-drawer#mini-cart")) return t && t.item_count ? (setTimeout((function() {
                        return document.documentElement.dispatchEvent(new Event("cart:refresh"))
                    }), 750), f("Update drawer custom cart-drawer elem"), !1) : (f("When cart is empty custom cart-drawer elem's event may not work. Refresh!"), refreshThePage(t, e));
                    if (window.CartJS && "function" == typeof window.CartJS.getCart && document.querySelector("#cart-drawer,#cartDrawer")) return setTimeout((function() {
                        return window.CartJS.getCart(null)
                    }), 500), f("Update drawer CartJS getCart"), !1;
                    if ("function" == typeof window.update_cart && document.querySelector("#custom-drawer-cart")) return window.update_cart(), f("Update drawer custom-drawer-cart"), !1;
                    if (window.fcsb && "function" == typeof window.fcsb.fetchCart && document.querySelector("#sticky-app-client") && document.querySelector('#sticky-app-client [data-cl="mini-cart"]')) return window.fcsb.fetchCart(), f("Update drawer fcsb"), !1;
                    if (window.theme && "function" == typeof window.theme.updateCartSummaries) return window.theme.updateCartSummaries(), f("Update drawer theme.updateCartSummaries"), !1;
                    if (window.BT && "function" == typeof window.BT.updateHeaderCartHtml) return window.BT.updateHeaderCartHtml(!0), f("Update drawer BT.updateHeaderCartHtml"), !1;
                    if (window.geckoShopify && "function" == typeof window.geckoShopify.GetCartData) return document.querySelectorAll(".jsccount").forEach((function(t) {
                        return t.innerHTML = ""
                    })), window.geckoShopify.GetCartData(1, 1), f("Update drawer geckoShopify.GetCartData"), !1;
                    if (window.theme && "object" === hn(window.theme.classes) && "function" == typeof window.theme.classes.CoreCart && document.querySelector('[data-view="cart"] .cart--root')) return document.querySelector('[data-view="cart"] .cart--root').dispatchEvent(new Event("update-html")), f("Update drawer cart--root"), !1;
                    if (window.theme && "function" == typeof window.theme.cart && "function" == typeof window.theme.cart.updateTotals && "function" == typeof(null === (c = document.querySelector('[data-view="cart"] .cart--root')) || void 0 === c ? void 0 : c.updateHtml)) return t && t.item_count ? (document.querySelector('[data-view="cart"] .cart--root').updateHtml(), f("Update drawer cartRoot.updateHtml"), !1) : (f("When cart is empty cartRoot.updateHtml does not work. Refresh!"), refreshThePage(t, e));
                    if (window.theme && "object" === hn(window.theme.classes) && "function" == typeof window.theme.classes.FrameworkCart && document.querySelector('.cart--root[data-js-class="Cart"]')) {
                        var C = document.querySelector('.cart--root[data-js-class="Cart"]');
                        return C.dispatchEvent(new Event("updateHtml", {
                            bubbles: !0
                        })), C.dispatchEvent(new Event("update-html", {
                            bubbles: !0
                        })), f("Update drawer cart--root updateHtml/update-html event"), !1
                    }
                    var q = window.CartDrawer ? document.querySelector("#shopify-section-cart-drawer cart-drawer cart-drawer-items, #CartDrawer.cart-drawer cart-drawer-items") : null;
                    if (q && q.onChange) {
                        if (t && t.items.length) {
                            var A = {
                                target: {
                                    dataset: {
                                        index: 1
                                    },
                                    value: t.items[0].quantity
                                }
                            };
                            return q.onChange(A), _("#CartDrawer-LineItemError-1 {display: none;}"), f('Update drawer customCartDrawerItems["onChange"]'), !1
                        }
                        return f('Update drawer customCartDrawerItems["onChange"] - no items, force refresh!'), refreshThePage(t, e)
                    }
                    var E = window.themeVariables ? document.querySelector("#shopify-section-cart-drawer cart-drawer, .shopify-section cart-drawer") : null;
                    if (E && "function" == typeof E._onCartRefreshListener) return E._onCartRefreshListener(), f("Update drawer #shopify-section-cart-drawer cart-drawer"), !1;
                    var P = window.theme && "object" === hn(window.theme.CartDrawerSection) ? document.querySelector(".cart-drawer-modal cart-form.cart-drawer") : null;
                    if (P && "function" == typeof P.refresh) return P.refresh(), f("Update drawer .cart-drawer-modal cart-form.cart-drawer"), !1;
                    var O = window.CartDrawer ? document.querySelector("#Drawer-Cart cart-drawer") : null;
                    if (O && "function" == typeof O.updateCart) return O.updateCart(), f("Update drawer #Drawer-Cart cart-drawer updateCart"), !1;
                    var k, T, x, j, D, L = window.Shopify && "function" == typeof window.Shopify.CountryProvinceSelector ? document.querySelector("#main-cart-items quantity-input .quantity__input:not([readonly])") : null;
                    if (L && "object" === hn(L.parentElement.changeEvent)) {
                        if (!t || !t.item_count) return f("Update drawer quantity-input .quantity__input - empty cart = refresh"), refreshThePage(t, e);
                        for (var I = parseInt(L.getAttribute("data-index")), N = 0, R = 1; R <= t.items.length; R++) {
                            var G, M = null === (G = t.items[R - 1].handle) || void 0 === G ? void 0 : G.includes("docapp-free-gift");
                            if (M && R <= I && N++, !M && R < I && N--, !M && R >= I) break
                        }
                        return L.setAttribute("data-index", (I + N).toString()), L.dispatchEvent(L.parentElement.changeEvent), _("#main-cart-footer .cart-drawer__cart-error, mini-cart.cart-drawer .cart-item__error {display: none;}"), f("Update drawer quantity-input .quantity__input"), !1
                    }
                    if ("function" == typeof window.showCart && document.querySelector(".drawer .drawer_container")) return window.showCart(), f("Update drawer showCart"), !1;
                    if (window.WAU && "object" === hn(window.WAU.AjaxCart) && "function" == typeof window.WAU.AjaxCart.init && "function" == typeof window.WAU.AjaxCart.showDrawer && document.querySelector('#slideout-ajax-cart[data-wau-slideout="ajax-cart"] #mini-cart') && document.querySelector(".js-mini-cart-trigger.js-slideout-open")) return window.WAU.AjaxCart.hideDrawer({
                        cart_action: "drawer"
                    }), setTimeout((function() {
                        return document.querySelector(".js-mini-cart-trigger.js-slideout-open").dispatchEvent(new Event("click"))
                    }), 400), f("Update drawer WAU - close + click"), !1;
                    if ("function" == typeof window.fetchCart && document.querySelector(".cart-flyout .cart-drawer")) return window.fetchCart(), f("Update drawer fetchCart"), !1;
                    if (window.elessiShopify && "function" == typeof window.elessiShopify.initAddToCart && document.querySelector(".cart__popup, .jas-mini-cart.jas-push-menu")) return t && t.item_count ? (window.elessiShopify.initAddToCart(), f("Update drawer elessiShopify.initAddToCart"), !1) : (f("Update drawer elessiShopify.initAddToCart - empty cart = refresh"), refreshThePage(t, e));
                    if (window.Shopify && "object" === hn(window.Shopify.theme) && "object" === hn(window.Shopify.theme.sections) && "object" === hn(window.Shopify.theme.sections.registered) && "object" === hn(window.Shopify.theme.sections.registered.cart) && document.querySelector(".cart__drawer .drawer__body")) return document.dispatchEvent(new Event("theme:cart:reload")), f("Update drawer Pipeline theme:cart:reload"), !1;
                    if ("function" == typeof window.$ && window.theme && "function" == typeof window.theme.cartUpdatePopup && "function" == typeof window.theme.cartUpdatePopupModel && document.querySelector("#CartDrawer")) return $("body").trigger("completeChangeItem.ajaxCart"), f("Update drawer completeChangeItem.ajaxCart"), !1;
                    if (window.wetheme && "object" === hn(window.wetheme.cartDrawer) && "function" == typeof window.wetheme.cartDrawer.updateCartDrawer && document.querySelector("#cartSlideoutWrapper")) return window.wetheme.cartDrawer.updateCartDrawer(t), f("Update drawer updateCartDrawer"), !1;
                    if (window.iopCart && "object" === hn(window.iopCart.api) && "function" == typeof window.iopCart.api.refreshCart && document.querySelector("#iop-cart-root")) return window.iopCart.api.refreshCart(), f("Update drawer iopCart"), !1;
                    if (window.theme && "object" === hn(window.theme.AjaxCart) && "function" == typeof window.theme.AjaxCart.fetch && document.querySelector("#AjaxCartDrawer")) return window.theme.AjaxCart.fetch(), f("Update drawer theme.AjaxCart.fetch"), !1;
                    if (window.theme && "function" == typeof window.theme.Cart && document.querySelector(".side-cart-popup [data-quantity-input]:not([readonly])")) return t && t.items.length ? (document.querySelector(".side-cart-popup [data-quantity-input]:not([readonly])").dispatchEvent(new Event("change", {
                        bubbles: !0
                    })), f("Update drawer side-cart-popup change event"), !1) : (f("Update drawer side-cart-popup change event - no items, force refresh!"), refreshThePage(t, e));
                    if (window.theme && window.theme.dropdown && "function" == typeof window.theme.ajax_cart_dropdown && document.querySelector("#cart-dropdown")) return window.theme.ajax_cart_dropdown(), f("Update drawer ajax_cart_dropdown"), !1;
                    if ("function" == typeof CartItems && document.querySelector("#drawer-cart")) return document.dispatchEvent(new Event("ajaxProduct:added")), f("Update drawer ajaxProduct:added"), _("#drawer-cart .cart-item__details .cart-item__error {display: none;}"), !1;
                    if ("function" == typeof(null === (d = window.PXUTheme) || void 0 === d || null === (u = d.jsAjaxCart) || void 0 === u ? void 0 : u.updateView) && document.querySelector("#theme-ajax-cart")) return setTimeout((function() {
                        return window.PXUTheme.jsAjaxCart.updateView()
                    }), 250), f("Update drawer PXUTheme.jsAjaxCart.updateView"), !1;
                    if ("function" == typeof(null === (l = window.ctzn_global) || void 0 === l ? void 0 : l.refreshCart) && document.querySelector("#cart-content")) return window.ctzn_global.refreshCart(), f("Update drawer ctzn_global.refreshCart"), !1;
                    if ("object" === ("undefined" == typeof store ? "undefined" : hn(store)) && "function" == typeof(null === (p = store) || void 0 === p ? void 0 : p.getCart) && document.querySelector("#drawer-items")) return store.getCart(), f("Update drawer store.getCart"), !1;
                    if (null !== (s = window.Avatar) && void 0 !== s && null !== (m = s.theme) && void 0 !== m && null !== (g = m.sections) && void 0 !== g && null !== (h = g.SliderCart) && void 0 !== h && null !== (y = h.instance) && void 0 !== y && y.refreshCartSlider && document.querySelector('[data-section-type="slider-cart"]')) return null === (k = window.Avatar) || void 0 === k || null === (T = k.theme) || void 0 === T || null === (x = T.sections) || void 0 === x || null === (j = x.SliderCart) || void 0 === j || null === (D = j.instance) || void 0 === D || D.refreshCartSlider(), f("Update drawer Avatar.theme"), !1;
                    var H = "function" == typeof CartItems ? document.querySelector("mini-cart") : null;
                    if (H) return t && t.item_count ? (H.onChange({
                        target: {
                            dataset: {
                                index: 1
                            },
                            value: t.items[0].quantity
                        }
                    }), _("#MiniCart-Line-item-error-1 {display: none;}"), f("Update drawer athensThemeMiniCart"), !1) : (f("Update drawer athensThemeMiniCart - empty cart = refresh"), refreshThePage(t, e));
                    var B = document.querySelector("sidebar-drawer#site-cart .cart-item input.qty:not([readonly])");
                    if (B) return t && t.item_count ? (B.dispatchEvent(new Event("input", {
                        bubbles: !0
                    })), f("Update drawer sidebar-drawer#site-cart .cart-item .qty"), !1) : (f("Update drawer sidebar-drawer#site-cart .cart-item .qty - empty cart = refresh"), refreshThePage(t, e));
                    var F = [".cart-drawer[data-cart-drawer] input.quantity:not([readonly])", "#dropdown-cart input.item-quantity:not([readonly])", ".halo-sidebar .previewCart input.quantity:not([readonly])", "form.mini-cart .mini-cart__content input.quantity-selector__value:not([readonly])", '#cart-modal-form-body .cart-modal-qty[type="text"]:not([readonly])', ".drawer .cart-drawer__content-container .cart__popup-qty--input:not([readonly])", ".side-cart-item input.quantity__input:not([readonly])", ".top-bar .cart-container .mini-cart__item input[data-cart-quantity-input]:not([readonly])", "#t4s-mini_cart .t4s-mini_cart__item input[data-action-change]:not([readonly])"],
                        W = document.querySelector(F.join(","));
                    if (t && W) return t.item_count ? (setTimeout((function() {
                        var r = document.querySelector(F.join(","));
                        if (!r) return f("Update drawer failed due to missing element after timeout. Force refresh!"), n.refreshThePage(t, e);
                        var i = r.getAttribute("docapp-data-protected"),
                            o = null;
                        if (t.items.forEach((function(t, e) {
                                o || i && i.includes(t.variant_id) && (o = e + 1)
                            })), o) {
                            var a = r.getAttribute("data-line");
                            U(a) && a < 1e3 && r.setAttribute("data-line", o);
                            var c = r.getAttribute("data-line-id");
                            U(c) && c < 1e3 && r.setAttribute("data-line-id", o);
                            var d = r.getAttribute("data-product_id");
                            U(d) && d < 1e3 && r.setAttribute("data-product_id", o);
                            var u = r.closest("[data-line-item-id]");
                            if (u) {
                                var l = u.getAttribute("data-line-item-id");
                                U(l) && l < 1e3 && u.setAttribute("data-line-item-id", o)
                            }
                            var p = r.closest("[data-line]");
                            if (p) {
                                var s = p.getAttribute("data-line");
                                U(s) && s < 1e3 && p.setAttribute("data-line", o)
                            }
                            var m = r.closest("[data-cart-item][data-line-id]");
                            if (m) {
                                var _ = m.getAttribute("data-line-id");
                                U(_) && _ < 1e3 && m.setAttribute("data-line-id", o)
                            }
                        }
                        r.dispatchEvent(new Event("change", {
                            bubbles: !0
                        }))
                    }), 150), f("Update drawer cartModalQtyNonGiftChangeSelectors match pending..."), !1) : (f("Update drawer cartModalQtyNonGiftChangeSelectors - empty cart = refresh"), refreshThePage(t, e));
                    if (window.freeGiftCartUpsellProAppDisableRefreshExceptOnCart) return f("Refresh disabled except on cart page. END"), !1;
                    if (document.querySelector([".go-cart__drawer", ".ajax-cart__drawer.js-ajax-cart-drawer", "mini-cart.cart-drawer .mini-cart", ".halo-sidebar .previewCart", '.nt_mini_cart .mini_cart_items input[name="updates[]"]', ".widget_shopping_cart .mini_cart_item input.custom-qty", '.mini-products-list .item .qty-group input[name="updates[]"]', "#monster-upsell-cart", ".cart-flyout__inner .quick-cart__items .quick-cart__quantity", ".quick-cart__cart .quick-cart__item .quick-cart__qty", ".quick-cart__cart .quick-cart__item .quick-cart__button", "#shopify-section-quick-cart .quick-cart__items .quantity-input__input", ".flyout__content .cart-drawer", '#right-drawer-slot [x-data="ThemeModule_CartItems"] input[\\@change]', '[data-cart-row][data-cart-item-key] input[name="updates[]"][\\@change]', '#modals-rightDrawer [x-data="ThemeModule_CartItems"]', ".cart-mini[data-cart-mini] .cart-mini-sidebar"].join(","))) return f("Update drawer force refresh due to unsupported element"), refreshThePage(t, e);
                    if (t && window.Shopify && "function" == typeof window.Shopify.onCartUpdate && !window.Shopify.onCartUpdate.toString().includes("{alert(")) return window.Shopify.onCartUpdate(t), f("Update drawer Shopify onCartUpdate"), !1;
                    if (document.querySelector(["#cart-summary-overlay", ".cart-summary-overlay .cart-summary-overlay__actions a.to-cart", ".atc-banner--container[data-atc-banner]"].join(",")) || window.freeGiftCartUpsellProAppDisableRefreshExceptOnCart) return f("Update drawer not required due to found element/variable."), !1;
                    var V = document.querySelector(".site-header__cart #CartCount");
                    if (V) return t && (V.innerHTML = t.item_count), f("Update drawer not required on Simple."), !1;
                    var K = document.querySelectorAll("cart-notification #cart-notification #cart-notification-button");
                    if (K.length) return t && (K.forEach((function(e) {
                        return e.innerHTML = e.innerHTML.replace(/\d+/, t.item_count)
                    })), document.querySelectorAll(".cart-count-bubble span[aria-hidden]").forEach((function(e) {
                        return e.innerHTML = t.item_count
                    }))), f("Update drawer not required on Dawn."), !1
                } catch (t) {
                    f("Update drawer - ERROR!!!"), gfg.utility.debugError("Attempted to update drawer cart, Error: ", t)
                }
                return f("Update drawer - no integration found."), refreshThePage(t, e)
            },
            updateSectionContent : async function(htmlIdOfSection,selectorRef) {
             
                //the format is shopify-section-<section_id> pop based on shopify-section-
                // let sectionId = htmlIdOfSection.split("shopify-section-").pop();
                //  only pop if it is there in the string 
                let sectionId = htmlIdOfSection.split("shopify-section-").length > 1 ? htmlIdOfSection.split("shopify-section-").pop() : htmlIdOfSection;
                return new Promise((resolve, reject) => {
                        gfg.$.ajax({
                            url: '/?section_id=' + sectionId+"&app=gfgfreegift",
                            type: 'GET',
                            dataType: 'html',
                            success: function (htmlResponse) {
                                // gfg.$(htmlIdOfSection).html(html);
                                if(window.location.pathname == "/cart"){
                                    gfg.$(selectorRef).html(htmlResponse);
                                }else{
                                    gfg.$(selectorRef).html(gfg.$(htmlResponse).find(selectorRef).html());
                                }
                                resolve();
                            },
                            error: function () {
                                console.log('Failed to fetch section content for:', sectionId);
                                // window.location reload the page 
                                window.location.reload();
                                resolve();
                            }
                        });
                });
            },
            updateSidecartSection : async function(sideCartSectionID, selectorRef) {
                await gfg.gfgFreeGift.f.updateSectionContent(sideCartSectionID, selectorRef);
            },
            insertIntoPageWrapper: function (freeGiftHTML, freeGift) {
                let showNotifcationSettings = gfg.settings.freeGifts[0].showFreeGiftNotificationSettings;
                let showOnthisProductPage = false;
                
                if(showNotifcationSettings && showNotifcationSettings.productPages) {
                    showOnthisProductPage = true;
                } 
    
    
                if(showNotifcationSettings && showNotifcationSettings.specificProductPages && showNotifcationSettings.specificProduct && showNotifcationSettings.specificProduct.length && showNotifcationSettings.specificProduct.length > 0) {
                    
                    let currentProductPageId = gfg.f.getProductPageId()
                    if(currentProductPageId != "undefined") {
                        let validProductIds = showNotifcationSettings.specificProduct.map(function (item) {
                            return parseInt(item.productId);
                        });
                        if(validProductIds.includes(currentProductPageId)) {
                            showOnthisProductPage = true;
                        }
                    }
                    
                }
    
                if(showNotifcationSettings && showNotifcationSettings?.specificCollectionPages && showNotifcationSettings?.specificCollectionData && showNotifcationSettings?.specificCollectionData?.length && showNotifcationSettings.specificCollectionData.length > 0) {
                    
                    let currentProductPageId = gfg.f.getProductPageId()
                    if(currentProductPageId != "undefined") {
                        let collectionsList = showNotifcationSettings.specificCollectionData;
                        for(let i=0; i<collectionsList.length; i++){
                            let productList = collectionsList[i].productList;
                            if(productList.find(x => x.productId === currentProductPageId)){
                                showOnthisProductPage = true
                                break
                            }
                        }
                    }
                }
    
                
    
                
                if(showOnthisProductPage) {
                    let gftFreeGiftWrapperProductEle = gfg.$(".gfgProductPageWrapperV2").find(".gftFreeGiftWrapper");

                    if( "product"=== gfg.state.page_type &&   gftFreeGiftWrapperProductEle.length == 0){
                        // lets insertIntoPageWrapper in productPageWrapperV2
                        gfg.productPage.f.insertWrapperIntoPage()
                        gftFreeGiftWrapperProductEle = gfg.$(".gfgProductPageWrapperV2").find(".gftFreeGiftWrapper");
                    }



                    let freeGiftHTMLClone = freeGiftHTML.clone();
                    gftFreeGiftWrapperProductEle.each(function (index) {
                                gfg.$(this).html(freeGiftHTMLClone);
                    });
                }
    
                if(showNotifcationSettings && showNotifcationSettings.cartPage) {
                    let gftFreeGiftWrapperCartEle = gfg.$(".gfgCartPageWrapperV2").find(".gftFreeGiftWrapper");

                    if(gftFreeGiftWrapperCartEle.length == 0){
                        // lets insertIntoPageWrapper in cartPageWrapperV2 
                        gfg.cartPage.f.insertWrapperIntoPage()
                        gftFreeGiftWrapperCartEle = gfg.$(".gfgCartPageWrapperV2").find(".gftFreeGiftWrapper");
                    }


                    let freeGiftHTMLClone = freeGiftHTML.clone();
                    gftFreeGiftWrapperCartEle.each(function (index) {
                                gfg.$(this).html(freeGiftHTMLClone);
                     });
                }
    
                // renderPoweredByLabel
                gfg.f.addPoweredByBlock();

                
                // insert into parent element 
                // gfg.elements.gfgCartGiftMsgAndWrapWrapperParent.find(".gfgGiftMsgAndWrapWrapperInnerEle").append(settings.giftingOptions.shopifyPageinnerHTML);    //cartPageText                 
    
                // insert final  element into productPageWrapperV2
                // gfg.elements.cartPageWrapperV2.find(".gfgCartUpsellWrapper").append(gfg.elements.gfgCartGiftMsgAndWrapWrapperParent);
                // gfg.elements.cartPageWrapperV2.find(".gftFreeGiftWrapper").html(freeGiftHTML);
    
            },
            gfgFreeGiftClaimButtonClickAction:  async function(event, product, counter,validFreeGiftTiers){
    
                try {
                    if(gfg.settings.freeGifts[0].isMultipleFreeGiftAllowed){
                        //JSON.parse(JSOn.stringiyf) all the arguments pass
                        product = JSON.parse(JSON.stringify(product))
                        counter = JSON.parse(JSON.stringify(counter))
                        validFreeGiftTiers = gfg.gfgFreeGift.state.validFreeGiftTiers
                        return await gfg.gfgFreeGift.f.gfgFreeGiftClaimButtonClickAction_multipleFreeGifts(event, product, counter,validFreeGiftTiers)
                    }
    
                    let userConfigData = gfg.settings.freeGifts[0].configuration
                    gfg.utility.debugConsole("gfg.gfgFreeGift.state.prepareUIState", gfg.gfgFreeGift.state.prepareUIState)
                    gfg.utility.debugConsole(product)
              
                    if(gfg.gfgFreeGift.state.prepareUIState == "CONDITION_FULFILLED"){
                        gfg.utility.debugConsole('inside click button')
                        gfg.gfgFreeGift.f.gfgFreeGiftCreateMessageToast(event);
                        return
                    }
                    //  gfg.$(this) should have class gfgFreeGiftClaimButtonAddToCart and gfg.gfgFreeGift.state.prepareUIState should be CONDITION_MET write code for it
                    if(gfg.gfgFreeGift.state.prepareUIState != "CONDITION_MET" ){
                        return
                    }
    
    
                    if(!gfg.$(event.currentTarget).hasClass('gfgFreeGiftClaimButtonAddToCart')){
                        return
                    }
    
    
                    let variantId = product.variants[0].variantId
    
                    // let selectData = gfg.$('.gfgFreeGiftVariantSelect' + counter).val();
                    // console.log(selectData, 'selectData')
                    let selectData = gfg.$(event.currentTarget).parent().find('.gfgFreeGiftVariantSelect'+counter).val()

                    if(typeof selectData != 'undefined'){
                        variantId = selectData
                    }
                    gfg.$(event.currentTarget).text(userConfigData.addtionalFields.addingText);
    
    
                    let isGiftAdded = await gfg.gfgFreeGift.f.gfgAddSuperiorTierFreeGiftToCart(variantId);
                  
                    if(isGiftAdded == true){
                        // gfg.state.cartData = await  gfg.gfgFreeGift.utility.getCart();
                        gfg.state.gfgFreeGiftCartData = await  gfg.gfgFreeGift.utility.getCart();
                        gfg.gfgFreeGift.state.prepareUIState = "CONDITION_FULFILLED"
                        let freeGiftMsgHtml = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareUI(gfg.gfgFreeGift.state.validFreeGiftTiers, gfg.gfgFreeGift.state.inValidFreeGiftTiers, gfg.gfgFreeGift.state.AllFreeGiftTiers);
                        gfg.gfgFreeGift.f.insertIntoPageWrapper(freeGiftMsgHtml);
                        gfg.gfgFreeGift.f.gfgFreeGiftContainerOverflow()
                        gfg.gfgFreeGift.f.registerEvents()
    
                    }
                    
                    // console.log('claim button clicked ', variantId, counter, selectData );
                    if(gfg.gfgFreeGift.state.isCartUpdatedByUs){
                        await gfg.gfgFreeGift.f.updateCartState()
                    }
                } catch (error) {
                    console.log("error in gfgFreeGiftClaimButtonClickAction", error);
                }
            },
            gfgFreeGiftClaimButtonClickAction_multipleFreeGifts:  async function(event, product, counter,validFreeGiftTiers){
                    
    
                const validTierProductIds = gfg.gfgFreeGift.f.gfgFreeGiftGetValidTierProductIds(validFreeGiftTiers);
    
                let isFreeGiftValid = validTierProductIds.includes(product.productId);
    
                
                if(!isFreeGiftValid){
                    return
                }
    
                // alert(`Free Gift Added to Cart, the value of the free gift is ${isFreeGiftValid}`)
                console.log("validTierProductIds", validTierProductIds, product.productId, isFreeGiftValid);
                let userConfigData = gfg.settings.freeGifts[0].configuration
                gfg.utility.debugConsole("gfg.gfgFreeGift.state.prepareUIState", gfg.gfgFreeGift.state.prepareUIState)
                gfg.utility.debugConsole(product)
    
                let ruleIdTier = gfg.$(event.currentTarget).closest('.gfgFreeGiftMsgOptionRow').attr('rule-id-tier');
    
                let variantId = product.variants[0].variantId
    
                let freeGiftProductData = {
                  variantId: variantId,
                  _rule_id: ruleIdTier,
                };
    
                //getProductIdFromRuleIdTier
                let productId = gfg.gfgFreeGift.utility.getProductIdFromRuleId(ruleIdTier);
    
                if (productId) {
                    gfg.gfgFreeGift.f.gfgFreeGiftCreateMessageToast(event);
                    return;
                }
    
                // if(gfg.gfgFreeGift.state.prepareUIState == "CONDITION_FULFILLED"){
                //     gfg.utility.debugConsole('inside click button')
                //     gfg.gfgFreeGift.f.gfgFreeGiftCreateMessageToast(event);
                //     return
                // }
                // //  gfg.$(this) should have class gfgFreeGiftClaimButtonAddToCart and gfg.gfgFreeGift.state.prepareUIState should be CONDITION_MET write code for it
                // if(gfg.gfgFreeGift.state.prepareUIState != "CONDITION_MET" ){
                //     return
                // }
    
    
                // if(!gfg.$(event.currentTarget).hasClass('gfgFreeGiftClaimButtonAddToCart')){
                //     return
                // }
    
                //find the parent class known as gfgFreeGiftMsgOptionRow and then get the attr rule-id-tier
    
    
               
    
    
    
                // let selectData = gfg.$('.gfgFreeGiftVariantSelect' + counter).val();
                let selectData = gfg.$(event.currentTarget).parent().find('.gfgFreeGiftVariantSelect'+counter).val()

                // console.log(selectData, 'selectData')
    
                if(typeof selectData != 'undefined'){
                    variantId = selectData
                    freeGiftProductData.variantId = variantId
                }
                gfg.$(event.currentTarget).text(userConfigData.addtionalFields.addingText);
    
                let isGiftAdded = await gfg.gfgFreeGift.f.gfgAddFreeGiftToCart(freeGiftProductData);
              
                if(isGiftAdded == true){
                    // gfg.state.cartData = await  gfg.gfgFreeGift.utility.getCart();
                    gfg.state.gfgFreeGiftCartData = await  gfg.gfgFreeGift.utility.getCart();
    
                    gfg.gfgFreeGift.state.prepareUIState = "CONDITION_FULFILLED"
                    let freeGiftMsgHtml = await gfg.gfgFreeGift.f.gfgFreeGiftPrepareUI(gfg.gfgFreeGift.state.validFreeGiftTiers, gfg.gfgFreeGift.state.inValidFreeGiftTiers, gfg.gfgFreeGift.state.AllFreeGiftTiers);
                    gfg.gfgFreeGift.f.insertIntoPageWrapper(freeGiftMsgHtml);
                    gfg.gfgFreeGift.f.gfgFreeGiftContainerOverflow()
                    gfg.gfgFreeGift.f.registerEvents()
    
                }
                
                // console.log('claim button clicked ', variantId, counter, selectData );
                if(gfg.gfgFreeGift.state.isCartUpdatedByUs){
                    await gfg.gfgFreeGift.f.updateCartState()
                }
            },
            gfgFreeGiftCheckCustomerConditions:function(){
                try{
                    let conditions = gfg.settings.freeGifts[0].conditionsData.conditionsList
                    let conditionOperator = gfg.settings.freeGifts[0].conditionsData.conditionsOperator
                    if(conditions.length >= 1){
                        let checkConditionFlag = gfg.gfgFreeGift.f.gfgCheckConditionOutcome(conditions,conditionOperator);
                        gfg.gfgFreeGift.state.isCustomerConditionMet = checkConditionFlag;
                        return checkConditionFlag;
                    }
                    // when no condition setted up;
                    return true;
                }catch(err){
                    gfg.utility.debugConsole('gfgFreeGiftCheckCustomerConditions ', err);
                }
            },
            gfgCheckConditionOutcome: function(conditions, conditionOperator){
                // map over conditions, for each condition fire respective function using switchcase, and record answer on an array
                // use this array to evaluate, wether it passes or not on basis of conditionOperator
                let resultantValue = [];
                let result = false;
                let operatorType = conditionOperator;
                conditions.forEach((element, index) => {
                    let ruleType = element.ruleType;
                    switch(ruleType){
                        case "customerTags": {
                            let val = gfg.gfgFreeGift.f.gfgCheckConditionForCustomerTags(element) || false;
                            resultantValue.push(val);
                            break;
                        }
                        case "isCustomerLoggedIn": {
                            let val = gfg.gfgFreeGift.f.gfgCheckConditionForCustomerLoggedIn(element) || false;
                            resultantValue.push(val);
                            break;
                        }
                        default: {
                            resultantValue.push(false);
                            break;
                        }
                    }
                })

                function checkIfAnyTrue(booleanArray) {
                    for (let i = 0; i < booleanArray.length; i++) {
                      if (booleanArray[i] == true) {
                        return true;
                      }
                    }
                    return false;
                }


                function checkIfAllTrue(booleanArray) {
                    for (let i = 0; i < booleanArray.length; i++) {
                      if (booleanArray[i] == false) {
                        return false;
                      }
                    }
                    return true;
                }

                if(operatorType == "OR"){
                    result = checkIfAnyTrue(resultantValue);
                }

                if(operatorType == "AND"){
                    result = checkIfAllTrue(resultantValue);
                }

                return result;

            },
            gfgCheckConditionForCustomerLoggedIn: function(condition){
                // console.log('gfgCheckConditionForCustomerLoggedIn ==> ', condition)
                // return true;
                try{
                    let res = false;
                    let customerData = gfg.state.activeCustomerData;
                    let isLoggedIn = customerData.isCustomerLoggedInBool;
                    if(condition.ruleValue.value == "yes"){
                        res = isLoggedIn ? true : false;
                    }else{
                        res = isLoggedIn ? false : true;
                    }

                    return res;
                }catch(err){
                    gfg.utility.debugConsole('gfgCheckConditionForCustomerLoggedIn ', err);
                }
            },
            gfgCheckConditionForCustomerTags: function(condition){
                try{
                    let res = false;
                    function hasCommonElement(arr1, arr2) {
                        for (let i = 0; i < arr1.length; i++) {
                        for (let j = 0; j < arr2.length; j++) {
                            if (arr1[i] === arr2[j]) {
                            return true;
                            }
                        }
                        }
                        return false;
                    }

                    

                    let customerData = gfg.state.activeCustomerData;

                    let conditionTags = condition.ruleValue.tags;
                    let customerTags = customerData?.customerTags || [];

                    if(condition.ruleValue.operatorType == "is" ){
                        res = hasCommonElement(conditionTags, customerTags);
                    }

                    if(condition.ruleValue.operatorType == "isNot" ){
                        res = !hasCommonElement(conditionTags, customerTags);
                    }

                    return res;
                }catch(err){
                    gfg.utility.debugConsole( 'gfgCheckConditionForCustomerTags', err);
                }
            },
            handleCustomCssForWidget: function(variablesObj){
                try {

                    const getFontWeightValue = (fontStyle) => {
                        if(fontStyle === "bold"){
                            return "700";
                        }else if(fontStyle === "medium"){
                            return "600";
                        } else{
                            return "400";
                        }
                    }

                    const widgetConfiguration = gfg.settings.freeGifts[0]?.widgetConfiguration;
                    if (!widgetConfiguration || Object.keys(widgetConfiguration).length === 0 || !widgetConfiguration?.isEnabled) {
                      return;
                    }
                
                    const { colorConfig, fontConfig } = widgetConfiguration;
                
                    // Define CSS configurations for each key as an object
                    const cssConfigurations = {
                      "gfgFreeGiftOptionsContainerDiv": {
                        "background-color": colorConfig?.boxBgColor,
                        "border": `1px solid ${colorConfig?.borderColor}`,
                      },
                      "gfgFreeGiftSelectDiv": {
                        "border": `1px solid ${colorConfig?.borderColor}`,
                      },
                      "gfgFreeGiftMsgTitle": {
                        "color": colorConfig?.titleColor,
                        "font-weight": getFontWeightValue(fontConfig?.titleFontStyle),
                        "font-size": `${fontConfig?.titleFontSize}px`,
                      },
                      "gfgFreeGiftMsgSubTitle": {
                        "color": colorConfig?.subtitleColor,
                        "font-weight": getFontWeightValue(fontConfig?.subtitleFontStyle),
                        "font-size": `${fontConfig?.subtitleFontSize}px`,
                      },
                     "gfgFreeGiftSingleOffer": {
                          "background-color": colorConfig?.boxBgColor,
                          "border": `1px solid ${colorConfig?.borderColor}`,
                      },
                      "gfgFreeGiftMsgTitleSingleOffer":{
                        "color": colorConfig?.titleColor,
                        "font-weight": getFontWeightValue(fontConfig?.titleFontStyle),
                        "font-size": `${fontConfig?.titleFontSize}px`,
                      },
                      "gfgFreeGiftMsgSubTitleSingleOffer": {
                        "color": colorConfig?.subtitleColor,
                        "font-weight": getFontWeightValue(fontConfig?.subtitleFontStyle),
                        "font-size": `${fontConfig?.subtitleFontSize}px`,
                      },
                      "gfgFreeGiftReadyToClaimButton":{
                        "color": colorConfig?.claimBtnTextColor,
                        "background-color": colorConfig?.claimBtnBgColor,
                        "font-weight": getFontWeightValue(fontConfig?.claimBtnTextFontStyle),
                        "font-size": `${fontConfig?.claimBtnTextFontSize}px`,
                      }

                    };
                    // Apply CSS configurations based on the key
                    Object.keys(variablesObj).forEach(key => {
                      if (!variablesObj[key]) {
                        return;
                      }
                
                      const cssObj = cssConfigurations[key];
                      if (cssObj) {
                        variablesObj[key].css(cssObj);
                      }
                    });
                  } catch (error) {
                    gfg.utility.debugConsole(error?.message);
                  }
            },
            registerEvents: function () {
                
                if(gfg.gfgFreeGift.state.isEventListenerRegistered == false){
                    gfg.gfgFreeGift.state.isEventListenerRegistered = true
                    gfg.$(document).on('click', '.gfgFreeGiftSelectDiv', function(event) {
                        let element = gfg.$(event.currentTarget)
                        let parent = gfg.$(event.currentTarget).parent()
                        gfg.utility.debugConsole(element)
                        gfg.utility.debugConsole('button clicked!');
                        let isAccordion = gfg.gfgFreeGift.state.isAccordion;
                        if( isAccordion === true){
                            element.toggleClass('gfgFreeGiftSelectDivExpanded')
                            gfg.$('.gfgFreeGiftDropDownButton').toggleClass('gfgFreeGiftDropDownButtonRotationClass')
                            parent.find('.gfgFreeGiftOptionsContainerDiv').toggleClass('gfgFreeGiftOptionsContainerDivExpanded')
                        }
                        gfg.gfgFreeGift.f.gfgFreeGiftContainerOverflow()
                    });



                }
            },
            
        },
        utility:{
            removeCartItemsFromCart: async function (cartItems) {
    
                if(cartItems.length == 0){
                    return
                }
                //now cartItem have something known as key which is unique for each item in cart
                //we need to remove all the items from cart which are in cartItems
    
                let cartItemData = cartItems.map(function (item) {
                    return {id: item.key, quantity: 0};
                });
    
                // lets send that in data to changeCart(data)
                //write code to remove line Item keys from cart
                let data = cartItemData;
                let response = await gfg.utility.changeCart(data);
                if(response){
                    gfg.gfgFreeGift.state.isCartUpdatedByUs = true
                }
                else {
                    gfg.gfgFreeGift.state.isCartUpdatedByUs = false
                }
                return response;
    
            },  
            modifySettingsForRuleIds:function(){
                // = gfg.settings.freeGifts[0].rulesList
                let rulesList = gfg.settings.freeGifts[0].rulesList
                // let ruleIds = rulesList.map(function (item,index) {
                //     return item.ruleType + "-" +index
                // }
    
                rulesList.forEach(function (item,index) {
                    item.ruleId = item.ruleType + "-" + (index+1)
                })
    
                gfg.settings.freeGifts[0].rulesList = rulesList
            },
            getFirstVariantSelectedWithProperties: async function (validFreeGiftTiers) {
                //juST ADD THE FIRST VARIANT FROM EACH TIER
                let freeGiftsToBeAddedToCart = []
                validFreeGiftTiers.forEach(function (item) {
                    let freeGiftProduct = item.freeGiftProduct;
                    for (let i = 0; i < freeGiftProduct.length; i++) {
                        for (let j = 0; j < freeGiftProduct[i].variants.length; j++) {
                            let variantId = freeGiftProduct[i].variants[j].variantId;
                            let variantData = gfg.gfgFreeGift.state.freeGiftsShopifyDataByVariantIds[variantId];
                            variantData["variantId"] = variantId;
                            if (variantData && variantData.available == true) {
                                freeGiftsToBeAddedToCart.push({variantData: variantData, ruleId: item.ruleId})
                                break;
                            }
                        }
                    }


                    // freeGiftsToBeAddedToCart.push({variantData:item.freeGiftProduct[0].variants[0],ruleId:item.ruleId})
                });
                //now we have all the free gifts to be added to cart
                //lets add them to cart
                //lets prepare the data here;
                let cartItemData = freeGiftsToBeAddedToCart.map(function (item) {
                    return {variantId: item.variantData.variantId, quantity: 1, properties: {_free_product: true, _rule_id: item.ruleId}};
                });
                return cartItemData;
                // lets send that in data to addToCart(data)
            },
            isProductInFreeGiftCart : function (productId) {
                //use the object gfg.state.freeGiftCartData_productId
                let freeGiftCartData_productId = gfg.state.freeGiftsCartDataMap_productId // is an object
    
                if(freeGiftCartData_productId[productId] && Object.keys(freeGiftCartData_productId[productId]).length > 0){
                    return true
                }
                return false
            },
            isVariantInFreeGiftCart : function (variantId) {
                //use the object gfg.state.freeGiftCartData_variantId
                let freeGiftCartData_variantId = gfg.state.freeGiftsCartDataMap_variantId // is an object
                if(freeGiftCartData_variantId[variantId] && Object.keys(freeGiftCartData_variantId[variantId]).length > 0){
                    return true
                }
                return false
            },
            isRuleIdProductAlreadyInCart : function (ruleId) {
                // use the gfg.state.freeGiftCartData.items object
                let cartData = gfg.state.freeGiftsCartData
                let cartItems = cartData.items
                let isRuleIdProductAlreadyInCart = false
                cartItems.forEach(function (item) {
                    if(item.properties._rule_id == ruleId){
                        isRuleIdProductAlreadyInCart = true
                    }
                })
                return isRuleIdProductAlreadyInCart
            },
            getProductIdFromRuleId : function (ruleId) {
                let cartData = gfg.state.freeGiftsCartData
                let cartItems = cartData.items
                let productId = null
                cartItems.forEach(function (item) {
                    if(item.properties._rule_id == ruleId){
                        productId = item.product_id
                    }
                })
                return productId
            },
            getCart : async function () {
                let cartData = await gfg.utility.getCart()
                let filteredData = gfg.gfgFreeGift.utility.filterCartDataBasedOnSettings(cartData);
                return filteredData
                // return cartData
            },
            filterCartDataBasedOnSettings: function (cartData) {
                let config = gfg.settings.freeGifts[0];
                if (!config) {
                    return cartData; // Return original cartData if there's no configuration
                }
            
                let excludeSubscriptionProducts = config.freeGiftEligibility == "EXCLUDE_SUBSCRIPTION_PRODUCTS";
                let includeOnlySubscriptionProducts = config.freeGiftEligibility == "INCLUDE_ONLY_SUBSCRIPTION_PRODUCTS";
                
                let allowAllProducts = config.freeGiftEligibility == "ALL_PRODUCTS"  ||  (!excludeSubscriptionProducts && !includeOnlySubscriptionProducts);


                // if(allowAllProducts){
                //     return cartData
                // }
                
                let filteredCartData = {
                    ...cartData,
                    items: [],
                    total_price: 0,
                    total_weight: 0,
                    // total_discount: 0,
                    items_subtotal_price: 0,
                    requires_shipping: false
                };
            
                for (let i = 0; i < cartData.items.length; i++) {
                    let item = cartData.items[i];
                    let isFreeProduct = item.properties &&  item.properties["_free_product"] == "true";
            
                    let shouldIncludeItem = isFreeProduct || (!excludeSubscriptionProducts && !includeOnlySubscriptionProducts); // Include by default if isFreeProduct or neither condition is set
                    
                    let productIsSubscription =  item && item.selling_plan_allocation && item.selling_plan_allocation.selling_plan;
                    if (!isFreeProduct) {
                        if (excludeSubscriptionProducts) {
                            shouldIncludeItem =  !productIsSubscription;
                        } else if (includeOnlySubscriptionProducts) {
                            shouldIncludeItem = productIsSubscription;
                        }
                    }

                    if(isFreeProduct){
                        // item_price should be zero
                        // item.quantity shuld be 1
                        // item.dscounted price should be 0
                        // item.original_price should be 0
                        item.price = 0
                        item.quantity = 1
                        item.discounted_price = 0
                        item.original_price = 0
                    }
            
                    if (shouldIncludeItem) {
                        // Inline logic to add item to filteredCartData
                        filteredCartData.items.push(item);
                        filteredCartData.total_price += (item.discounted_price || item.price) * item.quantity;
                        filteredCartData.total_weight += item.quantity * item.grams;
                        // filteredCartData.total_discount += (item.discounted_price || item.price) * item.quantity;
                        // filteredCartData.total_discount += (item.discounted_price || item.price) * item.quantity;
                        filteredCartData.items_subtotal_price += item.original_price * item.quantity;
                        filteredCartData.requires_shipping = filteredCartData.requires_shipping || item.requires_shipping;
                    }
                }

                // filteredCartData.items_subtotal_price -= filteredCartData.total_discount;
            
                filteredCartData.item_count = filteredCartData.items.length;
                return filteredCartData;
            },
            prepareTextInAnchorTag: function (pageType, text, handle) {

                // pageType: it can be PRODUCT_PAGE_HANDLE or COLLECTION_PAGE_HANDLE
                // text: it is the text that needs to be shown in the anchor tag
                // handle: it is the handle of the product or collection

                let preFixUrl;
                if(pageType == "PRODUCT_PAGE_HANDLE"){
                    preFixUrl = "/products/"
                }
                return `<a href="${preFixUrl}${handle}" target="_blank">${text}</a>`
            },
            getFreeGiftProductModifiedBasicFieldData: function (product, property) {
                /* this function reads & returns the data for basic widget properties such as image & title 
                  from the product["shopifyData"] to cover the case if free gift products get modified.  */

                if(property == "image"){
                    const imagePath = product["shopifyData"]?.images?.length > 0 
                                ? product["shopifyData"].images[0] 
                                :(product.images.length === 0 
                                    ? 'https://d1cjetlwgplgi5.cloudfront.net/public/freeGiftDymmyImage.png' 
                                    : product.images[0].originalSrc
                                  );
                    return imagePath;                
                }
                else if(property == "title"){
                    return product["shopifyData"]?.title || product.title;
                }
            }
            
            
        },
        actions: {
           
        }
    
    },
    gfgVolDiscount: {
        state:{
            isAddToCartButtonOverwrite: false,
            isCartUpdatedByUs: false,
            customerSpecificDiscount: []
        },
        init: async function (settings, parent) {
            try{
                gfg.gfgVolDiscount.initialize(settings, parent)
            }catch(error){
                gfg.utility.debugConsole(error)
            }
        },
        initialize: async function (settings, parent) {

            //if link setting is on and the user doesnt have that link enabled in their note_attributes then dont show the widget
            // basically return

            // let isVolDiscountActive = false // || gfg.gfgVolDiscount.f.checkIfActive();
            gfg.gfgVolDiscount.f.removeInactiveCampaigns()

            // if(!isVolDiscountActive){
            //     return
            // }
            
            gfg.f.getProductPageHandle(settings)
            gfg.f.getProductPageId(settings)

            //check if there is any  volDiscount for this Product page 
            let volDiscountDataForProductPage = await gfg.gfgVolDiscount.f.getVolDiscountDataForProductPage()

            if (parent == "PRODUCT_PAGE" && volDiscountDataForProductPage) {
                let gfgVolDiscountPageHtml = gfg.gfgVolDiscount.f.prepareUI(parent,volDiscountDataForProductPage)
                // console.log(gfgVolDiscountPageHtml , 'gfgVolDiscountPageHTML')
                gfg.gfgVolDiscount.f.insertIntoPageWrapper(gfgVolDiscountPageHtml, parent)
                gfg.utility.debugConsole("PRODUCT_PAGE-variantListToBeShownOnProductPage")
                // gfg.utility.overWriteAddToCartBtn()
                // gfg.utility.overWriteBuyNowBtn()
                // gfg.state.isOverWriteBuyNowBtnTriggered = true
            }

            if (parent == "CART_PAGE") {
                
                let gfgVolDiscountCartPageHtml = await gfg.gfgVolDiscount.f.prepareBulkDiscountRulesWidgets(settings)
                gfg.gfgVolDiscount.f.insertIntoPageWrapper(gfgVolDiscountCartPageHtml, parent)
                gfg.utility.debugConsole("CART_PAGE-gfgVolDiscountCartPageHtml")
            }

        },
        f: {
            
            insertIntoPageWrapper: function (gfgVolDiscountPageHtml, parent) {
                try {
                    if(parent == "PRODUCT_PAGE") {
                        let gfgVolDiscountWrapperProductEle = gfg.$(".gfgProductPageWrapperV2").find(".gfgVolDiscountWrapper")
                        let gfgVolDiscountWrapperProductEleClone = gfgVolDiscountPageHtml.clone();
                        gfgVolDiscountWrapperProductEle.each(function (index) {
                                    gfg.$(this).html(gfgVolDiscountWrapperProductEleClone);
                                });
                    } else if(parent == "CART_PAGE") {
                        let gfgBulkDiscountWidgetHTMLEle = gfg.$(".gfgCartPageWrapperV2").find(".gfgVolDiscountWrapper")
                        let gfgBulkDiscountWidgetHTMLEleClone = gfgVolDiscountPageHtml.clone();
                        gfgBulkDiscountWidgetHTMLEle.each(function (index) {
                            gfg.$(this).html(gfgBulkDiscountWidgetHTMLEleClone);
                        });
                    }
                    gfg.f.addPoweredByBlock();

                } catch (error) {
                    gfg.utility.debugConsole(error)
                }
                
            },
            searchObjectById: function(array, idToSearch) {
                for (let i = 0; i < array.length; i++) {
                  if (array[i].id == idToSearch) {
                    return array[i]; // Found the object, return it
                  }
                }
                return null; // If the ID was not found, return null
            },
            removeInactiveCampaigns : function () {
                try{
                    let allDiscounts = JSON.parse(JSON.stringify(gfg.settings.discounts));
    
                    let modifiedDiscounts = [];
                    // now if they have a flag knonw as isCampaignUrlEnabled and if it is true then,
                    // match the activeCampaignName with the value in urlBasedCampaign.value;
                    // if they dont match then remove it from the list.
                    // if they have isCampaignUrlEnabled as false, then let it be there in the list
                    if (allDiscounts && allDiscounts.length > 0) {
                        for(let i=0; i<allDiscounts.length; i++){
                            let item = allDiscounts[i];
                            let activeCampaignName = gfg.state.activeCampaignName
                            let urlBasedCampaign = item.urlBasedCampaign;
                            if (urlBasedCampaign && item.isCampaignUrlEnabled && activeCampaignName == urlBasedCampaign.value) {
                                modifiedDiscounts.push(item);
                            }else if (!urlBasedCampaign || !item.isCampaignUrlEnabled) {
                                modifiedDiscounts.push(item);
                            }
                        }
                    }
                    modifiedDiscounts = gfg.gfgVolDiscount.f.gfgVolumeDiscountFilter(modifiedDiscounts);
                    gfg.settings.discounts = modifiedDiscounts;
                }catch(error){
                    gfg.utility.debugConsole(error)
                }
            },
            
            prepareUIDataWrapper: function(discount) {
                const configObject = discount.configuration;
                const productPageData = discount.productPageData;
                const variant = gfg.f.getSelectedVariant();
                const variantObject = this.searchObjectById(productPageData.variants, variant);
                const symbol = gfg.utility.getCurrencySymbol();
                let discountTiers = [];
            
                const calculateDiscountData = (rule, i, totalPrice, conditionText) => {
                    let discountPrice;
                    let text;
                    let currencySymbol = gfg.utility.getCurrencySymbol();
                    if (discount.disValueType === "FIXED_DIS") {
                        discountPrice = parseFloat(gfg.utility.getAmountInActiveCurrency(rule.disValue));
                        if (discount.conditionType === "COUNT" && discount.fixedDiscountType == "APPLY_TOTAL_ON_EACH_PRODUCT") {
                            discountPrice *= parseInt(rule.conditionValue);
                        }
                        
                        // text = configObject.tiers[i].label.replace("{{CONDITION}}", conditionText).replace("{{DISCOUNT}}", symbol + rule.disValue);
                        text = configObject.tiers[i].label.replace("{{CONDITION}}", conditionText).replace("{{DISCOUNT}}", symbol + discountPrice).replace("{{CURRENCY}}", currencySymbol);
                    } else if (discount.disValueType === "PERCENTAGE_DIS") {
                        const percent = parseFloat(rule.disValue);
                        discountPrice = (variantObject?.price / 100) * (percent / 100);
                        // discountPrice *= parseInt(rule.conditionValue);
                        if (discount.conditionType === "COUNT") {
                            discountPrice *= parseInt(rule.conditionValue);
                        }

                        text = configObject.tiers[i].label.replace("{{CONDITION}}", conditionText).replace("{{DISCOUNT}}", percent + '%').replace("{{CURRENCY}}", currencySymbol);
                    }
                    return {
                        priceLabel: (totalPrice - discountPrice) > 0 ? symbol + (totalPrice - discountPrice) : ' ',
                        priceValue : (totalPrice - discountPrice) > 0 ? (totalPrice - discountPrice) : 0,
                        quantitylabel: discount.conditionType === "COUNT" ? parseInt(rule.conditionValue) : '',
                        strikethroughLabel: symbol + totalPrice,
                        strikethroughValue : parseFloat(totalPrice).toFixed(2),
                        disValueType: discount.disValueType,
                        discountValue: rule.disValue,
                        discountPrice: discountPrice,
                        text: text,
                        label: configObject.tiers[i].label
                    };
                };
            
                if (discount.conditionType === "COUNT") {
                    discountTiers = [];
                    discount.rules.forEach((rule, i) => {
                        const qty = parseInt(rule.conditionValue);
                        const totalPrice = (qty * (variantObject.price / 100));
                        discountTiers.push(calculateDiscountData(rule, i, totalPrice, qty));
                    });
                } else if (discount.conditionType === "SUBTOTAL") {
                    discountTiers = [];
                    discount.rules.forEach((rule, i) => {
                        const subtotal = parseFloat(gfg.utility.getAmountInActiveCurrency(rule.conditionValue));
                        const totalPrice = subtotal;
                        discountTiers.push(calculateDiscountData(rule, i, subtotal, totalPrice));
                    });
                }
            
                return {
                    discountTitle: configObject.tierListTitle,
                    discountTiers: discountTiers,
                    note: configObject.note,
                    colors: configObject.colors,
                    conditionType: discount.conditionType,
                    disValueType: discount.disValueType,
                    defaultValue: discount?.defaultValue || "NONE"
                };
            },
            
            prepareUI: function (parent, volDiscountDataForProductPage) {
                // idhr changes krne hein
                let data = volDiscountDataForProductPage.prouctUiDataToBeShown;
                let symbol = gfg.utility.getCurrencySymbol();
                gfg.utility.debugConsole(data);
                let disValueType = data.disValueType;
                let colors = data?.colors;
                let textColor = colors?.text;
                let borderColor = colors?.border;
                let backgroundColor = colors?.background
                const configuration = volDiscountDataForProductPage?.configuration
                // gfgVolDiscountWrapper

                // Check if the product page widget is Enabled or not
                if(configuration?.isEnabled == false){
                    const gfgFVolDiscountContainer = gfg.$("<div>").addClass('gfgVolDiscountContainer');
                    return gfgFVolDiscountContainer;
                }
                
                if(data.conditionType == "COUNT"){
                    let gfgFVolDiscountContainer = gfg.$("<div>").addClass('gfgVolDiscountContainer').addClass("gfgCountDiscount")

                    let titleDiv = gfg.$("<div>").addClass('titleDiv').html(data.discountTitle).css("text-align", "center");
                    
                    let gridDiv = gfg.$("<div>").addClass('gridDiv')
                    
                    for (let i = 0; i < data.discountTiers.length; i++) {
                        
                        let discountTier = data.discountTiers[i];
                        // let qtyLabel = `Buy ${data.discountTiers[i].quantitylabel}`;
                        let qtyLabel = discountTier.text;
                        let priceLabel;
                    

                            
                        
                        if (disValueType == "FIXED_DIS") {
                            // priceLabel = parseFloat(data.discountTiers[i].priceLabel).toFixed(2);
                            // priceLabel = data.discountTiers[i].priceLabel;
                            priceLabel =  symbol + parseFloat(data.discountTiers[i].priceValue).toFixed(2);
                        } else if (disValueType == "PERCENTAGE_DIS") {
                            // priceLabel = `${data.discountTiers[i].discountValue}%`;
                            // priceLabel = `${data.discountTiers[i].discountValue}%`;
                            priceLabel =  symbol + parseFloat(data.discountTiers[i].priceValue).toFixed(2);
                        }
                    
                        let boxDiv = gfg.$("<div>").addClass('gfgGridBox').attr("discount-tier", i + 1).css("background-color",backgroundColor)
                                                                                                            .css("border", "1px solid " + borderColor)         

                    
                        let radioSelectionDiv = gfg.$("<div>").addClass('gfgRadioSelection').attr("discount-tier", i + 1)

                        let radioBtn = gfg.$("<input/>")
                            .addClass('radioButton')
                            .attr("type", "radio")
                            .attr("name", "dicountTierBtn")
                            .attr("discount-tier", i + 1)
                            .val(data.discountTiers[i].quantitylabel);
                        let gfgRadioSelectionLabelDiv = gfg.$("<div>").addClass('gfgRadioSelectionLabel').html(" ");
                        let qtyLabelDiv = gfg.$("<div>").addClass('gfgQtyLabel').html(qtyLabel).css("color", textColor);
                        radioSelectionDiv.append(radioBtn, gfgRadioSelectionLabelDiv);
                    
                        let priceDiv = gfg.$("<div>").addClass("gfgPricesDiv");
                        let compareAtPrice = gfg.$("<div>").addClass("gfgCompareAtPrice").html(data.discountTiers[i].strikethroughValue);
                        let costDiv = gfg.$("<div>").addClass("gfgCostLabel").html(priceLabel);
                        priceDiv.append(compareAtPrice, costDiv);
                        // priceDiv.append(costDiv);
                        let labelAndPriceDiv = gfg.$("<div>").addClass("gfgLabelAndPriceDiv").append(qtyLabelDiv, priceDiv);


                        boxDiv.append(radioSelectionDiv,labelAndPriceDiv);


                        // make a default selection
                        if (i == 0 && data.defaultValue == "FIRST") {
                            boxDiv.addClass('gfgGridBoxSelected');
                            radioBtn.prop("checked", true);
                            gfg.gfgVolDiscount.actions.handleQuantityUpdate();
                        }



                        gfg.$(document).on('click', '.gfgGridBox', function(event) {
                            event.stopPropagation();
                            event.stopImmediatePropagation();
                        
                            let gridBox = gfg.$(this);
                            let discountTier = gridBox.attr("discount-tier");
                            let radioBtn = gridBox.find('.radioButton');
                        
                            if (gridBox.hasClass('gfgGridBoxSelected')) {
                                // If it's already selected, deselect it
                                gridBox.removeClass('gfgGridBoxSelected');
                                radioBtn.prop('checked', false);
                                gfg.gfgVolDiscount.state.triggerResetCount = true;
                            } else {
                                // If it's not selected, select it and deselect others
                                gfg.$('.gfgGridBox').removeClass('gfgGridBoxSelected');
                                gfg.$('.radioButton').prop('checked', false);
                        
                                gridBox.addClass('gfgGridBoxSelected');
                                radioBtn.prop('checked', true);
                            }
                        
                            gfg.gfgVolDiscount.actions.handleQuantityUpdate();
                        });
                        
                    
                        // gfg.$(document).on('click', '.gfgGridBox', function(event) {
                        //     event.stopPropagation();
                        //     event.stopImmediatePropagation();
                        //     // remove it from all the other boxes
                        //     gfg.$('.gfgGridBox').removeClass('gfgGridBoxSelected');
                        //     if (gfg.$(event.target).hasClass('radioButton')) {
                        //        //based on discounttier add the class of gridBoxSelected
                        //         let discountTier = gfg.$(event.target).attr("discount-tier");
                        //         //use discount ter to find the gridBox
                        //         let gridBox = gfg.$(`.gfgGridBox[discount-tier=${discountTier}]`);
                        //         // let gridBox = gfg.$(event.target).closest('.gfgGridBox');
                        //         gridBox.addClass('gfgGridBoxSelected');
                               
                        //     } else {
                        //         let discountTier = gfg.$(event.target).attr("discount-tier");
                        //         //use discount ter to find the gridBox
                        //         let gridBox = gfg.$(`.gfgGridBox[discount-tier=${discountTier}]`);
                        //         gridBox.addClass('gfgGridBoxSelected');
                        //         let radioBtn =  gfg.$(event.currentTarget).find('.radioButton');
                                
                        //         radioBtn.click();
                        //     }


                        //     gfg.gfgVolDiscount.actions.handleQuantityUpdate();

                        // });
                    
                        gridDiv.append(boxDiv);
                    }
                    
                    gfgFVolDiscountContainer.append(titleDiv, gridDiv);
                    
                    // console.log(gfgFVolDiscountContainer, 'container')
                    return gfgFVolDiscountContainer
                }else{
                    return this.prepareBulkUI(parent, volDiscountDataForProductPage)
                }
                  
            },
            
            prepareBulkUI: function(parent, volDiscountDataForProductPage){
                let data = volDiscountDataForProductPage.prouctUiDataToBeShown;
                gfg.utility.debugConsole(data)
                let note = data?.note;
                let discountTitle = data?.discountTitle;
                let colors = data?.colors;
                let textColor = colors?.text;
                let borderColor = colors?.border;
                let backgroundColor = colors?.background

                let gfgFVolDiscountContainer = gfg.$("<div>").addClass('gfgVolDiscountContainer').css("background-color", "")
                                                                                                .css("color", "")
                                                                                                .css("display", "grid")
                                                                                                .css("padding", "5px")
                                                                                                .css("text-align", "center")
                                                                                        

                let titleDiv = gfg.$("<div>").addClass('gfgTitleDiv').html(discountTitle).css("font-weight", "bolder").css("text-align", "center")
                                                                                            .css("font-size", "20px").css("margin", "5px 0px");

                let gridDiv = gfg.$("<div>").addClass('gfgGridDiv').css("border", "black solid 1px").css("border-radius", "5px").css("text-align", "center").css("border-color", borderColor).css("background-color", backgroundColor);
                let noteDiv = gfg.$("<div>").addClass('gfgNoteDiv').html(note).css("margin", "20px 0px 10px 0px").css("color",  textColor)
                // let hr = gfg.$("<hr>").addClass('gfgNulerClass').css("border", "0px").css("height", "1px")
                // .css("width", "85%").css("margin", "auto")


                for (let i = 0; i < data.discountTiers.length; i++) {
                    // < [quantity] , [priceLabel, {strikethroughLabel}] >

                    let quantitylabel = parseFloat(data.discountTiers[i].quantitylabel);
                    let priceLabel = data.discountTiers[i].priceLabel;
                    let strikethroughLabel = data.discountTiers[i].strikethroughLabel;
                    let discountValue = data.discountTiers[i].discountValue;
                    let discountType = data.discountTiers[i].disValueType
                    let discountPrice = data.discountTiers[i].discountPrice
                    let text = data.discountTiers[i].text
                    
                    

                    let boxDiv = gfg.$("<div>").addClass('gfgGridBox').css("text-align", "center").css("padding", "10px").css("margin", "5px 0px").css("font-size", "15px").css("color", textColor);
                    
                    boxDiv.html(text)

                    gridDiv.append(boxDiv);
                }
                // if(note){
                //     gridDiv.append(hr)
                // }
                if(note?.trim() !== ""){
                    gridDiv.append(noteDiv);
                }

                gfgFVolDiscountContainer.append(titleDiv, gridDiv);

                return gfgFVolDiscountContainer
            },
            getVolDiscountDataForProductPage: async function() {

                let productPageId = gfg.state.productPageId
                let productPageHandle = gfg.state.productPageHandle
                let discounts  = gfg.settings.discounts
                let productPageData = undefined
                

                if(productPageHandle){
                    productPageData = await gfg.utility.getProductDataV2(productPageHandle)
                }
                if(!productPageData){
                    return undefined
                }

                if(discounts && discounts.length > 0) {
                }else{
                    return 
                }


                let validVolDiscount = undefined 
                let maxFirstTierVolDiscount = undefined
                //As One product could be present in multiple discount campagin, find which one give the minimum finalPrice
                for(let i = 0; i < discounts.length; i++) {
                    let discount = discounts[i]

                    if(discount.isEnabled == false){
                        continue
                    }

                    if(discount?.isEBIntegrationEnabled){
                        continue
                    }
                    //check if eb integration enabled return

                    let checkIfThisDiscountIsForThisProductPage = undefined
                    //check if this discount is for this product page if yes calculate the final price
                    if(discount?.disProducts?.type == "ALL_PRODUCTS")  {
                        checkIfThisDiscountIsForThisProductPage = true    
                    }
                    if(discount?.disProducts?.type == "COLLECTIONS")  {
                        // let calculateFirstTierFinalPrice = gfg.gfgVolDiscount.f.calculateFirstTierFinalPrice(discount, productPageData)
                        let collections = discount?.disProducts?.collectionsData || []
                        for(let k=0; k < collections?.length; k++){
                            let products = collections[k]?.productList || []
                            for(let j = 0; j < products?.length; j++) {
                                let product = products[j]
                                if(product?.id == productPageId || product?.handle == productPageHandle) {
                                    checkIfThisDiscountIsForThisProductPage = true
                                    break
                                }
                            }
                        } 
                    }
                    if(discount?.disProducts?.type == "SELECTED_PRODUCTS")  {
                        let products = discount?.disProducts?.products
                        for(let j = 0; j < products.length; j++) {
                            let product = products[j]
                            if(product?.id == productPageId || product?.handle == productPageHandle) {
                                checkIfThisDiscountIsForThisProductPage = true
                                break
                            }
                        }    
                    }

                    if(checkIfThisDiscountIsForThisProductPage){
                        let currFirstTierVolDiscount =  parseFloat(discount.rules[0].disValue)
                        if(maxFirstTierVolDiscount == undefined || currFirstTierVolDiscount > maxFirstTierVolDiscount ) {
                            maxFirstTierVolDiscount = currFirstTierVolDiscount
                            validVolDiscount = discount
                            discount.productPageData = productPageData;
                            validVolDiscount.prouctUiDataToBeShown = gfg.gfgVolDiscount.f.prepareUIDataWrapper(discount);
                        }
                    }
                    
                    
                }
                gfg.utility.debugConsole(validVolDiscount, 'valid vol discount')
                return validVolDiscount

            },
            prepareBulkDiscountRulesWidgets: async function(settings) {
                try {
                let gfgBulkDiscountWidgetHTMLWrapper = gfg.$("<div>").addClass('gfgBulkDiscountWidgetHTMLWrapper');
                let gfgBulkDiscountWidgetHTML = gfg.$("<div>").addClass('gfgBulkDiscountWidgetHTML');
                let discounts = settings?.discounts;
                 if(!settings?.discounts || settings.discounts.length == 0) {
                    return;
                 }
                 gfg.state.cartData = await gfg.utility.getCart()
                 for(let i = 0; i < discounts.length; i++) {
                    let currDiscount = discounts[i];
                    if(currDiscount?.cartWidgetConfiguration?.isEnabled) {
                        gfgBulkDiscountWidgetHTML.append(gfg.gfgVolDiscount.f.prepareSingleBulkDiscountRulesWidget(currDiscount));
                        gfgBulkDiscountWidgetHTMLWrapper.append(gfgBulkDiscountWidgetHTML);
                    }
                 }
                 return gfgBulkDiscountWidgetHTMLWrapper;
                } catch(err) {
                    console.log("err inside renderAllDiscountRuleWidgets", err);
                }
            },
            prepareSingleBulkDiscountRulesWidget: function(currBulkDiscount) {
                try {
                    let gfgBulkDiscountSingleWidgetHTML = gfg.$("<div>").addClass('gfgBulkDiscountSingleWidgetHTML');
                    let gfgBulkDiscountSingleWidgetWrapper= gfg.$("<div>").addClass('gfgBulkDiscountSingleWidgetWrapper');
                    
                    let currDiscountIdx = gfg.gfgVolDiscount.f.getIndexOfRuleThatCanBeAppliedAtCurrCartState(currBulkDiscount);
                    let nextDiscountRuleIndex;
                    
                    
                    if (currDiscountIdx == currBulkDiscount.rules.length-1) {
                        return;
                    
                    } else if (currDiscountIdx == -1) {
                        nextDiscountRuleIndex = 0;
                    
                    } else {
                        nextDiscountRuleIndex = currDiscountIdx+1;
                    }
                    
                    let gfgBulkDiscountSingleWidgetIcon = gfg.$("<img>").addClass('gfgBulkDiscountSingleWidgetIcon');
                    gfgBulkDiscountSingleWidgetIcon.attr("src", currBulkDiscount?.cartWidgetConfiguration?.tierConfig[nextDiscountRuleIndex]?.conditionNotMet?.icon);
                    
                    let gfgBulkDiscountSingleWidgetTitle = gfg.$("<div>").addClass('gfgBulkDiscountSingleWidgetTitle');
                    let title = gfg.gfgVolDiscount.f.replaceVolDiscountWidgetVariables(currBulkDiscount, currBulkDiscount?.cartWidgetConfiguration?.tierConfig[nextDiscountRuleIndex]?.conditionNotMet?.title, nextDiscountRuleIndex);
                    gfgBulkDiscountSingleWidgetTitle.html(title);
                    
                    let gfgBulkDiscountSingleWidgetSubTitle = gfg.$("<div>").addClass('gfgBulkDiscountSingleWidgetSubTitle');
                    let subtitle = gfg.gfgVolDiscount.f.replaceVolDiscountWidgetVariables(currBulkDiscount, currBulkDiscount?.cartWidgetConfiguration?.tierConfig[nextDiscountRuleIndex]?.conditionNotMet?.subtitle, nextDiscountRuleIndex);
                    gfgBulkDiscountSingleWidgetSubTitle.html(subtitle);


                    if(title || subtitle){
                        gfgBulkDiscountSingleWidgetHTML.css("background-color", currBulkDiscount?.cartWidgetConfiguration?.globalConfig?.customisations?.backgroundColor || "#ffffff");
                        gfgBulkDiscountSingleWidgetHTML.css("color", currBulkDiscount?.cartWidgetConfiguration?.globalConfig?.customisations?.textColor || "#000000");
                        gfgBulkDiscountSingleWidgetHTML.css("border-color", currBulkDiscount?.cartWidgetConfiguration?.globalConfig?.customisations?.borderColor || "#000000");    
                    }else{
                        return;
                    }

                    gfgBulkDiscountSingleWidgetWrapper.append(gfgBulkDiscountSingleWidgetIcon);
                    gfgBulkDiscountSingleWidgetWrapper.append(gfgBulkDiscountSingleWidgetTitle);
                    gfgBulkDiscountSingleWidgetWrapper.append(gfgBulkDiscountSingleWidgetSubTitle);
                    
                    gfgBulkDiscountSingleWidgetHTML.append(gfgBulkDiscountSingleWidgetWrapper);
                    
                    return gfgBulkDiscountSingleWidgetHTML;
                
                } catch(err) {
                    console.log("err inside prepareSingleBulkDiscountRulesWidget:", err);
                }
            },
            replaceVolDiscountWidgetVariables: function(currBulkDiscountData, text, nextDiscountRuleIndex) {
                try {
                    
                    let currBulkDiscount = JSON.parse(JSON.stringify(currBulkDiscountData));
                    
                    let _cartData = gfg.state.cartData;
                    let CURRENCY = gfg.utility.getCurrencySymbol() || "$";

                    if(currBulkDiscount.disProducts.type == "COLLECTIONS"){
                        let COLLECTIONS = currBulkDiscount?.disProducts.collections.map(collection => collection.title).join(', ');
                        let COLLECTIONS_LINKS = currBulkDiscount?.disProducts.collections.map(collection => `<a href="/collections/${collection.handle}" target="_blank">${collection.title}</a>`).join(', ');

                        // count how many of them are there in the collecton using the "," seperator and then attach ellipsis when more than 4
                        if(COLLECTIONS.split(',').length > 4){
                            COLLECTIONS = COLLECTIONS.split(',').slice(0, 4).join(', ') + "..."
                            //same with links
                            COLLECTIONS_LINKS = COLLECTIONS_LINKS.split(',').slice(0, 4).join(', ') + "..."
                        }

                        text = text.replace("{{COLLECTIONS}}", COLLECTIONS);
                        text = text.replace("{{COLLECTIONS_LINKS}}", COLLECTIONS_LINKS);
                    }
                    if(currBulkDiscount.disProducts.type == "SELECTED_PRODUCTS"){
                        let PRODUCTS = currBulkDiscount?.disProducts.products.map(product => product.title).join(', ');
                        let PRODUCTS_LINKS = currBulkDiscount?.disProducts.products.map(product => `<a href="/products/${product.handle}" target="_blank">${product.title}</a>`).join(', ');


                        // count how many of them are there in the collecton using the "," seperator and then attach ellipsis when more than 4
                        if(PRODUCTS.split(',').length > 4){
                            PRODUCTS = PRODUCTS.split(',').slice(0, 4).join(', ') + "..."
                            //same with links
                            PRODUCTS_LINKS = PRODUCTS_LINKS.split(',').slice(0, 4).join(', ') + "..."
                        }


                        text = text.replace("{{PRODUCTS}}", PRODUCTS);
                        text = text.replace("{{PRODUCTS_LINKS}}", PRODUCTS_LINKS);
                    }
                   
                    if(currBulkDiscount.conditionType == "COUNT") {
                        let conditionValue = parseInt(currBulkDiscount.rules[nextDiscountRuleIndex].conditionValue);
                        let REMAINING_QUANTITY = 0;
                        if(currBulkDiscount.disProducts.type == "ALL_PRODUCTS") {
                            let cartQty = _cartData?.item_count || 0;
                            REMAINING_QUANTITY = conditionValue - cartQty;
                         
                         } else if(currBulkDiscount.disProducts.type == "COLLECTIONS") {
                            let collectionCartData = this.getDataOfProductsPresentInCartFromThisCollection(currBulkDiscount);
                            let totalProductsInCollection = collectionCartData.totalProductsInCollection;
                            REMAINING_QUANTITY = conditionValue - totalProductsInCollection;
                         
                         } else if(currBulkDiscount.disProducts.type == "SELECTED_PRODUCTS") {
                             let productsCartData = this.getDataOfProductsPresentInCartFromThisListOfProducts(currBulkDiscount);
                             let totalProductsInList = productsCartData.totalProductsInList;
                             REMAINING_QUANTITY = conditionValue - totalProductsInList;
                          }
                        text = text.replace("{{REMAINING_QUANTITY}}", REMAINING_QUANTITY);
                    }

                    if(currBulkDiscount.conditionType == "SUBTOTAL") {
                        let conditionValue = parseFloat(currBulkDiscount.rules[nextDiscountRuleIndex].conditionValue);
                        conditionValue = gfg.utility.convertFromStoreCurrencyToCustomer(conditionValue)
                        let REMAINING_AMOUNT = 0;
                        if(currBulkDiscount.disProducts.type == "ALL_PRODUCTS") {
                            // let _totalValue = parseFloat(_cartData.total_price / 100);
                            let _totalValue = parseFloat(_cartData.original_total_price / 100);
                           REMAINING_AMOUNT = conditionValue - _totalValue;

                        } else if(currBulkDiscount.disProducts.type == "COLLECTIONS") {
                           let collectionCartData = this.getDataOfProductsPresentInCartFromThisCollection(currBulkDiscount);
                           let totalValueOfCollection = collectionCartData.totalValueOfCollection;
                           REMAINING_AMOUNT = conditionValue - totalValueOfCollection;

                        
                        } else if(currBulkDiscount.disProducts.type == "SELECTED_PRODUCTS") {
                            let productsCartData = this.getDataOfProductsPresentInCartFromThisListOfProducts(currBulkDiscount);
                            let totalValueOfProducts = productsCartData.totalValueOfProducts;
                            REMAINING_AMOUNT = conditionValue - totalValueOfProducts;
                         }
                        
                        REMAINING_AMOUNT = parseFloat(REMAINING_AMOUNT).toFixed(2)
                        text = text.replace("{{REMAINING_AMOUNT}}", REMAINING_AMOUNT);
                    }
                    text = text.replace(/{{CURRENCY}}/g, CURRENCY);
                    
                    let DISCOUNT = parseFloat(currBulkDiscount.rules[nextDiscountRuleIndex].disValue);
                    text = text.replace("{{DISCOUNT}}", DISCOUNT);
                    return text;

                } catch(err) {
                    console.log("err inside replaceVolDiscountWidgetVariables", err);
                }
            },
            getIndexOfRuleThatCanBeAppliedAtCurrCartState: function(currBulkDiscount) {
                try {
                    let isQtyBasedDiscount = false;
                    let isValueBasedDiscount = false;
            
                    if (currBulkDiscount?.conditionType == "COUNT") {
                        isQtyBasedDiscount = true;
                    } else if (currBulkDiscount?.conditionType == "SUBTOTAL") {
                        isValueBasedDiscount = true;
                    }
            
                    let i = 0;
                    let lastSatisfyingIndex = -1;
            
                    while (i < currBulkDiscount.rules.length) {
                        let currRule = currBulkDiscount.rules[i];
                        let conditionValue = parseFloat(currRule.conditionValue);
            
                        if (isQtyBasedDiscount) {
                            if (currBulkDiscount.disProducts.type == "ALL_PRODUCTS") {
                                let _cartData = gfg.state.cartData;
                                let _totalProducts = _cartData.item_count;
            
                                if (_totalProducts >= conditionValue) {
                                    lastSatisfyingIndex = i;
                                } else {
                                    break;
                                }
                            } else if (currBulkDiscount.disProducts.type == "COLLECTIONS") {
                                let collectionData = this.getDataOfProductsPresentInCartFromThisCollection(currBulkDiscount);
                                let totalProductsInCollection = collectionData.totalProductsInCollection;
            
                                if (totalProductsInCollection >= conditionValue) {
                                    lastSatisfyingIndex = i;
                                } else {
                                    break;
                                }
                            } else if (currBulkDiscount.disProducts.type == "SELECTED_PRODUCTS") {
                                let productsData = this.getDataOfProductsPresentInCartFromThisListOfProducts(currBulkDiscount);
                                let totalProductsInList = productsData.totalProductsInList;
            
                                if (totalProductsInList >= conditionValue) {
                                    lastSatisfyingIndex = i;
                                } else {
                                    break;
                                }
                            }
                        } else if (isValueBasedDiscount) {
                            const _conditionValue =  gfg.utility.convertFromStoreCurrencyToCustomer(conditionValue);
                            if (currBulkDiscount.disProducts.type == "ALL_PRODUCTS") {
                                let _cartData = gfg.state.cartData;
                                // let _totalValue = parseFloat(_cartData.total_price / 100);
                                let _totalValue = parseFloat(_cartData.original_total_price / 100);

                                if (_totalValue >= _conditionValue) {
                                    lastSatisfyingIndex = i;
                                } else {
                                    break;
                                }
                            } else if (currBulkDiscount.disProducts.type == "COLLECTIONS") {
                                let collectionData = this.getDataOfProductsPresentInCartFromThisCollection(currBulkDiscount);
                                let totalValueOfCollection = collectionData.totalValueOfCollection;
            
                                if (totalValueOfCollection >= _conditionValue) {
                                    lastSatisfyingIndex = i;
                                } else {
                                    break;
                                }
                            } else if (currBulkDiscount.disProducts.type == "SELECTED_PRODUCTS") {
                                let productsData = this.getDataOfProductsPresentInCartFromThisListOfProducts(currBulkDiscount);
                                let totalValueOfProducts = productsData.totalValueOfProducts;
                    
                                if (totalValueOfProducts >= _conditionValue) {
                                    lastSatisfyingIndex = i;
                                } else {
                                    break;
                                }
                            }
                        } else {
                            // If the condition is not satisfied, break the loop
                            break;
                        }
            
                        i++;
                    }
                    // `lastSatisfyingIndex` will now hold the index of the last rule for which the condition satisfies
                    return lastSatisfyingIndex;
                } catch(err) {
                    console.log("err inside getIndexOfRuleThatCanBeAppliedAtCurrCartState:", err);
                }
            },  
            getCurrentQuantitySelection: function() {
                let selectedQuantity = gfg.$('input[name=dicountTierBtn]:checked').val();
                if (!selectedQuantity && gfg.gfgVolDiscount.state.triggerResetCount) {
                    gfg.gfgVolDiscount.state.triggerResetCount = false;
                    return 1;
                }
                return selectedQuantity;
            },
            addToCartButtonOverwrite: function () {
                try{
                    // et required states 
                    gfg.gfgVolDiscount.state.isAddToCartButtonOverwrite = true
                    
                    gfg.elements.addToCartBtn.attr("type", "button")
                    gfg.elements.addToCartBtn.attr("disabled", false)
        
                    // @ashfaq did this
                    gfg.elements.addToCartBtn.addClass("gfgAddToCartBtn")
                    
                    gfg.elements.addToCartBtn.unbind().unbind("click").off().off("click");
        
                    gfg.elements.addToCartBtn.on("click",async function (event) {
                            if(event.stopImmediatePropagation){
                                event.stopImmediatePropagation();
                            }

                            let buttonText = gfg.$(this).text();
        
                            // gfg.elements.addToCartBtn.text("adding..");

                            // let setDataForBundlePage = gfg.gfgLinkToBundlePage.f.setDataForBundlePage()
        
                            // gfg.$(this).attr("disabled", true);
                            // setTimeout(() => { gfg.$(this).attr("disabled", false); }, 1000)
                            // gfg.gktGiftCard.action.giftCardAddToCartButton(event)
        
                            //getSelectedVariant
                            let currentVariant = gfg.f.getSelectedVariant();
                            let currentVariantId = currentVariant;

                            // lets get the current Quantity selection made.
                            let currentQuantitySelection =  gfg.gfgVolDiscount.f.getCurrentQuantitySelection();
                            // now add the required quantity to the cart
                            let data = {
                                "id": currentVariantId,
                                "quantity": currentQuantitySelection
                            }
                            gfg.utility.debugConsole(data, 'data')

                            gfg.$(this).append(CONSTANT_LOADING_SPINNER_SVG);



                            let addedToCart = await gfg.utility.addToCart(data)
                            gfg.gfgVolDiscount.state.addToCartClicked = true;

                            // remove the loading spinner
                            gfg.$(this).find(".gfgLoadingSpinner").remove();

                            if(addedToCart){
                                // gfg.$(this).attr("disabled", false);
                                // remove gfg disabled class

                                gfg.$(this).removeClass("gfgDisabled")
                                
                                // add the text back to it
                                // gfg.$(this).text(buttonText);
                                // gfg.elements.addToCartBtn.text("Add To Cart");
                                gfg.gfgVolDiscount.f.executeScriptAfterAddToCart();
                            }else{
                                // gfg.elements.addToCartBtn.text("Add To Cart-failed");
                                // gfg.$(this).text(buttonText);
                                gfg.$(this).removeClass("gfgDisabled")
                                // gfg.$(this).attr("disabled", false);
                            }

                            gfg.gfgVolDiscount.state.addToCartClicked = false;
                            //disable the button for 1 second
                            // setTimeout(() => { gfg.$(this).attr("disabled", false); }, 1000)
                            return
                    })
                    return 
                }catch(error){
                    gfg.utility.debugConsole("error inside addToCartButtonOverwrite", error)
                    // console.log("error inside addToCartButtonOverwrite", error)
                }
            },

            executeScriptAfterAddToCart: function () {
                try{
                    // find cart-drawer and add active class to it
                    // refresh cart drawer section idgf

                    if(gfg.settings.app.executeScriptAfterAddToCart){
                        eval(gfg.settings.app.executeScriptAfterAddToCart)
                    } 

                    // gfg.$(gfg.elements.cartDrawer).addClass("active");
                }catch(err){
                    console.log("err inside executeScriptAfterAddToCart", err)
                }
            },
            
            getDataOfProductsPresentInCartFromThisCollection: function(currBulkDiscount) {
                try {
                    let _cartData = gfg.state.cartData;
                    let totalProductsInCollection = 0;
                    let totalValueOfCollection = 0;
                    let collectionData = currBulkDiscount.disProducts.collectionsData;
                    collectionData?.forEach(collection => {
                        collection?.productList?.forEach(productInCollection => {
                            // Find the matching product in the cart
                            let matchingCartItem = _cartData?.items?.find(cartItem => cartItem.product_id === productInCollection.productId);
            
                            if (matchingCartItem) {
                                totalProductsInCollection += matchingCartItem.quantity;
                                // totalValueOfCollection = parseFloat(totalValueOfCollection). use rount to 2 decimal places
                                totalValueOfCollection = parseFloat(totalValueOfCollection) + parseFloat(matchingCartItem.line_price / 100);
                                totalValueOfCollection = totalValueOfCollection.toFixed(2);
                            }
                        });
                    });
            
                    return { totalProductsInCollection, totalValueOfCollection };
                } catch (err) {
                    console.log("err inside getDataOfProductsPresentInCartFromThisCollection:", err);
                }
            },
            getDataOfProductsPresentInCartFromThisListOfProducts: function(currBulkDiscount) {
                try {
                    let cartData = gfg.state.cartData;
                    const productIdsInCart = cartData.items.map(item => item.product_id);
                
                    let totalProductsInList = 0;
                    let totalValueOfProducts = 0;
                
                    for (const product of currBulkDiscount.disProducts.products) {
                        if (productIdsInCart.includes(parseInt(product.productId))) {
                          for (const item of cartData.items) {
                            if (item.product_id == product.productId) {
                              totalProductsInList += item.quantity;

                              let finalItemPrice = Number(parseFloat(item.price / 100));
                              finalItemPrice = finalItemPrice * item.quantity;
                              totalValueOfProducts += finalItemPrice
                            }
                          }
                        }
                    }
                      
                
                    return {
                        totalProductsInList,
                        totalValueOfProducts
                    };
                } catch(err) {
                    console.log("err inside getDataOfProductsPresentInCartFromThisListOfProducts", err);
                }
            },
            gfgVolumeDiscountFilter: function(modifiedDiscounts){
                let filteredData = [];
                let customerSpecificDiscount = [];
                let discounts = modifiedDiscounts || gfg.settings.discounts;
                if(discounts.length == 0){
                    return;
                }

                //iterate through all the discounts and find the one that is enabled
                for(let i = 0; i < discounts.length; i++){
                    const customerData = gfg.state.activeCustomerData;
                    if(customerData.isCustomerLoggedInBool){
                        // if(length of conditionsLength array is greater then 1)
                        if(discounts[i].conditionsData.conditionsList.length > 0){
                            let conditionOperator = discounts[i].conditionsData.conditionsOperator;
                            let conditionsList = discounts[i].conditionsData.conditionsList;
                            let isDiscountValid = gfg.gfgFreeGift.f.gfgCheckConditionOutcome(conditionsList, conditionOperator);
                            if(isDiscountValid){
                                filteredData.push(discounts[i]);
                                customerSpecificDiscount.push(discounts[i]);
                            }
                        }else{
                            // if length of conditionsLength array is 0
                            filteredData.push(discounts[i]);
                            customerSpecificDiscount.push(discounts[i]);
                        }
                    }else{
                        // if length of conditionsLength array is 0
                        if(discounts[i].conditionsData.conditionsList.length == 0){
                            filteredData.push(discounts[i]);
                        }
                    }
                }
                gfg.gfgVolDiscount.state.customerSpecificDiscount = customerSpecificDiscount;
                return filteredData;

            },
            gfgVolumeDiscountCheckConditions: function(){
                try{
                    
                }catch(err){
                    gfg.utility.debugConsole('gfgVolumeDiscountCheckConditions ', err);
                }
            }
            
            
        },
        actions: {
            handleQuantityUpdate: function(){
                // get the selected quantity use the gfgSe
                // fnd the radioButton thats selected and checked and get the value
                //check if gfgCountDiscount
                if (gfg.$(".gfgCountDiscount").length > 0) {
                    let selectedQuantity = gfg.gfgVolDiscount.f.getCurrentQuantitySelection();

                    if (isNaN(selectedQuantity)){
                        return;
                    }
                    // update the quantity in the cart
    
                    //now use the selected Quantity value and update the input field present on the page
                    // use selectors 
                    // gfg.elements. find quantitySelectors wiht this code
                    // hide the quantity selector aswell
                    gfg.$(gfg.elements.quantityBtn).addClass("gfgHide")
                    let quantitySelectorEle = gfg.$(gfg.elements.quantityBtn);

                    // check if it is an input button, if not then find the input button inside it
                    // let quantitySelectorEleInput = quantitySelectorEle.find("input"); find only if its not input
                    let quantitySelectorEleInput = quantitySelectorEle.is("input") == false ? quantitySelectorEle.find("input"): [];
                    if(quantitySelectorEleInput.length > 0){
                        quantitySelectorEle = quantitySelectorEleInput;
                    }

                    // if(quantitySelectorEle.length > 0  and it accepts value as input)
                    if(quantitySelectorEle.length > 0 && quantitySelectorEle.is("input")){
                        quantitySelectorEle.val(selectedQuantity);
                    }else {
                        if (gfg.gfgVolDiscount.state.isAddToCartButtonOverwrite == false) {
                            gfg.gfgVolDiscount.f.addToCartButtonOverwrite();
                        }
                    }
                }else{
                    return
                }
            },
        }

    },
    gfgBogoFeature:{
        state:{
            isEnabled: false,
            shopName: "",
            rules: [],
            configuration: {},
            textConfig: {},
            showBogoNotificationSettings: {},
            schedulerSettings: {},
            gfgBogoProductsShopifyDataByVariantIds: {},
            gfgBogoProductsCustomerGetsShopifyDataByVariantIds: {},
            gfgBogoProductsShopifyDataByHandles: {},
            bogoProductsShopifyData: [],
            bogoProductCustomerGetsShopifyData: [],
            isCartUpdatedByUs: false,
            bucketCount: 0,
            cartData: {},
            fallBackImageUrl: 'https://d1cjetlwgplgi5.cloudfront.net/public/freeGiftDymmyImage.png',
            multiLangData: {},
            activeBogoIndex: 0,
        },
        init: async function (settings, parent) {
            try{
                let productPageHandle = gfg.state.productPageHandle;
                let bogoArray = gfg.settings.boGoFeature;
                if (bogoArray.length == 0) {
                    gfg.utility.debugConsole("bogo array is empty");
                    return;
                }

                if(!productPageHandle){
                    productPageHandle = gfg.f.getProductPageHandle();
                    gfg.state.productPageHandle = productPageHandle;
                }
                await gfg.gfgBogoFeature.f.gfgGetBogoFeatureoData(productPageHandle);
                gfg.gfgBogoFeature.f.gfgBogoChangeLanguageConfigs();
                gfg.gfgBogoFeature.initialize(settings, parent);
                gfg.utility.debugConsole("finally running bogo feature");
                gfg.f.addPoweredByBlock();
                gfg.gfgBogoFeature.f.registerEvents();
            }catch(error){
                gfg.utility.debugConsole("error inside bogo init", error)
            }
        },
        initialize: async function (settings, parent) {
            try{
                if (parent == "PRODUCT_PAGE" ) {
                    // console.log("page handle", gfg.state.productPageHandle)
                    let productPageHandle = gfg.state.productPageHandle
                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    if(!productPageHandle){
                        productPageHandle = gfg.f.getProductPageHandle();
                    }
                    ifBogoProductValid = gfg.gfgBogoFeature.f.gfgCheckIfProductValidForBogo(productPageHandle)
    
                    let checkIfBogoCampaignScheduleIsActive = gfg.gfgBogoFeature.f.checkIfBogoCampaignScheduleIsActive();
                    let isEBIntegrationEnabled = gfg.settings.boGoFeature[activeBogoIndex].isEBIntegrationEnabled;
                    const isBogoWidgetAllowedOnProductPage = gfg.settings.boGoFeature[activeBogoIndex]?.showBoGoNotificationSettings?.customerBuysProdOrCollection;
                    const areAllConditionsMet = ifBogoProductValid && checkIfBogoCampaignScheduleIsActive && !isEBIntegrationEnabled && isBogoWidgetAllowedOnProductPage !=false;
                    if(areAllConditionsMet){
                        let htmlContent = gfg.gfgBogoFeature.f.gfgBogoFeaturePrepareUI(ifBogoProductValid);
                        gfg.gfgBogoFeature.f.insertIntoPageWrapper(htmlContent, parent);
                        gfg.utility.debugConsole("render on prod page")
                    }
                }

            }catch(error){
                gfg.utility.debugConsole("error inside bogo initialize", error)
            }
        },
        f: {
            insertIntoPageWrapper: function (gfgMsgHtml, parent) {
                try {
                    if(parent == "PRODUCT_PAGE") {
                        // gfgBogoFeatureWrapperProductEle
                        let gfgBogoFeatureWrapperProductEle = gfg.$(".gfgBogoWrapper")
                        let gfgBogoFeatureWrapperProductEleClone = gfgMsgHtml.clone();
                        gfgBogoFeatureWrapperProductEle.each(function (index) {
                                    gfg.$(this).html(gfgBogoFeatureWrapperProductEleClone);
                                });
                    } else if(parent == "CART_PAGE") {

                    }
                    // gfg.f.addPoweredByBlock();

                } catch (error) {
                    gfg.utility.debugConsole(error)
                }
            },
            gfgBogoChangeLanguageConfigs: function () {
                try{
                    if(gfg.settings.languageData){
                    
                        let locale = gfg.utility.getLocale();
    
                        if(gfg.settings.languageData && gfg.settings.languageData.languageMode == "SINGLE"){
                            return;
                        }
            
                        if(!gfg.settings.languageData[locale]){
                            return;
                        }
    
                        gfg.settings.boGoFeature[0].textConfig = gfg.settings.languageData[locale].bogoFeature.textConfig;
                    }
                }catch(error){
                    gfg.utility.debugConsole("error inside gfgBogoChangeLanguageConfigs", error)
                }
            },
            // getCartData:async function(){
            //     let cartData = await gfg.utility.getCart()
            //     let filteredData = gfg.gfgBogoFeature.f.gfgBogoFeatureFilterData(cartData);
            //     return filteredData
            // },
            gfgGetBogoFeatureoData: async function(productPageHandle){
                try{
                    if(gfg?.gfgBogoFeature?.state?.bogoProductsShopifyData.length > 0){
                        return;
                    }
                    
                    // let cartData = await gfg.utility.getCart();
                    // get filtered cartData from cartData
                    // gfg.gfgBogoFeature.state.cartData = await gfg.gfgBogoFeature.f.getCartData()

                    //check in session storage
                    let gfgBogoProductsShopifyDataFromSessionStorage = sessionStorage.getItem("gfgBogoProductsShopifyData")
                    let gfgBogoProductsShopifyDataFromSessionStorageByHandle;
                    let gfgBogoGetProductsShopifyDataFromSessionStorageByHandle
                    let activeProductHandle = productPageHandle;
                    let activeBogoIndex = gfg.gfgBogoFeature.f.getActiveBogoIndex(activeProductHandle);
                    // if(gfgBogoProductsShopifyDataFromSessionStorage && gfgBogoProductsShopifyDataFromSessionStorage.length > 0){
                    //     gfgBogoProductsShopifyDataFromSessionStorageByHandle = gfg.utility.convertArrayToObject(JSON.parse(gfgBogoProductsShopifyDataFromSessionStorage), "handle")
                    // }
                    // let counterForHandlesPickedFromSessionStorage = 0;
                    let productHandleArray = [];
                    let productGetArray = [];
                    let rules = gfg.settings.boGoFeature[activeBogoIndex].rules;
                    let bogoBuyProductsDataHandleArray = [];
                    let bogoBuyProductsShopifyData = [];
                    let bogoProductCustomerGetsShopifyDataArray = [];
                    for(let i=0; i< rules.length; i++){                      
                        let {
                            bogoBuyProductsShopifyDataByHandles,
                            tempBogoBuyProductsShopifyData,
                            activeProductHandleArray
                        } = await gfg.gfgBogoFeature.f.gfgBogoPrepareDataForCustomerBuys(rules[i], activeProductHandle);

                        let {
                            currentProductGetArray,
                            tempBogoGetProductsShopifyData,
                        } = await gfg.gfgBogoFeature.f.gfgBogoPrepareDataForCustomerGets(rules[i], activeProductHandleArray, i, activeBogoIndex);
                        
                        productHandleArray = [...productHandleArray, ...activeProductHandleArray];
                        productGetArray = [...productGetArray, ...currentProductGetArray];
                        
                        bogoProductCustomerGetsShopifyDataArray.push(tempBogoGetProductsShopifyData);
                        bogoBuyProductsShopifyData.push(tempBogoBuyProductsShopifyData);
                        bogoBuyProductsDataHandleArray.push(bogoBuyProductsShopifyDataByHandles);
                    }
                    gfg.gfgBogoFeature.state.gfgBogoProductsShopifyDataByHandles = bogoBuyProductsDataHandleArray;
                    gfg.gfgBogoFeature.state.bogoProductsShopifyData = bogoBuyProductsShopifyData;
                    gfg.gfgBogoFeature.state.bogoProductCustomerGetsShopifyData = bogoProductCustomerGetsShopifyDataArray;

                    sessionStorage.setItem("gfgBogoProductsShopifyData", JSON.stringify(gfg.gfgBogoFeature.state.bogoProductsShopifyData))


                }catch(error){
                    gfg.utility.debugConsole("error in function gfgGetBogoFeatureoData", error)
                }
            },
            gfgBogoPrepareDataForCustomerBuys: async function(rule, activeProductHandle){
                try{
                    let currentProductHandleArray = [];
                    let customerBuysData = rule.customerBuysData;
                    let productArray = customerBuysData.products;
                    
                    let collectionsArray = customerBuysData.collectionsData;
    
                    for(j = 0; j< productArray.length; j++){
                        let handle = productArray[j].handle;
                        currentProductHandleArray.push(handle);
                    }
                
                    for(j = 0; j< collectionsArray.length; j++){
                        for(k = 0; k< collectionsArray[j].productList.length; k++){
                            let handle = collectionsArray[j].productList[k].handle;
                            currentProductHandleArray.push(handle);
                        }
                    }
    
                    if(!currentProductHandleArray.includes(activeProductHandle)){
                        return;
                    }
    
                    let activeProductHandleArray = [activeProductHandle]
    
                    const promises = activeProductHandleArray.map(async (activeProductHandle) => {
                        // check if freeGiftsShopifyDataFromSessionStorageByHandle[handle] is there or not
                        // if(gfgBogoProductsShopifyDataFromSessionStorageByHandle && gfgBogoProductsShopifyDataFromSessionStorageByHandle[activeProductHandle]){
                        //     // counterForHandlesPickedFromSessionStorage++;
                        //     return gfgBogoProductsShopifyDataFromSessionStorageByHandle[activeProductHandle]
                        // }else{
                            const productData = gfg.utility.getProductDataV2(activeProductHandle)
                            return productData;
                        // }
                    });
    
                    let tempBogoBuyProductsShopifyData = await Promise.all(promises);
    
                    // to remove out of stock products -> filter out false values
                    tempBogoBuyProductsShopifyData = tempBogoBuyProductsShopifyData.filter(value => value !== false);
    
                    // filter out for the variants that are present in rules
                    let bogoShopifyData = gfg.gfgBogoFeature.f.gfgBogoFilterForActiveVariants(tempBogoBuyProductsShopifyData, rule.customerBuysData.products);
                    tempBogoBuyProductsShopifyData = bogoShopifyData;
    
                    let bogoProductsShopifyData = JSON.parse(JSON.stringify(tempBogoBuyProductsShopifyData))
    
                    // convert array to an object with the key as handle-name
                    let bogoBuyProductsShopifyDataByHandles = gfg.utility.convertArrayToObject(bogoProductsShopifyData, "handle");
    
                    // convert to an object with key as variant id
                    let currentCustomerBuysVariantIdMap = gfg.utility.createMapForVariantId(bogoBuyProductsShopifyDataByHandles)
                    let customerBuysVariantIdMap = gfg.gfgBogoFeature.state.gfgBogoProductsShopifyDataByVariantIds;
                    gfg.gfgBogoFeature.state.gfgBogoProductsShopifyDataByVariantIds = gfg.utility.combineObjects(currentCustomerBuysVariantIdMap, customerBuysVariantIdMap);
    
                    return {
                        bogoBuyProductsShopifyDataByHandles,
                        tempBogoBuyProductsShopifyData,
                        activeProductHandleArray
                    }
                }catch(error){
                    gfg.utility.debugConsole("error in function gfgBogoPrepareDataForCustomerBuys", error)
                }

            },
            gfgBogoPrepareDataForCustomerGets:async function(rule, activeProductHandleArray, ruleCounter, activeBogoIndex){

                try{
                    let customerBuysData = rule.customerBuysData;
                let productArray = customerBuysData.products;
                let bogoRule = rule.bogoRule;
                let productArrayGets = rule.customerGets
                let collectionsArray = customerBuysData.collectionsData;
                let productGetArray = [];

                if(bogoRule == "BUY_X_GET_Y"){    
                    for(j = 0; j< productArrayGets.length; j++){
                        let handle = rule.customerGets[j].product.handle;
                        productGetArray.push(handle);
                    }
                }else{
                    gfg.settings.boGoFeature[activeBogoIndex].rules[ruleCounter].customerGets[0].product = gfg.settings.boGoFeature[activeBogoIndex].rules[ruleCounter].customerBuysData.products;
                    productGetArray = activeProductHandleArray;
                }
                

                const promisesForGetProducts = productGetArray.map(async (handle) => {
                    
                        const productData = gfg.utility.getProductDataV2(handle)
                        return productData;
                    // }
                });
    
                
                
                let tempBogoGetProductsShopifyData = await Promise.all(promisesForGetProducts)

                // to remove out of stock products -> filter out false values
                tempBogoGetProductsShopifyData = tempBogoGetProductsShopifyData.filter(value => value !== false);
                

                // filter out the variants that are present in rules
                let customerBogoData = gfg.gfgBogoFeature.f.gfgBogoFilterForActiveVariantsForCustomerGets(tempBogoGetProductsShopifyData, rule.customerGets[0].product, bogoRule);
                tempBogoGetProductsShopifyData = customerBogoData;

                
                let bogoProductCustomerGetsShopifyData = JSON.parse(JSON.stringify(tempBogoGetProductsShopifyData))
                // convert array to an object with the key as handle-name
                let gfgBogoProductsCustomerGetsShopifyDataByHandles = gfg.utility.convertArrayToObject(bogoProductCustomerGetsShopifyData, "handle")

                

                // convert to an object with key as variant id
                let currentCustomerGetsVariantIdMap = gfg.utility.createMapForVariantId(gfgBogoProductsCustomerGetsShopifyDataByHandles);
                let customerGetsVariantIdMap =  gfg.gfgBogoFeature.state.gfgBogoProductsCustomerGetsShopifyDataByVariantIds;
                gfg.gfgBogoFeature.state.gfgBogoProductsCustomerGetsShopifyDataByVariantIds = gfg.utility.combineObjects(currentCustomerGetsVariantIdMap, customerGetsVariantIdMap);

                return {
                    currentProductGetArray: productGetArray,
                    tempBogoGetProductsShopifyData
                }
                }catch(error){
                    gfg.utility.debugConsole("error in function gfgBogoPrepareDataForCustomerGets", error)
                }
            },
            gfgBogoFilterForActiveVariants: function(shopifyData, rulesData){
                //only filtering products not collections, since collection products have all variants
                try{
                    const bogoProductsShopifyData = shopifyData;
                    const customerBuysData = rulesData;

                    let filteredProducts = [];
                    // Create a Set of variant IDs from customerBuysData for efficient lookup
                    for(let i = 0; i < bogoProductsShopifyData.length; i++) {
                        let product = bogoProductsShopifyData[i];

                        // select variantType for finding if product originally has multiple variants or not
                        if(product.variants.length > 1){
                            product.variantType = "MULTIPLE";
                        }else{
                            product.variantType = "SINGLE";
                        }
                        let equivalentProduct = customerBuysData.find(p => p.productId == product.id);
                        if(equivalentProduct){
                            for(let j = 0; j < product.variants.length; j++) {
                                let variant = product.variants[j];
                                let variantId = variant.id;
                                // check if given variant with variant id exists in equivalentProduct
                                let equivalentVariant = equivalentProduct.variants.find(v => v.variantId == variantId);
                                if(!equivalentVariant) {
                                    product.variants.splice(j, 1);
                                    j--;
                                }
                            }
                        }
                        
                        filteredProducts.push(product);
                    }
                    return filteredProducts;
                }catch(error){
                    gfg.utility.debugConsole("error in function gfgBogoFilterForActiveVariants", error);
                }

            },
            gfgBogoFilterForActiveVariantsForCustomerGets: function(shopifyData, rulesData, bogoRule){
                try{
                    if(bogoRule == "BUY_X_GET_Y"){

                        const bogoProductsShopifyData = shopifyData;
                        const productData = rulesData;

                        let filteredProducts = [];
                        for(let i=0; i< bogoProductsShopifyData.length; i++){
                            let product = bogoProductsShopifyData[i];

                            // select variantType for finding if product originally has multiple variants or not
                            if(product.variants.length > 1){
                                product.variantType = "MULTIPLE";
                            }else{
                                product.variantType = "SINGLE";
                            }

                            for(let j=0; j< product.variants.length; j++){
                                let variant = product.variants[j];
                                let equivalentVariant = productData.variants.find(v => v.variantId == variant.id);
                                if(!equivalentVariant){
                                    product.variants.splice(j, 1);
                                    j--;
                                }
                            }
                            
                            filteredProducts.push(product);
                        }


                        return filteredProducts
                    }else{
                        return gfg.gfgBogoFeature.f.gfgBogoFilterForActiveVariants(shopifyData, rulesData)
                    }

                }catch(error){
                    gfg.utility.debugConsole("error in function gfgBogoFilterForActiveVariantsForCustomerGets", error);
                }
            },
            // gfgBogoFeatureFilterData: function(cartData){
            //     let config = gfg.settings.boGoFeature[0];
            //     if (!config) {
            //         return cartData; // Return original cartData if there's no configuration
            //     }
            
            //     let excludeSubscriptionProducts = config.bogoProductEligibility == "EXCLUDE_SUBSCRIPTION_PRODUCTS";
            //     let includeOnlySubscriptionProducts = config.bogoProductEligibility == "INCLUDE_ONLY_SUBSCRIPTION_PRODUCTS";
                
            //     let allowAllProducts = config.bogoProductEligibility == "ALL_PRODUCTS"  ||  (!excludeSubscriptionProducts && !includeOnlySubscriptionProducts);


            //     if(allowAllProducts){
            //         return cartData
            //     }
                
            //     let filteredCartData = {
            //         ...cartData,
            //         items: [],
            //         total_price: 0,
            //         total_weight: 0,
            //         total_discount: 0,
            //         items_subtotal_price: 0,
            //         requires_shipping: false
            //     };
            
            //     for (let i = 0; i < cartData.items.length; i++) {
            //         let item = cartData.items[i];
            //         let isBogoProduct = item.properties &&  item.properties["_bogo_product"] == "true";
            
            //         let shouldIncludeItem = isBogoProduct || (!excludeSubscriptionProducts && !includeOnlySubscriptionProducts); // Include by default if isBogoProduct or neither condition is set
                    
            //         let productIsSubscription =  item && item.selling_plan_allocation && item.selling_plan_allocation.selling_plan;
            //         if (!isBogoProduct) {
            //             if (excludeSubscriptionProducts) {
            //                 shouldIncludeItem =  !productIsSubscription;
            //             } else if (includeOnlySubscriptionProducts) {
            //                 shouldIncludeItem = productIsSubscription;
            //             }
            //         }

            //         // if(isBogoProduct){

            //         //     item.price = 0
            //         //     item.quantity = 1
            //         //     item.discounted_price = 0
            //         //     item.original_price = 0
            //         // }
            
            //         if (shouldIncludeItem) {
            //             // Inline logic to add item to filteredCartData
            //             filteredCartData.items.push(item);
            //             filteredCartData.total_price += item.quantity * item.price;
            //             filteredCartData.total_weight += item.quantity * item.grams;
            //             filteredCartData.total_discount += (item.discounted_price || item.price) * item.quantity;
            //             filteredCartData.items_subtotal_price += item.original_price * item.quantity;
            //             filteredCartData.requires_shipping = filteredCartData.requires_shipping || item.requires_shipping;
            //         }
            //     }
            
            //     filteredCartData.item_count = filteredCartData.items.length;
            //     return filteredCartData;
            // },
            gfgCheckIfProductValidForBogo:function(productPageHandle){
                
                // check if productPageHandle is present gfgBogoProductsShopifyDataByHandles
                // if present then return true
                try{
                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    let isHandlePresent = false
                    let gfgBogoProductsShopifyDataByHandles = gfg.gfgBogoFeature.state.gfgBogoProductsShopifyDataByHandles;
                    let rules = gfg.settings.boGoFeature[activeBogoIndex].rules;
                    for(let i=0; i< gfgBogoProductsShopifyDataByHandles.length; i++){
                        let activeRule = rules[i];
                        let bogoProductsOfRule = gfgBogoProductsShopifyDataByHandles[i];
                        isHandlePresent = Object.keys(bogoProductsOfRule).includes(productPageHandle);
    
                        if (isHandlePresent) {
                            gfg.utility.debugConsole(`The handle '${productPageHandle}' is present.`);
                            let product = bogoProductsOfRule[productPageHandle];
                            product.rule = activeRule;
                            product.ruleIndex = i;
                            return product;
                        } else {
                            gfg.utility.debugConsole(`The handle '${productPageHandle}' is not present.`);
                        }
                    }
    
                    return isHandlePresent;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgCheckIfProductValidForBogo", error)
                }
            },
            checkIfBogoProductPresentOfGivenRule: function(items, bogoProducts){
                // search in items, for item with properties _bogo_product: true
                
                try{

                    let matchingItems = [];
                    const bogoProductsInCartOnly =  items.filter(item => item.properties && item.properties._bogo_product == "true");
                    console.log("bogoProductsInCartOnly", bogoProductsInCartOnly);

                    bogoProductsInCartOnly.forEach(item => {
                        bogoProducts.forEach(cond => {
                          cond.variants.forEach(variant => {
                            if (variant.variantId == item.variant_id && item.quantity >= cond.quantity) {
                              matchingItems.push({ item, quantity: item.quantity, availedCount: parseInt(item.quantity / cond.quantity) });
                            }
                          });
                        });
                      });
                    
                      return matchingItems;

                    
                }catch(error){
                    console.log("error in checkIfBogoProductPresentOfGivenRule", error)
                }

            },
            getActiveBogoIndex: function(activeProductHandle){
                try {

                    let bogoArray = gfg.settings.boGoFeature;
                    for(let i=0; i<bogoArray.length; i++){
                        
                        let rules = bogoArray[i].rules;
                        let currentProductHandleArray = [];

                        for(let j=0; j<rules.length; j++){
                            let rule = rules[j];
                            let customerBuysData = rule.customerBuysData;
                            let productArray = customerBuysData.products;
                            let collectionsArray = customerBuysData.collectionsData;

                            for(j = 0; j< productArray.length; j++){
                                let handle = productArray[j].handle;
                                currentProductHandleArray.push(handle);
                            }
                        
                            for(j = 0; j< collectionsArray.length; j++){
                                for(k = 0; k< collectionsArray[j].productList.length; k++){
                                    let handle = collectionsArray[j].productList[k].handle;
                                    currentProductHandleArray.push(handle);
                                }
                            }
            
                            if(currentProductHandleArray.includes(activeProductHandle)){
                                gfg.gfgBogoFeature.state.activeBogoIndex = i;
                                return i;
                            }
                        }
                    }

                    return -1;
                    
                } catch (err) {
                    console.log("err inside getActiveBogo:", err);
                }
            },
            gfgAddBogoProductToCart: async function(productObject){
                try{

                    let items = [];
            	let currentCartItems = gfg.state.gfgFreeGiftCartData.items;
            	//just check that the freeGiftInCart is in stock or notl
            	let isCurrentVariantInStock = gfg.gfgBogoFeature.state.gfgBogoProductsCustomerGetsShopifyDataByVariantIds && gfg.gfgBogoFeature.state.gfgBogoProductsCustomerGetsShopifyDataByVariantIds[productObject.product.variant_id]?.available || false;
            	if (!isCurrentVariantInStock) {
            		return false
            	}

                let BogoProductInCart = currentCartItems.filter((product) => {
                    // do it based on variant Id
                    return product.variant_id == productObject.product.variantId
                })

                if (BogoProductInCart.length > 0) {
                    for (let i = 0; i < BogoProductInCart.length; i++) {
                        let BogoProductInCartLineItemKey = BogoProductInCart[i].key;
                        let currentQuantity = BogoProductInCart[i].quantity;
                        let items = {
                            id: BogoProductInCartLineItemKey,
                        };
                        // use changeCart 
                        let bogoProductData = await gfg.utility.changeCart(items);
                        //add the same product again but with quantity 1
                        // and no properties
                        items = []
                        items.push({
                            id: productObject.product.variantId,
                            quantity: currentQuantity
                        })
                        bogoProductData = await gfg.utility.addToCartV2({
                            items: items
                        })


                        if (bogoProductData) {
                            gfg.gfgBogoFeature.state.isCartUpdatedByUs = true;
                        } else {
                            return false; // If any update fails, return false
                        }
                    }
                    return true; // If all updates succeed, return true
                } else {
                    items.push({
                        id: productObject.product.variant_id,
                        quantity: productObject.quantity || 1,
                    })
                    let bogoProductData = await gfg.utility.addToCartV2({
                        items: items
                    })
                    if (bogoProductData) {
                        gfg.gfgBogoFeature.state.isCartUpdatedByUs = true
                        return true
                    }
                    return false
                }

                }catch(error){
                    gfg.utility.debugConsole("gfgAddBogoProductToCart", error)
            		return false;
                }

            },
            gfgBogoFeaturePrepareUI: function(productObject){
                try{
                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    let configs = gfg.settings.boGoFeature[activeBogoIndex].configuration
                    let gfgBogoContainer = gfg.$("<div>").addClass('gfgBogoContainer');
                    gfgBogoContainer.css("border-color", configs.borderColor || "#CDCDCD");
                    gfgBogoContainer.css("color", configs.fontColor || "#000000");
                    gfgBogoContainer.css("background-color", configs.bgColor || "#FFFFFF");
                    let gfgBogoTitleContainer = gfg.gfgBogoFeature.f.gfgBogoFeaturePrepareUITitle();
                    let gfgStackedUI = gfg.gfgBogoFeature.f.gfgBogoFeaturePrepareStackedUI(productObject);
                    let notificationMessage = gfg.gfgBogoFeature.f.gfgBogoPrepareNotificationUI();
    
                    gfgBogoContainer.append(gfgBogoTitleContainer);
                    gfgBogoContainer.append(gfgStackedUI);
                    gfgBogoContainer.append(notificationMessage);
    
                    return gfgBogoContainer;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoFeaturePrepareUI", error);
                }

            },
            checkIfBogoCampaignScheduleIsActive: function(){
                try {
                    // use campaignScheduleData object of free gift and check if it is active or not
                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    let campaignScheduleData = gfg.settings.boGoFeature[activeBogoIndex].campaignScheduleData;


                    if(!campaignScheduleData){
                        return true
                    }
                     
                    if (campaignScheduleData?.campaignSchedule != "SCHEDULED"){
                        return true
                    }

                    if(campaignScheduleData?.campaignSchedule == "SCHEDULED"){
                        let currentDateUTC = new Date().toISOString();
                        let startDateTime_UTC = campaignScheduleData.startDateTime_UTC;
                        let endDateTime_UTC = campaignScheduleData.endDateTime_UTC;
                
                        if (currentDateUTC >= startDateTime_UTC && currentDateUTC <= endDateTime_UTC) {
                            console.log('Campaign is active');
                            return true;
                        } else {
                            console.log('Campaign is not active');
                            return false;
                        }
                    }

                    return true;
                    
                } catch (err) {
                    gfg.utility.debugError("checkIfFreeGiftCampaignScheduleIsActive", err)
                    return true;
                }
                
            },
            gfgBogoPrepareNotificationUI: function(){
                try{
                    let notificationMessageContainer = gfg.$("<div>").addClass('gfgBogoNotificationMessageContainerUI');
                    let notificationMessage = gfg.$("<div>").addClass('gfgBogoNotificationMessage');
                    notificationMessageContainer.append(notificationMessage);
                    notificationMessageContainer.addClass("gfgNotificationInactive")
                    // notificationMessage.text();
                    return notificationMessageContainer
                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoPrepareNotificationUI", error);
                }
            },
            gfgBogoCreateNotificationMessage: function(message){
                // find gfgBogoNotificationMessage and add the message to it
                try{
                    let notificationMessage = gfg.$(document).find(".gfgBogoNotificationMessageContainerUI");
                    let notifTextDiv = gfg.$(document).find(".gfgBogoNotificationMessage");
                    notifTextDiv.text(message);
    
                    // add the class gfgNotificationActive for next 5 seconds and remove it after that
                    notificationMessage.addClass("gfgBogoNotificationMessageContainer")
                    notificationMessage.addClass("gfgNotificationActive")
                    notificationMessage.removeClass("gfgNotificationInactive")
    
                    // notification only removed when user refreshes screen
                    // setTimeout(function(){
                    //     notificationMessage.removeClass("gfgBogoNotificationMessageContainer")
                    //     notificationMessage.removeClass("gfgNotificationActive")
                    //     notificationMessage.addClass("gfgNotificationInactive")
                    // }, 5000);
                    return;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoCreateNotificationMessage", error);
                }
            },
            gfgBogoFeaturePrepareUITitle: function(){
                let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                const titleConfigs = gfg.settings.boGoFeature[activeBogoIndex].textConfig?.title || "Buy More Get More";
                const colorConfigs = gfg.settings.boGoFeature[activeBogoIndex]?.configuration?.titleBgColor || "#2C2A41";
                try{
                    let gfgBogoTitleContainer = gfg.$("<div>").addClass('gfgBogoTitleContainer').css("background-color", colorConfigs);
                    let gfgBogoTitle = gfg.$("<div>").addClass('gfgBogoTitle');
                    let gfgBogoTitleHeader = gfg.$("<div>").addClass('gfgBogoTitleHeader').html(titleConfigs);
                    // let gfgBogoTitleSubText = gfg.$("<div>").addClass('gfgBogoTitleSubText').html(titleConfigs.note);
                
                    gfgBogoTitle.append(gfgBogoTitleHeader);
                    // gfgBogoTitle.append(gfgBogoTitleSubText);
                    gfgBogoTitleContainer.append(gfgBogoTitle);
                    return gfgBogoTitleContainer;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoFeaturePrepareUITitle", error);
                }
            },
            gfgBogoFeaturePrepareStackedUI:function(productObject){
                try{
                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    let textConfigs = gfg.settings.boGoFeature[activeBogoIndex].textConfig;
                    let colorConfigs = gfg.settings.boGoFeature[activeBogoIndex].configuration?.claimBtnBgColor || "#2C2A41";
                    let availText = textConfigs?.claimButtonText || "Click To Avail" ;    
                    let gfgBogoFeatureStackContainer = gfg.$("<div>").addClass('gfgBogoFeatureStackContainer');
                    let gfgBogoCustomerBuysContainer = gfg.gfgBogoFeature.f.gfgBogoFeaturePrepareUIBuyProductSection(productObject);
                    let gfgBogoCustomerGetsContainer = gfg.gfgBogoFeature.f.gfgBogoFeaturePrepareUICustomerGetsSection(productObject);
                     let gfgButtonActionsContainer = gfg.$("<div>").addClass('gfgButtonActionsContainer');
                    let gfgBogoActionButton = gfg.$("<div>").addClass('gfgBogoActionButton').text(availText).css("background-color", colorConfigs);
                    gfgBogoActionButton.addClass('validActionButton');
                    
                     // gfgBogoActionButton onCLick consoles avail button clicked
                    // yahan pr karenge check if valid for user, toh hi active class denge vrna nahi denge
                    gfgButtonActionsContainer.append(gfgBogoActionButton);
                    gfgBogoFeatureStackContainer.append(gfgBogoCustomerBuysContainer);
                    gfgBogoFeatureStackContainer.append(gfgBogoCustomerGetsContainer);
                    gfgBogoFeatureStackContainer.append(gfgButtonActionsContainer);

                    return gfgBogoFeatureStackContainer;
                    
                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoFeaturePrepareStackedUI", error);
                }
            },
            gfgBogoFeaturePrepareUIBuyProductSection: function(productObject){
                try{
                    let rule = productObject.rule;
                    let gfgBogoBuyProductContainer = gfg.$("<div>").addClass('gfgBogoFeaturePrepareUICustomerBuysSection');

                    let gfgProductCard = gfg.gfgBogoFeature.f.gfgBogoFeatureBuyProductCardPrepareUI(productObject, rule.customerBuysData.qty);
                    gfgBogoBuyProductContainer.append(gfgProductCard);


                    return gfgBogoBuyProductContainer;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoFeaturePrepareUIBuyProductSection", error);
                }
            },
            gfgBogoFeatureCreateOperatorForCard: function(operatorText){
                try{

                    let operatorTextSrc = "https://d1cjetlwgplgi5.cloudfront.net/public/%2B.svg"
                    let gfgBogoFeatureCreateConditionForCardContainer = gfg.$("<div>").addClass('gfgBogoFeatureCreateOperatorForCard');
                    let gfgBogoFeatureCreateLine = gfg.$("<div>").addClass('gfgBogoFeatureCreateLine');
                    let gfgBogoFeatureCreateCapsule = gfg.$("<div>").addClass('gfgBogoFeatureCreateCapsule')
                    let gfgBogoFeatureCreateCapsuleContentContainer = gfg.$("<div>").addClass('gfgBogoFeatureCreateCapsuleContentContainer');
                    let gfgBogoFeatureCreateCapsuleContent = gfg.$("<img>").addClass('gfgBogoFeatureCreateCapsuleContent').attr("src", operatorTextSrc);
                    gfgBogoFeatureCreateCapsuleContentContainer.append(gfgBogoFeatureCreateCapsuleContent);
                    gfgBogoFeatureCreateCapsule.append(gfgBogoFeatureCreateCapsuleContentContainer);
                    gfgBogoFeatureCreateLine.append(gfgBogoFeatureCreateCapsule);
                    gfgBogoFeatureCreateConditionForCardContainer.append(gfgBogoFeatureCreateLine);
    
                    return gfgBogoFeatureCreateConditionForCardContainer;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoFeatureCreateOperatorForCard", error);
                }
            },
            gfgBogoFeatureBuyProductCardPrepareUI: function(productData , quantity){
                try{
                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    let pillText = gfg.settings?.boGoFeature[activeBogoIndex]?.textConfig?.pillText || quantity;
                    let textConfig = gfg.settings.boGoFeature[activeBogoIndex].textConfig;

                    const imagePath = productData.images.length === 0 ? 
                    'https://d1cjetlwgplgi5.cloudfront.net/public/freeGiftDymmyImage.png' : productData.images[0];

                    let gfgBuyProductCardContainer = gfg.$("<div>").addClass('gfgBuyProductCardContainer');
                    

                    let gfgProductImageContainer = gfg.$("<div>").addClass('gfgProductImageContainer');
                    let gfgProductImage = gfg.$("<img>").addClass('gfgProductImage').attr("src", imagePath);
                    gfgProductImageContainer.append(gfgProductImage);
                    let gfgBuyProductDetailSectionContainer = gfg.$("<div>").addClass('gfgBuyProductDetailSectionContainer');
                    
                    let gfgBuyProductHeader = gfg.$("<div>").addClass('gfgBuyProductHeader').text(productData.title);
                    // variant
                    let gfgBuyProductVariantContainer = gfg.$("<div>").addClass('gfgBuyProductVariantContainer');
                    let gfgBuyProductVariantHeader = gfg.$("<div>").addClass('gfgBuyProductVariantHeader')
                         // select tag for all variants
                    let gfgBuyProductVariantSelect = gfg.$("<select>").addClass('gfgBuyProductVariantSelect');
                    productData.variants.forEach(variant => {
                        // only available variant be prepared added
                        if(variant.available == true){
                            let price = (variant.price);
                            price = price/100;
                            let gfgBuyProductVariantOption = gfg.$("<option>").addClass('gfgBuyProductVariantOption').text(variant?.public_title || variant?.title).attr('value', price);
                            gfgBuyProductVariantOption.attr('data-variant-id', (variant.variant_id));
                            gfgBuyProductVariantOption.attr('data-count', quantity)
                            gfgBuyProductVariantSelect.append(gfgBuyProductVariantOption);
                        }
                    });

                    if(productData.variantType == "SINGLE"){
                        // hide variant section
                        gfgBuyProductVariantContainer.addClass('gfgVariantContainerHidden');
                    }

                    gfgBuyProductVariantHeader.append(gfgBuyProductVariantSelect);
                    gfgBuyProductVariantContainer.append(gfgBuyProductVariantHeader);
                    gfgBuyProductDetailSectionContainer.append(gfgBuyProductHeader, gfgBuyProductVariantContainer);
                    let gfgBuyProductPriceContainer = gfg.$("<div>").addClass('gfgBuyProductPriceContainer');
                    let gfgBuyProductPriceContainerBox = gfg.$("<div>").addClass('gfgBuyProductPriceContainerBox');
                    let currencySymbol = gfg.utility.getCurrencySymbol();
                    let price =(productData.variants[0].price);
                    price = price/100;
                    let productPrice = currencySymbol + price.toFixed(2);
                    let gfgBuyProductPriceContainerBoxDiscountedPrice = gfg.$("<div>").addClass('gfgBuyProductPriceContainerBoxDiscountedPrice').text(productPrice);
                    // let gfgBuyProductPriceContainerBoxOriginalPrice = gfg.$("<div>").addClass('gfgBuyProductPriceContainerBoxOriginalPrice');
                    gfgBuyProductPriceContainerBox.append(gfgBuyProductPriceContainerBoxDiscountedPrice);
                    // gfgBuyProductPriceContainerBox.append(gfgBuyProductPriceContainerBoxOriginalPrice);
                    gfgBuyProductPriceContainer.append(gfgBuyProductPriceContainerBox);
                    let gfgBuyProductQuantityCapsule = gfg.gfgBogoFeature.f.gfgRenderBuyProductTextPill(pillText);
                    gfgBuyProductPriceContainer.append(gfgBuyProductQuantityCapsule);
                    gfgBuyProductDetailSectionContainer.append(gfgBuyProductPriceContainer)
                         // add to cart button
                    let gfgBuyProductAddToCartButtonContainer = gfg.$("<div>").addClass('gfgBuyProductAddToCartButtonContainer');
                    let gfgBuyProductAddToCartButton = gfg.$("<div>").addClass('gfgBuyProductAddToCartButton').text(textConfig.addText);
                    gfgBuyProductAddToCartButtonContainer.append(gfgBuyProductAddToCartButton);
                    gfgBuyProductCardContainer.append(gfgProductImageContainer);
                    gfgBuyProductCardContainer.append(gfgBuyProductDetailSectionContainer)
                    // gfgBuyProductCardContainer.append(gfgBuyProductAddToCartButtonContainer)

                    return gfgBuyProductCardContainer;

                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoFeatureBuyProductCardPrepareUI", error);
                }
            },
            gfgRenderBuyProductTextPill: function(quantity){
                try{
                    let gfgBuyProductTextPillContainer = gfg.$("<div>").addClass('gfgBuyProductTextPillContainer');
                    let gfgBuyProductTextPillText = gfg.$("<div>").addClass('gfgBuyProductTextPillText').text(`Qty ${quantity} `);
                    gfgBuyProductTextPillContainer.append(gfgBuyProductTextPillText);
    
                    return gfgBuyProductTextPillContainer;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgRenderBuyProductTextPill", error);
                }
            },
            triggerUpdateActivities: function(){
                try{
                    if (gfg.settings.app.executeCustomScriptAfterBogoAddition) {
                        eval(gfg.settings.app.executeCustomScriptAfterBogoAddition);
                    }
                }catch(error){
                    gfg.utility.debugConsole("error in triggerUpdateActivities", error);
                }
            },
            gfgBogoFeaturePrepareUICustomerGetsSection: function(productObject){
                try{
                    let rule = productObject.rule;
                    let customerGets = productObject.rule.customerGets
                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    let textConfig = gfg.settings.boGoFeature[activeBogoIndex].textConfig;
                    let operatorText = textConfig?.bogoGetOperatorText || "+";
                    let gfgBogoFeaturePrepareUICustomerGetsSection = gfg.$("<div>").addClass('gfgBogoFeaturePrepareUICustomerGetsSection');
                    customerGets.forEach(customerGet => {
                        let gfgRenderCustomerGetsProductCardPrepareUI = gfg.gfgBogoFeature.f.gfgRenderCustomerGetsProductCardPrepareUI(customerGet, rule.bogoRule, productObject);
                        let gfgBogoFeaturePrepareUICustomerGetsSectionDivider = gfg.gfgBogoFeature.f.gfgBogoFeatureCreateOperatorForCard(operatorText)
                        gfgBogoFeaturePrepareUICustomerGetsSection.append(gfgBogoFeaturePrepareUICustomerGetsSectionDivider);
                        gfgBogoFeaturePrepareUICustomerGetsSection.append(gfgRenderCustomerGetsProductCardPrepareUI);
                    })
    
                    return gfgBogoFeaturePrepareUICustomerGetsSection;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgBogoFeaturePrepareUICustomerGetsSection", error);
                }
            },
            gfgRenderCustomerGetsProductCardPrepareUI: function(data , bogoRule, productObject){
                try{
                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    let pillText = gfg.settings?.boGoFeature[activeBogoIndex]?.textConfig?.pillText || data.qty;
                    let productData = data.product;
                    let bogoProductCustomerGetsShopifyData = gfg.gfgBogoFeature.state.bogoProductCustomerGetsShopifyData;

                    // select boGoProductCustomerGetsShopifyData based on ruleIndex
                    bogoProductCustomerGetsShopifyData = bogoProductCustomerGetsShopifyData[productObject.ruleIndex];

                    let product = bogoProductCustomerGetsShopifyData.find(product => product.handle == productData.handle);
                    if(bogoRule == "BUY_X_GET_X"){
                        product = productObject;
                    }
                    let quantity = data.qty;
                    
                    let discountValue = parseFloat(data.discountValue);
                    let discountType = data.discountType;
                    let currencySymbol = gfg.utility.getCurrencySymbol();
                    let gfgRenderCustomerGetsProductCardPrepareUI = gfg.$("<div>").addClass('gfgRenderCustomerGetsProductCardPrepareUI');
    
                    let gfgProductImageContainer = gfg.$("<div>").addClass('gfgProductImageContainer');
                    let gfgProductImage = gfg.$("<img>").addClass('gfgProductImage').attr("src", product.images[0]);
                    gfgProductImageContainer.append(gfgProductImage);
    
                    let gfgCustomerGetsProductContent = gfg.$("<div>").addClass('gfgCustomerGetsProductContent');
    
                    // title and price
                    let gfgCustomerGetsProductTitleContainer = gfg.$("<div>").addClass('gfgCustomerGetsProductTitleContainer').text(product.title);
                    // gfgCustomerGetsProductTitleContainer.innerText = productData.title;
                    gfgCustomerGetsProductContent.append(gfgCustomerGetsProductTitleContainer);
    
                    let gfgBuyProductVariantContainer = gfg.$("<div>").addClass('gfgCustomerGetsVariantContainer');
                    let gfgBuyProductVariantHeader = gfg.$("<div>").addClass('gfgBuyProductVariantHeader')
    
                    // select tag for all variants
                    let gfgBuyProductVariantSelect = gfg.$("<select>").addClass('gfgBuyProductVariantSelectForCustomerGets');
                    product.variants.forEach(variant => {
                        // only available variant be prepared added
                        if(variant.available == true){
                            let price = (variant.price);
                            price = price/100;
                            let productPrice = price;
                            let gfgBuyProductVariantOption = gfg.$("<option>").addClass('gfgBuyProductVariantOption').text(variant.title).attr('value', productPrice).attr('data-variantid', variant.variantId);
                            gfgBuyProductVariantOption.attr('data-variant-id', (variant.id));
                            gfgBuyProductVariantOption.attr('data-count', quantity);
                            gfgBuyProductVariantSelect.append(gfgBuyProductVariantOption);
    
                            if(discountType == "PERCENTAGE"){
                                let discountedPriceOfProduct = productPrice - (productPrice * discountValue) / 100;
                                discountedPriceOfProduct = discountedPriceOfProduct.toFixed(2);
                                discountedPriceOfProduct = currencySymbol + parseFloat(discountedPriceOfProduct);
                                gfgBuyProductVariantOption.attr("data-discounted-price", discountedPriceOfProduct);
                            }else if(discountType == "AMOUNT"){
                                let discountedPriceOfProduct = productPrice - discountValue;
                                discountedPriceOfProduct = currencySymbol + discountedPriceOfProduct;
                                gfgBuyProductVariantOption.attr("data-discounted-price", discountedPriceOfProduct);
                            }
                        }
                        
                    });

                    if(product.variantType == "SINGLE"){
                        // hide variant section
                        gfgBuyProductVariantContainer.addClass('gfgVariantContainerHidden');
                    }
    
                    gfgBuyProductVariantHeader.append(gfgBuyProductVariantSelect);
    
                    gfgBuyProductVariantContainer.append(gfgBuyProductVariantHeader);
    
                    let gfgBuyProductPriceContainer = gfg.$("<div>").addClass('gfgBuyProductPriceContainerForCustomerGets');
                        let gfgBuyProductPriceContainerBox = gfg.$("<div>").addClass('gfgBuyProductPriceContainerBox');
                        let gfgBogoGetProductsPillText = gfg.gfgBogoFeature.f.gfgRenderBuyProductTextPill(pillText);
                        let price = (product.variants[0].price);
                        price = price/100;
                        let discountedPriceOfProduct = currencySymbol + price;
                        let originalPriceOfProduct = currencySymbol + price;
                        
                        if(discountType == "PERCENTAGE"){
                            discountedPriceOfProduct = price - (price * discountValue) / 100;
                            discountedPriceOfProduct = discountedPriceOfProduct.toFixed(2);
                            discountedPriceOfProduct = currencySymbol + discountedPriceOfProduct;
                            // gfgBuyProductVariantOption.attr("data-discounted-price", discountedPriceOfProduct);
                        }else if(discountType == "AMOUNT"){
                            discountedPriceOfProduct = price - discountValue;
                            discountedPriceOfProduct = currencySymbol +  parseFloat(discountedPriceOfProduct)/100;
                            // gfgBuyProductVariantOption.attr("data-discounted-price", discountedPriceOfProduct);
                        }
    
                        let gfgBuyProductPriceContainerBoxDiscountedPrice = gfg.$("<div>").addClass('gfgBuyProductPriceContainerBoxDiscountedPrice').text(discountedPriceOfProduct);
                        gfgBuyProductPriceContainerBoxDiscountedPrice.addClass('gfgBogoRedTextClass')
                        let gfgBuyProductPriceContainerBoxOriginalPrice = gfg.$("<div>").addClass('gfgBuyProductPriceContainerBoxOriginalPrice').text(originalPriceOfProduct);
    
                    // if discountValue is 0 or undfined then dont append gfgBuyProductPriceContainerBoxOriginalPrice
                    if(discountValue != 0 && discountValue != undefined){
                        gfgBuyProductPriceContainerBoxOriginalPrice.addClass('gfgBuyProductPriceContainerBoxOriginalPriceStriked');
                        gfgBuyProductPriceContainerBox.append( gfgBuyProductPriceContainerBoxDiscountedPrice, gfgBuyProductPriceContainerBoxOriginalPrice, gfgBogoGetProductsPillText);
                    }else{
                        gfgBuyProductPriceContainerBox.append(gfgBuyProductPriceContainerBoxOriginalPrice);
                    }
    
                    gfgBuyProductPriceContainer.append(gfgBuyProductVariantContainer, gfgBuyProductPriceContainerBox);
                    gfgCustomerGetsProductContent.append(gfgBuyProductPriceContainer);
    
    
    
                    gfgRenderCustomerGetsProductCardPrepareUI.append(gfgProductImageContainer, gfgCustomerGetsProductContent)
    
    
                    return gfgRenderCustomerGetsProductCardPrepareUI;
                }catch(error){
                    gfg.utility.debugConsole("error in gfgRenderCustomerGetsProductCardPrepareUI ", error);
                }
            },
            registerEvents: function(){
                gfg.$(document).on('click', '.gfgBogoActionButton', async function(event) {
                    event.preventDefault();

                    // stopping the event from bubbling up
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    

                    let activeBogoIndex = gfg.gfgBogoFeature.state.activeBogoIndex;
                    let element = gfg.$(event.currentTarget);
                    gfg.utility.debugConsole("avail button clicked");
                    let actionButton = gfg.$(document).find('.gfgBogoActionButton');
                    let textConfig = gfg.settings.boGoFeature[activeBogoIndex].textConfig;
                    let buttonTextAdding = textConfig?.buttonText?.adding || "Adding...";
                    let buttonTextAdded = textConfig?.buttonText?.added || "Added";
                    let buttonTextOutOfStock = textConfig?.buttonText?.outOfStock || "Out of Stock";
                    let failedMessageNotification = textConfig?.failedMessageNotification || "Promotion not applied, please check cart";

                    actionButton.text(buttonTextAdding);
                    actionButton.addClass('invalidActionButton');

                    let container = gfg.$(document).find('.gfgCustomerGetsProductContent');
                    let selectedVariant = container.find('.gfgBuyProductVariantSelectForCustomerGets')
                    let variantId = selectedVariant[0].selectedOptions[0].attributes[2].value
                    let quantity = selectedVariant[0].selectedOptions[0].attributes[3].value

                    let selectedCustomerVariant = gfg.$(document).find('.gfgBuyProductVariantSelect');
                    let customerVariantId = selectedCustomerVariant[0].selectedOptions[0].attributes[2].value
                    let selectedProductCount = selectedCustomerVariant[0].selectedOptions[0].attributes[3].value
                    
                    let productDetails = gfg.gfgBogoFeature.state.gfgBogoProductsCustomerGetsShopifyDataByVariantIds[variantId]
                    gfg.utility.debugConsole("product ->", productDetails)
                    const bogoPromise = await gfg.utility.addToCart({
                        "id": productDetails.variant_id,
                        "quantity": parseFloat(quantity)
                    })
                    const addToCartPromise = await gfg.utility.addToCart({
                        "id": customerVariantId,
                        "quantity": parseFloat(selectedProductCount)
                    })

                    if((bogoPromise == false) || (addToCartPromise == false)){
                        // send notification , process failed, out of stock error, please check cart
                        gfg.gfgBogoFeature.f.gfgBogoCreateNotificationMessage(failedMessageNotification)
                        actionButton.text(buttonTextOutOfStock);
                    }else{
                        actionButton.text(buttonTextAdded);
                    }

                    // let cartData = await gfg.gfgBogoFeature.f.getCartData()
                    // gfg.gfgBogoFeature.state.cartData = cartData;

                    gfg.gfgBogoFeature.f.triggerUpdateActivities();
                    
                });

                gfg.$(document).on('click', '.gfgBuyProductAddToCartButton', function(event) {
                    event.preventDefault();
                    let parent = gfg.$(event.currentTarget).parent().parent()
                    let selectedVariant = parent.find('.gfgBuyProductVariantSelect')
                    let selectedPrice = selectedVariant[0].value
                    // let variantId = selectedOption.data("variant-id");
                    let variantId = selectedVariant[0].selectedOptions[0].attributes[2].value
                    gfg.utility.debugConsole(selectedPrice, ' -> selected price')
                    gfg.utility.debugConsole('variant id ->', variantId)
                    // Update the displayed price
                    // let gfgBuyProductPriceContainerBoxDiscountedPrice = parent.find('.gfgBuyProductPriceContainerBoxDiscountedPrice');
                    // gfgBuyProductPriceContainerBoxDiscountedPrice.text(selectedPrice);
                });

                gfg.$(document).on('change', '.gfgBuyProductVariantSelect', function(event) {
                    try{
                        event.preventDefault();
                        let parent = gfg.$(event.currentTarget).parent().parent()
                        let selectedVariant = parent.find('.gfgBuyProductVariantSelect')
                        let selectedPrice = parseFloat(selectedVariant[0].value)
                        // console.log(selectedPrice, ' -> selected price')
                        let variantId = selectedVariant[0].selectedOptions[0].attributes[2].value
                        let variantIdMap = gfg.gfgBogoFeature.state.gfgBogoProductsShopifyDataByVariantIds
                        let productDetails = variantIdMap[variantId]
                        gfg.utility.debugConsole("productDetails ->", productDetails)
                        // Update the displayed price
                        let gfgBuyProductPriceContainerBoxDiscountedPrice = parent.closest('.gfgBuyProductDetailSectionContainer').find('.gfgBuyProductPriceContainerBoxDiscountedPrice');
                        let userCurrency = gfg.utility.getCurrencySymbol()
                        gfgBuyProductPriceContainerBoxDiscountedPrice.text(userCurrency + selectedPrice);
                        let imageTag = parent.closest('.gfgProductImageContainer').find('.gfgProductImage');
                        imageTag.attr('src', `https:` + productDetails.image);
                    }catch(error){
                        gfg.utility.debugConsole("error in registerEvents -> onChange -> gfgBuyProductVariantSelect", error);
                    }
                });

                gfg.$(document).on('change', '.gfgBuyProductVariantSelectForCustomerGets', function(event) {
                    try{
                        event.preventDefault();
                        let parent = gfg.$(event.currentTarget).parent().parent()
                        let selectedVariant = parent.find('.gfgBuyProductVariantSelectForCustomerGets')
                        let selectedPrice = selectedVariant[0].value
                        
                        // read attributes data-discounted-price
                        let discountedPrice = selectedVariant[0].selectedOptions[0].attributes[4].value

                        // console.log(selectedPrice, ' -> selected price')
                        let variantId = selectedVariant[0].selectedOptions[0].attributes[2].value
                        let variantIdMap = gfg.gfgBogoFeature.state.gfgBogoProductsCustomerGetsShopifyDataByVariantIds
                        let productDetails = variantIdMap[variantId]
                        console.log("productDetails ->", productDetails)
                        // Update the displayed price
                        let gfgBuyProductPriceContainerBoxDiscountedPrice = parent.closest('.gfgRenderCustomerGetsProductCardPrepareUI').find('.gfgBuyProductPriceContainerBoxDiscountedPrice');
                        let gfgBuyProductPriceContainerBoxOriginalPrice = parent.closest('.gfgRenderCustomerGetsProductCardPrepareUI').find('.gfgBuyProductPriceContainerBoxOriginalPrice');
                        let userCurrency = gfg.utility.getCurrencySymbol()
                        gfgBuyProductPriceContainerBoxDiscountedPrice.text(discountedPrice)
                        gfgBuyProductPriceContainerBoxOriginalPrice.text(userCurrency + selectedPrice);
                        let imageTag = parent.closest('.gfgProductImageContainer').find('.gfgProductImage');
                        imageTag.attr('src', `https:` + productDetails.image);
                    }catch(error){
                        gfg.utility.debugError("error in registerEvents -> onChange -> gfgBuyProductVariantSelectForCustomerGets", error);
                    }
                });
            }

        },
        actions: {},
    }
}

window.gfg = gfg;

let gfgCodeActive = false;
document.addEventListener("DOMContentLoaded", function(event) { 
    //do work
    // check if its bundle builder product execute the rest of the flow
    console.log("GFG FREE GIFT")
    if(gfgCodeActive == false){
        gfgCodeActive = true;
        gfgUtils.f.loadJquery(function (jqueryRefObj) {
            gfg.$ = jqueryRefObj;
                gfg.f.initialize(gfg.$);
        })
    }
});

setTimeout(function(){
    try{
        if(gfgCodeActive == false){
            gfgCodeActive = true;
            gfgUtils.f.loadJquery(function (jqueryRefObj) {
                gfg.$ = jqueryRefObj;
                    gfg.f.initialize(gfg.$);
            })
        }
    }catch(err){
        console.log("err before gfg inititalize", err)
    }

}, 3000)