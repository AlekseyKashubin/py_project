/**
 * @overview
 * - LEVAR frontend script for shopify activation 
 * - abc
 * - No dependencies.
 * 
 * @author levar_team
 * @see https://levar.io/home
 */

(function(window, document) {
  'use strict';
  console.log(`<<< Running LEVAR Shopify Script (Development) - February 27 2024 11:40 >>>`);
  // NICE TO HAVE
  // TO DO - Add functions to levar object?
  // TO DO - Default bar close button change to left arrow on hover?
  // TO DO - Move event listeners to levar object or function? - Create applyListeners function w/ switch case for activation type
  // TO DO - Make modal entrance/exits sexier
  // TO DO - Add delay to opacity transition on activations
  // TO DO - Update levar player activation to support levar debut so we can continue to phase that out
  // TO DO - COMMENTS - add description of function below function title
  // TO DO - Animate icons on hover
  // TO DO - Use store settings for custom colors / fonts / copy / icons
  // TO DO - Hover icon over featured image like zoom but to activate 3D, clicking any where on featured image activates 3D
  // TO DO - Remove comments and minify before upload to server
  // TO DO - Update readme.md to be documentation for each function and waterfall flow - connect to confluence page so new commits update docs automatically, Table of Contents

  // Reset session token if not on pdp page and not on pdp preview
  if (window.levar_blocker || (!window.location.pathname.includes('/products/') && !window.location.pathname.includes('products_preview'))) {
    // If post-purchase page send levar analytics conversion event
    if (window.levar) triggerConversionEvent();
    return;
  }
  try {
    // Create window.levar object and populate with currently available values
    window.levar = createLevarObject();

    // Initialize the master script
    levar.init();
  } catch(e) {
    // Case where either of the functions above failed to execute properly
    console.error('levar.js failed to load', e)
  };


  /**
   **************************************
   * Initialize Script ******************
   **************************************
   */

  function init() { 
    // Call LEVAR get activation API and get response data
    getActivation().then(activation_response => {
      console.log('<<< LEVAR activation_response >>>', activation_response);

      // Block Script if activation response does not return a model_3d_id
      if ((!activation_response.model_3d_id && !activation_response.static_vto_face_0 && !activation_response.static_viewer_0 && activation_response.ar_experience_type != 'levar_try_on') || activation_response.statusCode !== 200) {
        console.log('<<*** BLOCKED - Asset Not Availabe For Selected Variant ***>>');
        disableButtons();
        // Remove LEVAR loaded class from body
        document.body.classList.remove(levar.ids.body_classes.levar_loaded);
        // Attach variant change listener events
        variantChangeListener(function(){});
        return;
      }

      // Use activation response data to set LEVAR window object values
      initializeSession(activation_response);

      // Enable activations
      setActivations();
    });
  };

  /**
   **************************************
   * Initialize Session *****************
   **************************************
   */

  function initializeSession(activation_response) {
    // Populate levar.info
    initializeLevarInfo(activation_response);

    // Populate levar.config
    initializeLevarConfig(activation_response);

    // Execute function for first levar.init only - includes levar.session data
    firstInitializeSession(activation_response);
  }

  /**
   **************************************
   * Initialize levar.info **************
   **************************************
   */

  function initializeLevarInfo(activation_response) {
    levar.info.ar_experience_type = (activation_response.ar_experience_type && activation_response.ar_experience_type != 'None') ? activation_response.ar_experience_type : null;
    levar.info.asset_ready = (!activation_response.model_3d_id || activation_response.statusCode !== 200) ? false : true;
    levar.info.auto_launch_ar = activation_response.auto_launch_ar ? levar.ids.activation_response_ids.enabled_id : levar.ids.activation_response_ids.disabled_id;
    levar.info.billboard_status = activation_response.billboard_status ? true : false;
    levar.info.custom_button = activation_response.custom_button ? true : false;
    levar.info.custom_text = activation_response.custom_text ? activation_response.custom_text : { qr_header: levar.info.custom_text.qr_header, qr_footer: levar.info.custom_text.qr_footer };
    levar.info.debut_toggle = activation_response.asset_theme === levar.ids.activation_response_ids.debut_id ? true : false;
    levar.info.direct_qr = activation_response.direct_qr ? true : false;
    levar.info.fullscreen = activation_response.fullscreen ? levar.ids.activation_response_ids.enabled_id : levar.ids.activation_response_ids.disabled_id;
    levar.info.levar_player = activation_response.asset_theme === levar.ids.activation_response_ids.player_id ? true : false;
    levar.info.model_3d_id = activation_response.model_3d_id ? activation_response.model_3d_id : null;
    levar.info.model_placement = activation_response.model_placement ? activation_response.model_placement : null;
    levar.info.pdp_variant_switch = activation_response.pdp_variant_switch ? true : false;
    levar.info.preload_viewer = activation_response.preload_viewer ? true : false;
    levar.info.static_vto_face_0 = activation_response.static_vto_face_0 ? activation_response.static_vto_face_0 : null;
    levar.info.static_viewer_0 = activation_response.static_viewer_0 ? activation_response.static_viewer_0 : null;
    levar.info.store_id = activation_response.store_id ? activation_response.store_id : null;
    levar.info.translation_inactive = activation_response.translation_inactive ? true : false;
    levar.info.view_in_ar = activation_response.view_in_ar ? true : false;
    levar.info.view_in_space_off = activation_response.view_in_space_off ? true : false;
    // Do this after setting all of the above activations from the activation response so the data is available
    levar.info.default_bar = (!levar.info.custom_button && !levar.info.debut_toggle && !levar.info.direct_qr && !levar.info.levar_player) ? true : false;
  }

  /**
   **************************************
   * Initialize levar.config ************
   **************************************
  */

  function initializeLevarConfig(activation_response) {
    // Compile AR experience viewer url (try on) and save in levar object for later use
    // NOTE: Why are we not using activation_response for the model ??
    let store_id = levar.info.store_id.replace(/./g, (c, i) => i == 3 ? '-' : c);
    levar.config.ar_viewer_url = `${levar.config.ar_domain}${store_id}/${levar.info.static_vto_face_0 ? '?model='+levar.info.static_vto_face_0 : '?variant='+levar.info.store_variant_id}`;

    // Compile Model Viewer URL
    // levar.config.static_viewer_url = `${levar.config.static_viewer_domain}/?model=${levar.info?.static_viewer_0}`;
  }

  /**
   **************************************
   * Initialize Session - First Time ****
   **************************************
  */

  function firstInitializeSession(activation_response) {
    // If session has already been initialized then return to avoid running multiple times, otherwise continue
    if(levar.session_info.initialized) return;

    // Check to see if there is a levar_pixel param in the url to override levar_pixel cookie - case user starts on desktop opens viewer on mobile and exits viewer to return to pdp
    var query_string = window.location.search,
        url_params = query_string ? new URLSearchParams(query_string) : null,
        levar_viewer_pixel = (url_params && url_params.has('levar_pixel_id')) ? url_params.get('levar_pixel_id') : null;

    if (levar_viewer_pixel) {
      setCookie(levar.ids.cookie_ids.levar_pixel_id, levar_viewer_pixel, 365, true);
      levar.session_info.levar_pixel_id = levar_viewer_pixel;
    }

    var activation_ids = levar.ids.activation_ids,
        activation_ids_array = [],
        found_activations = [],
        photo_box = document.getElementById(levar.ids.target_ids.master_target_id),
        new_activation = '',
        activation_element = '',
        activation_id_array = [],
        activation_type = '';

    // Add data attributes if old IDs are being used
    if (photo_box) photo_box.setAttribute('data-levar-viewer', 'imbed');
    var billboard_container = document.getElementById(levar.ids.billboard_id);
    if (billboard_container) { billboard_container.setAttribute('data-levar-viewer', 'billboard'); billboard_container.style = levar.styles.viewer_container; }
    levar.elements.billboard_container = document.querySelector('[data-levar-viewer="billboard"]');

    if (document.querySelector('[data-levar-viewer="imbed"]')) levar.info.imbed_viewer = true;

    for (const activation_id in activation_ids) {
      activation_type = '';
      // If array loop array and push individual items to variable array
      if (Array.isArray(activation_ids[activation_id])) {
        activation_id_array = activation_ids[activation_id];

        for (var i = 0; i < activation_id_array.length; i++) {
          activation_ids_array.push(activation_id_array[i]);
          activation_element = document.getElementById(activation_id_array[i]);
          // If element exists in DOM push activation id to found activations array
          if (activation_element && !found_activations.includes(activation_id_array[i])) {
            found_activations.push(activation_id_array[i]);
            // Backwards compatibility to add data attributes to elements using old ids
            switch (activation_id_array[i]) {
              case levar.ids.activation_ids.ar_button_id+'-mobile':
              case levar.ids.activation_ids.ar_button_id:
                if (!activation_element.hasAttribute('data-levar-activation')) activation_element.setAttribute('data-levar-activation', 'ar');
                activation_type = 'ar';
                break;
              case levar.ids.activation_ids.qr_button_id+'-mobile':
              case levar.ids.activation_ids.qr_button_id:
                if (!activation_element.hasAttribute('data-levar-activation')) activation_element.setAttribute('data-levar-activation', 'qr');
                activation_type = 'qr';
                break;
              default:
                if (!activation_element.hasAttribute('data-levar-activation')) activation_element.setAttribute('data-levar-activation', '3d');
                if ((activation_id_array[i] == levar.ids.activation_ids.debut_button_id) && (!activation_element.hasAttribute('data-levar-style'))) activation_element.setAttribute('data-levar-style', 'toggle');
                activation_type = '3d';
                break;
            }
            // Remove inline onclick event from theme (old ga, klaviyo and mobile btn helper)
            if (activation_element.hasAttribute('onclick')) activation_element.removeAttribute('onclick');

            // Fallback for activations that don't have inline click events - Clone and replace element to remove old ga, klaviyo and mobile btn helper on click events from theme
            new_activation = activation_element.cloneNode(true);
            activation_element.parentNode.replaceChild(new_activation, activation_element);

            // Add event listener to launch viewer on activation element click if activations have not already been set to prevent event listener from being added multiple times
            // activation_element.addEventListener('click', (event) => launchViewer(activation_type, activation_id === levar.ids.activation_ids.debut_button_id ? true : false, event));
          }
        }
      } else {
        // Push activation id to variable array
        activation_ids_array.push(activation_ids[activation_id]);
        activation_element = document.getElementById(activation_ids[activation_id]);
        // If element exists in DOM push activation id to found activations array
        if (activation_element && !found_activations.includes(activation_id)) {
          found_activations.push(activation_ids[activation_id]);
          // Backwards compatibility to add data attributes to elements using old ids
          switch (activation_ids[activation_id]) {
            case levar.ids.activation_ids.ar_button_id+'-mobile':
            case levar.ids.activation_ids.ar_button_id:
              if (!activation_element.hasAttribute('data-levar-activation')) activation_element.setAttribute('data-levar-activation', 'ar');
              activation_type = 'ar';
              break;
            case levar.ids.activation_ids.qr_button_id+'-mobile':
            case levar.ids.activation_ids.qr_button_id:
              if (!activation_element.hasAttribute('data-levar-activation')) activation_element.setAttribute('data-levar-activation', 'qr');
              activation_type = 'qr';
              break;
            default:
              if (!activation_element.hasAttribute('data-levar-activation')) activation_element.setAttribute('data-levar-activation', '3d');
              if ((activation_ids[activation_id] == levar.ids.activation_ids.debut_button_id) && (!activation_element.hasAttribute('data-levar-style'))) activation_element.setAttribute('data-levar-style', 'toggle');
              activation_type = '3d';
              break;
          }
          // Remove inline onclick event from theme (old ga, klaviyo and mobile btn helper)
          if (activation_element.hasAttribute('onclick')) activation_element.removeAttribute('onclick');

          // Fallback for activations that don't have inline click events - Clone and replace element to remove old ga, klaviyo and mobile btn helper on click events from theme
          new_activation = activation_element.cloneNode(true);
          activation_element.parentNode.replaceChild(new_activation, activation_element);

          // Add event listener to launch viewer on activation element click if activations have not already been set to prevent event listener from being added multiple times
          //activation_element = document.getElementById(activation_ids[activation_id]);
          //activation_element.addEventListener('click', (event) => launchViewer(activation_type, activation_id === levar.ids.activation_ids.debut_button_id ? true : false, event));
        }
      }
    };

    // Populate levar.elements with common elements
    initializeLevarElements();

    // Locate activation containers and insert correct activations
    const containers = document.querySelectorAll('[data-levar-activations]');
    levar.elements.activation_containers = containers;
    var activation_types = '',
        activation_types_array = '',
        activation_element = '',
        container = '';
    if (containers.length > 0) {
      for (var i = 0; i < containers.length; i++) {
        container = containers[i];
        activation_types = containers[i].dataset.levarActivations;
        // If activation type overrides set on activation in theme insert those
        if (activation_types) {
          // If more than 1 activation
          if (activation_types.includes(',')) {
            activation_types_array = activation_types.split(',');
            for (var n = 0; n < activation_types_array.length; n++) {
              activation_element = levar.elements.activation_types.default_button;
              if (activation_types_array[n] == 'ar') activation_element = levar.elements.activation_types.ar_button
              else if (activation_types_array[n] == 'qr') activation_element = levar.elements.activation_types.qr_button
              else if (container.dataset.levarStyle == 'toggle') activation_element = levar.elements.activation_types.toggle_switch;
              if (!activation_element) activation_element = 'Activation Not Enabled';
              if (container.dataset.levarStyle == 'hotspot') activation_element.replace('levar-button', 'levar-hotspot');
              container.insertAdjacentHTML( 'beforeend', activation_element );
            }
          } else {
            // One activation
            activation_element = levar.elements.activation_types.default_button;
            if (activation_types == 'ar') activation_element = levar.elements.activation_types.ar_button
            else if (activation_types == 'qr') activation_element = levar.elements.activation_types.qr_button
            else if (container.dataset.levarStyle == 'toggle') activation_element = levar.elements.activation_types.toggle_switch;
            if (!activation_element) activation_element = 'Activation Not Enabled';
            if (container.dataset.levarStyle == 'hotspot') activation_element.replace('levar-button', 'levar-hotspot');
            container.insertAdjacentHTML( 'beforeend', activation_element );
          }
        } else {
          // Default to presets
          if (levar.info.levar_player) activation_element = levar.elements.activation_types.default_button;
          if (levar.info.static_vto_face_0 || levar.info.ar_experience_type == 'levar_try_on') activation_element = levar.elements.activation_types.ar_button;
          if (levar.info.direct_qr) activation_element = levar.elements.activation_types.qr_button;
          if (levar.info.debut_toggle) activation_element = levar.elements.activation_types.toggle_switch;
          if (!activation_element) activation_element = 'Activation Not Enabled';
          if (container.dataset.levarStyle == 'hotspot') activation_element.replace('levar-button', 'levar-hotspot');
          container.insertAdjacentHTML( 'beforeend', activation_element );
        }
      }
    }

    levar.elements.activations = document.querySelectorAll('[data-levar-activation]');
    levar.elements.activation_containers = document.querySelectorAll('[data-levar-activations]');

    // Add default button ids to levar object activation ids
    levar.ids.activation_ids.default_button_ids = [levar.ids.default_bar_ids.default_button_ids.default_3d_id, levar.ids.default_bar_ids.default_button_ids.default_qr_id];

    // Attach variant change listener events
    variantChangeListener(function(){});

    // Add variable array of all activation ids to levar object all activation ids
    levar.ids.activation_ids.all_activations = activation_ids_array;

    // Add found activations array to levar object activation ids
    levar.ids.activation_ids.found_activations = found_activations;

    // Compile css styling and insert into <head>
    addStyles();
    // Inject necessary js scripts
    addScripts();
    
    // Insert billboard viewer
    if(levar.info.billboard_status && levar.elements.billboard_container) insertViewer('billboard');

    // Launch viewer if preload enabled
    if (levar.info.preload_viewer && !levar.session_info.is_mobile) launchViewer('3d', levar.info.debut_toggle ? true : false);
  }

  /**
   **************************************
   * Initialize levar.elements **********
   **************************************
   */

  function initializeLevarElements() {
    
    // Create modal viewer element and store in levar object
    levar.elements.modal_viewer = createModal(levar.ids.modal_ids.modal_type_ids.viewer_modal_id);

    // Create modal qr element and store in levar object
    if (levar.info.direct_qr || levar.info.default_bar) levar.elements.modal_qr = createModal(levar.ids.modal_ids.modal_type_ids.qr_modal_id);

    // Create different viewer elements and store in levar object
    levar.elements.viewer_master = createViewer();
    if (levar.info.levar_player) {
      levar.elements.viewer_player = createViewer(levar.ids.activation_ids.player_button_id);
    }
    if (levar.info.debut_toggle) levar.elements.viewer_debut = createViewer(levar.ids.activation_ids.debut_button_id);
    if (!levar.info.imbed_viewer) levar.elements.viewer_modal = createViewer(levar.ids.activation_ids.custom_button_id);
    if (levar.info.billboard_status) levar.elements.viewer_billboard = createViewer(levar.ids.billboard_id);
    if (levar.info.static_vto_face_0 || levar.info.ar_experience_type == 'levar_try_on') levar.elements.viewer_ar = createViewer('ar');

    // Create viewer close button
    levar.elements.viewer_close_button = `<button id="levar_iframe_close" style="${levar.styles.viewer_close_button}">&#x2715;</button>`;
    levar.elements.viewer_close_button_mobile = `<button id="levar_iframe_close" style="${levar.styles.viewer_close_button_mobile}">&#x2715;</button>`;

    // Create ar activation element and store in levar object
    if (levar.info.static_vto_face_0 || levar.info.ar_experience_type == 'levar_try_on') {
      levar.elements.activation_types.ar_button = `<button data-levar-activation="ar" id="${levar.ids.activation_ids.ar_button_id}" class="levar-button"><span>Try Them On</span><div class="levar-button-icon">${levar.elements.icons.icon_ar_glasses}</div></button>`;
    }

    // Create debut activation element and store in levar object
    if (levar.info.debut_toggle) {
      levar.elements.activation_types.toggle_switch = `<button data-levar-activation="3d" data-levar-style="toggle" class="levar-toggle" title="View in 3D" tabindex="0"><label class="levar-switch"><input type="checkbox" id="levar-toggle"><span class="levar-switch-slider"></span></label></button>`;
    }

    // Create player activation element and store in levar object
    if (levar.info.levar_player) {
      levar.elements.activation_types.default_button = `<button data-levar-activation="3d" class="levar-button levar-expand"><div class="levar-button-icon">${levar.elements.icons.icon_3d}</div><span>View in 3D</span></button>`;
    }

    // Create qr activation element and store in levar object
    if (levar.info.direct_qr) {
      levar.elements.activation_types.qr_button = `<button data-levar-activation="qr" class="levar-button"><div class="levar-button-icon">${levar.elements.icons.icon_qr}</div><span>View in My Space</span></button>`;
    }

    // Create default bar trigger element and store in levar object
    if (levar.info.default_bar) levar.elements.default_trigger = `<div id="${levar.ids.default_bar_ids.default_button_ids.default_trigger_id}" class="levar-cta-trigger" title="View this product in 3D or place it in your space">
                                        ${levar.assets.trigger_icon}
                                      </div>`;

    // Create default bar element and store in levar object
    if (levar.info.default_bar) levar.elements.default_bar = `<div class="levar-cta" id="${levar.ids.default_bar_ids.default_bar_id}">
                                    <div id="${levar.ids.default_bar_ids.default_button_ids.default_close_id}"> </div>
                                    <div class="levar-top">
                                      <span id="levar-copy">See this product in...</span>
                                    </div>
                                    <div class="levar-bottom">
                                      <div id="${levar.ids.default_bar_ids.default_button_ids.default_3d_id}" class="${levar.ids.default_bar_ids.default_button_ids.default_button_class}" title="View this product in 3D">
                                        <span>3D</span>
                                        <div class="levar-default-button-icon">
                                          ${levar.assets.button_3d_icon}
                                          <div class="icon-target"> </div>
                                          <div class="levar-default-button-bg"> </div>
                                        </div>
                                      </div>
                                      <div id="${levar.ids.default_bar_ids.default_button_ids.default_qr_id}" class="${levar.ids.default_bar_ids.default_button_ids.default_button_class}" title="View this product in your space">
                                        <span>Your Space</span>
                                        <div class="levar-default-button-icon">
                                          ${levar.assets.button_my_space_icon}
                                          <div class="icon-target"> </div>
                                          <div class="levar-default-button-bg"> </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>`;
  }

  /**
   **************************************
   * Add Styles *************************
   **************************************
   */

  function addStyles() {
      // Create <style> tag
      var levar_style = document.createElement('style'),
          activation_styles = [],
          activation_style = '',
          activation_containers = levar.elements.activation_containers,
          toggle_switch = false;

      levar_style.setAttribute('id', levar.ids.style_id);

      levar_style.appendChild(document.createTextNode(levar.styles.initial));

      levar_style.appendChild(document.createTextNode(levar.styles.modal_style));

      for (var i = 0; i < activation_containers.length; i++) {
        activation_style = activation_containers[i].dataset.levarStyle;
        if (activation_style) {
          if (!activation_styles.includes(activation_style)) {
            activation_styles.push(activation_style);
          }
          if ((activation_style == 'hotspot') || (activation_style == 'toggle')) {
            activation_containers[i].style = levar.styles.viewer_container;
          } else {
            activation_containers[i].style = levar.styles.activation_container;
          }
        }
      }

      if (activation_styles.length > 0) {
        if (activation_styles.includes('toggle')) levar_style.appendChild(document.createTextNode(levar.styles.activations.toggle_switch));
        if (activation_styles.includes('hotspot')) levar_style.appendChild(document.createTextNode(levar.styles.activations.hotspot));
      }

      // If Default Bar is enabled add default bar style otherwise add default button style
      if (levar.info.default_bar) {
        levar_style.appendChild(document.createTextNode(levar.styles.default_bar));
      } else {
        if (levar.ids.activation_ids.found_activations.length < 1) levar_style.appendChild(document.createTextNode(levar.styles.activations.default));
      }
      
      // Inject <style> tag into <head>
      document.getElementsByTagName('head')[0].appendChild(levar_style);
  };

  /**
   **************************************
   * Add Scripts ************************
   **************************************
   */

  function addScripts() {
    var script = document.createElement('script');
    script.setAttribute('src', levar.config.qr_code_url);
    script.setAttribute('type', 'text/javascript');
    document.head.append(script);
  };

  /**
   **************************************
   * Set Activations ********************
   **************************************
   */

  function setActivations() {
    // Get activation element
    var activations = levar.elements.activations,
        activation = '',
        activation_style = '',
        activation_id = '';

    // Create and inject default bar if it doesn't already exist
    if(levar.info.default_bar && !document.getElementById(levar.ids.default_bar_ids.default_bar_id)) createDefaultBar();
    
    // Loop through activation ids
    for (var i = 0; i < activations.length; i++) {
      // Save current activation id
      activation_id = activations[i].dataset.levarActivation;
      activation_style = activations[i].dataset.levarStyle;

      // If activation id does NOT exist skip to next activation id in array
      if (!activation_id) activation_id = '3d';

      // Get activation element
      activation = activations[i];

      // Check to see if activation is enabled in levar object from activation response
      if ((activation_style == 'toggle') && !levar.info.debut_toggle) { disableActivation(activation); continue; }
      if ((activation_id == 'qr') && !levar.info.direct_qr) { disableActivation(activation); continue; }
      if ((activation_id == 'ar') && (!levar.info.static_vto_face_0) && (levar.info.ar_experience_type != 'levar_try_on')) { disableActivation(activation); continue; }
      
      // Apply css to enable button functionality and visibility
      enableActivation(activation);      
    }

    // Add class to body once LEVAR is loaded
    document.body.classList.add(levar.ids.body_classes.levar_loaded);

    // Record that session has been initialized at least 1 time
    if (!levar.session_info.initialized) levar.session_info.initialized = true;
  };

  /**
   **************************************
   * Launch Viewer **********************
   **************************************
   */

  function launchViewer(activation_id, toggle_switch = false, event) {
    // Prevents old ga/klaviyo event and mobile button launch triggers from theme code from firing
    if (!toggle_switch && event) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
    }

    // If viewer is open, close the viewer and skip the rest
    if (levar.session_info.viewer_on) { removeViewers(); return; }

    var is_mobile = levar.session_info.is_mobile,
        event_name = levar.events.viewer_launch_click,
        iframe_id = levar.ids.iframe_ids.master_iframe_id;

    // Generate viewer session ID and store in levar object - Needs to occur before getViewerURL to prevent null url param
    levar.session_info.levar_session_id = generateUUID();

    // Set LEVAR pixel cookie and update value in lever object - Needs to occur before getViewerURL to prevent null url param
    setCookie(levar.ids.cookie_ids.levar_pixel_id, generateUUID(), 365)
    levar.session_info.levar_pixel_id = getCookie(levar.ids.cookie_ids.levar_pixel_id);

    // Set LEVAR analytics cookie - Needs to occur before getViewerURL to prevent null url param
    setCookie(levar.ids.cookie_ids.levar_conversion_id, levar.session_info.levar_session_id, 30);

    if (levar.info.imbed_viewer && activation_id != 'qr') insertViewer(activation_id, 'imbed', toggle_switch)
    else launchModal(activation_id);


    // Handler for activation ID to determine what the activation should do
    switch (activation_id) {
      // Player activation
      case '3d':
        if (toggle_switch) {
          // Make sure debut toggle switch checkbox is checked
          var debut_toggle = event ? event.target.querySelector('input[type="checkbox"]') : document.querySelector('[data-levar-style="toggle"] input[type="checkbox"]');
          if (debut_toggle && debut_toggle.checked === false) debut_toggle.checked = true;
        }
        document.body.classList.add(levar.ids.body_classes.player_active);
        break;
      // Direct to QR activation
      case 'qr':
        event_name = levar.events.direct_qr_open;
        break;
      // AR experience activation
      case 'ar':
        document.body.classList.add(levar.ids.body_classes.try_on_active);
        break;
      // Default
      default:
        break;
    }

    // Trigger analytics events
    sendLevarAnalytics(event_name, activation_id);
    sendGoogleAnalytics(activation_id);
    sendKlaviyoAnalytics(activation_id);
  }

  /**
   **************************************
   * Launch Modal ***********************
   **************************************
   */

  function launchModal(activation_id) {
    var modal = null,
        activation_type = ((activation_id == 'qr') && !levar.session_info.is_mobile) ? levar.ids.modal_ids.modal_type_ids.qr_modal_id : levar.ids.modal_ids.modal_type_ids.viewer_modal_id;

    // Get correct modal element based on if activation type is equal to viewer or not
    modal = (activation_type === levar.ids.modal_ids.modal_type_ids.viewer_modal_id) ? levar.elements.modal_viewer : levar.elements.modal_qr;

    if (!modal) return;

    // Inject Modal Element into Body
    document.body.appendChild(modal); // Insert Modal ON DOM

    // If activation should launch the modal viewer vs. launch QR code modal - needs element inserted into DOM before running
    if (activation_type === levar.ids.modal_ids.modal_type_ids.qr_modal_id) generateQRCode()
    else insertViewer(activation_id);

    // Add Event Listener To Close Modal
    modal.addEventListener( 'click', function(event) {
      if (event.target.matches(`.${levar.ids.iframe_ids.close_iframe_id}`) || event.target.matches(`.${levar.ids.modal_ids.modal_container_id}`)) removeViewers(levar.ids.modal_ids.modal_id, false);
    }, false);
  };

  /**
   **************************************
   * Insert Viewer **********************
   **************************************
   */

  function insertViewer(activation_id, target = 'modal', toggle_switch = false) {
    var levar_frame = levar.elements.viewer_modal
    var viewer_url;
    switch(activation_id) {
      case 'ar':
        viewer_url = levar.config.ar_viewer_url
        break;
      default:
        viewer_url = getViewerURL(activation_id)
        break;
    }
    console.log("viewer_url", viewer_url)
    var close_button = true;

    if ((activation_id == '3d') && levar.info.imbed_viewer) levar_frame = levar.elements.viewer_master;

    if (activation_id == 'billboard') { levar_frame = levar.elements.viewer_billboard; close_button = false; }

    if (toggle_switch && !levar.session_info.is_mobile) close_button = false;

    if (activation_id == 'ar') {
      levar_frame = levar.elements.viewer_ar;
      viewer_url = levar.config.ar_viewer_url;
      // Trigger analytics event
      sendLevarAnalytics(levar.events.ar_launch_click, activation_id);
    }

    // Reset target to null if modal does not exist
    if ((target === levar.ids.modal_ids.modal_content_id) && (!document.getElementById(levar.ids.modal_ids.modal_id))) target = document.body;

    if ((target == 'imbed') && levar.info.imbed_viewer) target = document.querySelector('[data-levar-viewer="imbed"]');
    if (target == 'modal') target = document.querySelector('[data-levar-viewer="modal"]');
    if (activation_id == 'billboard') target = document.querySelector('[data-levar-viewer="billboard"]');
    
    // Set the source of the iframe with the correct viewer url
    levar_frame.setAttribute('src', viewer_url);

    // Insert viewer as last child of target and apply focus - defaults to document.body
    if (!target) target = document.body;
    target.append(levar_frame);
    levar_frame.focus();

    // If enabled inject close button into DOM with click event listener
    if (close_button) {
      levar_frame.onload = function() {
        if (!document.getElementById(levar.ids.iframe_ids.close_iframe_id)) target.insertAdjacentHTML( 'beforeend', levar.session_info.is_mobile ? levar.elements.viewer_close_button_mobile : levar.elements.viewer_close_button );

        var viewer_close_button = document.getElementById(levar.ids.iframe_ids.close_iframe_id);

        viewer_close_button.addEventListener('click', removeViewers.bind(null, levar_frame.id));

        setTimeout(function() {
          viewer_close_button.style.opacity = 1;
        }, 2000);
      }
    }

    // If mobile device enable full screen mode for viewer iframe otherwise disable full screen mode
    if (activation_id != 'billboard') {
      if (levar.session_info.is_mobile) levar_frame.style = levar.styles.mobile_iframe;
      levar.session_info.viewer_on = true;
    }

    // Apply event shade listeners to the window
    window.addEventListener('message', shadeListener)
  }

  /**
   **************************************
   * Create Default Bar *****************
   **************************************
   */

  function createDefaultBar() {
    // Create CTA Trigger Element
    var levar_trigger = levar.elements.default_trigger,
        levar_container = levar.elements.default_bar;

    // Inject Activation Container and Trigger Elements to End of Body
    document.body.insertAdjacentHTML( 'beforeend', levar_container );
    document.body.insertAdjacentHTML( 'beforeend', levar_trigger );

    // var default_bar_buttons = document.getElementsByClassName(levar.ids.default_bar_ids.default_button_ids.default_button_class);

    // // Loop through default bar activation buttons
    // for (var i = 0; i < default_bar_buttons.length; i++) {
    //   // Add event listener to default bar activation button on mouse enter
    //   default_bar_buttons[i].addEventListener('mouseenter', (e) => {
    //     var icon_target = e.target.getElementsByClassName(levar.ids.icon_target_id)[0],
    //         icon_target_html = '';

    //     // Get animated asset url from levar object
    //     if (e.target.id === levar.ids.default_bar_ids.default_button_ids.default_3d_id) {
    //       icon_target_html = levar.assets.button_3d_animated_icon;
    //     } else {
    //       icon_target_html = levar.assets.button_my_space_animated_icon;
    //     }

    //     // Insert animated asset
    //     icon_target.innerHTML = icon_target_html;
    //   });

    //   // Add event listener to default bar activation button on mouse leave
    //   default_bar_buttons[i].addEventListener('mouseleave', (e) => {
    //     // Remove animated asset after slight delay
    //     setTimeout(function() {
    //       e.target.getElementsByClassName(levar.ids.icon_target_id)[0].innerHTML = '';
    //     }, 750);
    //   });
    // }

    var default_trigger = document.getElementById(levar.ids.default_bar_ids.default_button_ids.default_trigger_id);
    default_trigger.style.opacity = 0;

    // Add event listener to launch default 3d viewer on activation element click
    document.getElementById(levar.ids.default_bar_ids.default_button_ids.default_3d_id).addEventListener('click', (event) => launchViewer('3d', false, event));

    // Add event listener to launch default direct to qr on activation element click
    document.getElementById(levar.ids.default_bar_ids.default_button_ids.default_qr_id).addEventListener('click', (event) => launchViewer('qr', false, event));

    // Add Event Listener to Close Button Element - Add levar.ids.default_bar_ids.default_closed_class class to Activation Container
    document.getElementById(levar.ids.default_bar_ids.default_button_ids.default_close_id).addEventListener( 'click', function(event) {
        event.preventDefault();
        event.stopPropagation();
        default_trigger.style.opacity = 1;
        document.getElementById(levar.ids.default_bar_ids.default_bar_id).classList.add(levar.ids.default_bar_ids.default_closed_class);
        document.getElementById(levar.ids.default_bar_ids.default_button_ids.default_trigger_id).classList.add(levar.ids.default_bar_ids.default_closed_class);
    }, false);

    // Add Event Listener to Trigger Element - Remove levar.ids.default_bar_ids.default_closed_class class to Activation Container
    document.getElementById(levar.ids.default_bar_ids.default_button_ids.default_trigger_id).addEventListener( 'click', function(event) {
        event.preventDefault();
        event.stopPropagation();
        document.getElementById(levar.ids.default_bar_ids.default_bar_id).classList.remove(levar.ids.default_bar_ids.default_closed_class);
        document.getElementById(levar.ids.default_bar_ids.default_button_ids.default_trigger_id).classList.remove(levar.ids.default_bar_ids.default_closed_class);
    }, false);

    // On mobile add classes to close default bar after delay
    if (levar.session_info.is_mobile) {
      setTimeout(function() {
        default_trigger.style.opacity = 1;
        document.getElementById(levar.ids.default_bar_ids.default_bar_id).classList.add(levar.ids.default_bar_ids.default_closed_class);
        default_trigger.classList.add(levar.ids.default_bar_ids.default_closed_class);
      }, 2000);
    }
  };

  /**
   **************************************
   * Create Modal ***********************
   **************************************
   */

  function createModal(modal_type) {
    // Create Modal Element
    var modal = document.createElement('div');

    modal.setAttribute('id', levar.ids.modal_ids.modal_id);

    if (modal_type === levar.ids.modal_ids.modal_type_ids.viewer_modal_id) {
      modal.innerHTML = `<div class="${levar.ids.modal_ids.modal_container_id}">
                          <div id="${levar.ids.modal_ids.modal_content_id}" class="levar-modal-box-custom" data-levar-viewer="modal">
                          </div>
                        </div>`;
    } else {
      modal.innerHTML = `<div class="${levar.ids.modal_ids.modal_container_id}">
                          <div class="levar-modal-box">
                            <div class="levar-modal-top"><h6>${levar.info.custom_text.qr_header}</h6></div>
                            <div class="levar-qr-body"><div class="qrBorder"><section className="QRborder-inner"><div id="${levar.ids.qr_code}"></div></section></div></div>
                            <div class="levar-modal-bottom"><p>${levar.info.custom_text.qr_footer}</p></div>
                          </div>
                        </div>`;
    }

    return modal;
  }

  /**
   **************************************
   * Create Viewer **********************
   **************************************
   */

  function createViewer(activation_id = null) {
    var levar_frame = document.createElement('iframe'),
        iframe_id = levar.ids.iframe_ids.master_iframe_id,
        iframe_style = levar.styles.default_iframe;

    if (!levar.info.imbed_viewer) iframe_style = levar.styles.modal_iframe;

    if (activation_id == 'ar') {
      levar_frame.setAttribute('allow', 'camera;gyroscope;accelerometer;magnetometer;xr-spatial-tracking;microphone;');
    }
    
    if (activation_id == 'billboard') {
      iframe_style = levar.styles.billboard_iframe;
      iframe_id = levar.ids.iframe_ids.billboard_iframe_id;
    }

    // Apply viewer source, id and style attributes from the stored variables
    levar_frame.setAttribute('src', '');
    levar_frame.setAttribute('id', iframe_id);
    levar_frame.setAttribute('style', iframe_style);

    return levar_frame;
  }

  /**
   **************************************
   * Shade Listener *********************
   **************************************
   */

  function shadeListener(event) {
    // Get viewer iframe element
    var levar_viewer = document.getElementById(levar.ids.iframe_ids.master_iframe_id);
    
    // If viewer is closed terminate function
    if (!levar_viewer) return;

    // Handler for event.data to determine what type of event and how to respond (i.e. in-viewerevents: add to cart, close, etc. )
    switch (event.data) {
      // iPad Exit was activated
      case levar.events.data_types.ipad_exit:
          fullScreenMode(levar.ids.activation_response_ids.disabled_id);
          var debut_toggle = document.querySelector('button[data-levar-style="toggle"]');
          if (debut_toggle && debut_toggle.checked === true) debut_toggle.checked = false;
          break;
      // Viewer close button has been activated
      case levar.events.data_types.levar_viewer_close:
        removeViewers();
        // Make sure debut toggle switch checkbox is checked (preload viewer)
        var debut_toggle = document.getElementById(levar.ids.debut_toggle_id);
        if (debut_toggle && debut_toggle.checked === true) debut_toggle.checked = false;
        break;
      // Default - All other event data types
      default:
        break;
    }
  };

  /**
   **************************************
   * Variant Change Listener ************
   **************************************
   */

  function variantChangeListener(handler) {
      
    function track(fn, handler, before) {
      return function interceptor () {
        if (before) {
          handler.apply(this, arguments);
          return fn.apply(this, arguments);
        } else {
          var result = fn.apply(this, arguments);
          handler.apply(this, arguments);
          return result;
        }
      };
    };

    var current_variant_id = null;

    function variantHandler() {
      // Unless variant switch is enabled, delete any open viewers
      if (levar.session_info.viewer_on && !levar.info.pdp_variant_switch) removeViewers();

      // Get currently selected variant ID
      var selected_variant_id = checkVariantID();
      var selected_store_variant_id = checkVariantID(false, false);

      // If selected_variant_id is null or variant from query string (new) equals current stored variant (old) exit out
      if (!selected_variant_id || (selected_variant_id.toString() === levar.info.variant_id.toString())) return;

      console.log('selected_variant_id', selected_variant_id);

      // Set new variant_id
      levar.info.variant_id = selected_variant_id;
      levar.info.store_variant_id = selected_store_variant_id;

      // Update route for billboards if variant_switch
      if (levar.session_info.viewer_on && levar.info.pdp_variant_switch) {
        if (levar.info.static_vto_face_0 || levar.info.ar_experience_type == 'levar_try_on') pdpVariantChange(selected_store_variant_id)
        else pdpVariantChange(selected_variant_id); 
      }
      
      if (selected_variant_id != current_variant_id) {
        current_variant_id = selected_variant_id;
        if (levar.info.static_vto_face_0 || levar.info.ar_experience_type == 'levar_try_on') handler(selected_store_variant_id)
        else handler(selected_variant_id);
      }
  
      if(!(levar.session_info.viewer_on && levar.info.pdp_variant_switch)) {
        // If debut toggle switch implementation uncheck checkbox to deactivate button style
        if (levar.info.debut_toggle) {
          var debut_toggle = document.getElementById(levar.ids.debut_toggle_id);
          if (debut_toggle) debut_toggle.checked = false;
        }
        // Run init function again to reset activations and levar object data based on new variant ID
        init();
      }
    };
    
    // Assign listeners
    window.history.pushState = track(history.pushState, variantHandler);
    window.history.replaceState = track(history.replaceState, variantHandler);
    window.addEventListener('popstate', variantHandler);
  };

  /**
   **************************************
   * Helper Functions *******************
   **************************************
   */

  // Trigger Conversion Event
  function triggerConversionEvent() {
    let levar_conversion_cookie = getCookie('levar_conversion'),
        levar_pixel_cookie = getCookie('levar_pixel'),
        levar_checkout_cookie = getCookie('levar_checkout');
    if (!levar_pixel_cookie || (levar_checkout_cookie.toString() === window.levar.checkout_id.toString())) return;

    let data = {
      created_at: (new Date()).toISOString(),
      device_type: window.navigator.userAgent,
      domain: window.location.hostname,
      event_type: 'levar_purchase',
      levar_pixel_id: levar_pixel_cookie,
      levar_session_id: levar_conversion_cookie,
      origin: 'shopify',
      price: Math.floor(window.levar.price / 100),
      quantity: 1,
      store_id: window.levar.store_id,
    };
    sendLevarAnalytics('levar_purchase', null, data);
    setCookie('levar_checkout', window.levar.checkout_id, 30);
  }

  // Get selected variant ID
  function checkVariantID(initial = false, concat = true) {
    // Note: meta. used same as ShopifyAnalytics.meta cant access variant_id and product_id

    var variant_id,
        hidden_field = document.querySelector('[name="id"]'),
        query_string = window.location.search,
        url_params = query_string ? new URLSearchParams(query_string) : null,
        variant_param = (url_params && url_params.has('variant')) ? url_params.get('variant') : null; // find new variant_id from query string);

    // 1. If window variant id variable exists on first run return that value
    if (initial && window.levar_onload_variant_id) variant_id = window.levar_onload_variant_id
    // 2. If variant id exists in url parameters return that value
    else if (variant_param) variant_id = variant_param
    // 3. If Shopify add to cart form hidden field exists return that value
    else if (hidden_field) variant_id = hidden_field.value;
    // 4. If Shopify Analytics data exists return the variant id from that
    else variant_id = window.ShopifyAnalytics.meta.selectedVariantId || window.ShopifyAnalytics.meta.product.variants[0].id;

    if (!concat) return variant_id;

    const shop_id = window.ShopifyAnalytics.lib.trekkie?.defaultAttributes.shopId ?? window?.levar_shop_id
    return `shp_${shop_id}_${window.ShopifyAnalytics.meta.product.id}_${variant_id}`;
  };

  // Check for existing cookie and return value (e.g. _shopify_y (marketing) cookie, LEVAR analytics)
  function getCookie(cname) {
    let name = cname + '=';
    let decoded_cookie = decodeURIComponent(document.cookie);
    let ca = decoded_cookie.split(';');
    for(let i = 0; i < ca.length; i++) {
      let c = ca[i];
      // Remove space
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    console.log('<<< LEVAR Cookie NOT Found - "'+ cname +'" >>>');
    return '';
  }

  // Set LEVAR analytics cookie
  function setCookie(cname, cvalue, exdays, override = false) {
    let existing_cookie = getCookie(cname),
        existing_cookie_obj,
        new_cookie_obj;

    // Bypass this if no cvalue to prevent error when no full pdp levar object (triggerConversionEvent())
    // If levar pixel cookie already exists don't reset it
    if (cvalue && existing_cookie && !override && (cname === 'levar_pixel')) return;
    
    let expires = '';
    if (exdays > 0) {
      const d = new Date();
      d.setTime(d.getTime() + (exdays*24*60*60*1000));
      expires = 'expires='+ d.toUTCString()+';';
    }
    document.cookie = cname + '=' + cvalue + ';' + expires + 'path=/';
    console.log('<<< LEVAR Cookie Set - "'+ cname +'" >>>');
  }

  // Generate random UUID
  function generateUUID() {
    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));
  };

  // Call to LEVAR getActivation API to return data associated with selected variant
  function getActivation() {
    return fetch(`${levar.config.api_url}public/activation/?variant_id=${levar.info.variant_id}`).then(res => res.json());
  };

  // Return true if user is viewing from a mobile device
  function mobileCheck() {
    let check = false;
    (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
    return check;
  };

  function checkKlaviyo() {
    var scripts = document.getElementsByTagName('script');
    for (let i = 0; i < scripts.length; i++) {
      if (scripts[i].src.includes('klaviyo.com')) return true;
    }
    return false;
  }

  // Set session ID
  function setSessionID(session_type) {
      var queryString = window.location.search;
      var urlParams = new URLSearchParams(queryString);
      var existing_session = urlParams.get(session_type);

      if(existing_session) {
          return existing_session;
      } else {
          return generateUUID()
      }
  };

  // Get viewer url
  function getViewerURL(activation_id) {
    var params = '',
        viewer_url = '',
        billboard_imbeded = (activation_id == 'billboard') ? true : false,
        billboard = (levar.info.billboard_status && (activation_id != '3d')) ? true : false,
        session_values = `&levar_pixel_id=${levar.session_info.levar_pixel_id}&levar_session_id=${levar.session_info.levar_session_id}`,
        qr_activation = ((activation_id == 'qr') && !levar.session_info.is_mobile) ? true : false,
        viewer_type = (billboard && billboard_imbeded) ? '' : '&viewer_type=imbedded',
        auto_launch_ar = ((levar.info.auto_launch_ar === levar.ids.enabled_id) || (activation_id == 'qr')) ? levar.config.auto_launch_ar_param : '',
        fullscreen = (billboard && billboard_imbeded) ? levar.ids.activation_response_ids.disabled_id : levar.ids.activation_response_ids.enabled_id,
        origin = (billboard && billboard_imbeded) ? 'static' : qr_activation ? 'external' : levar.info.origin,
        view_in_space_off = levar.info.view_in_space_off ? levar.ids.activation_response_ids.enabled_id : levar.ids.activation_response_ids.disabled_id,
        translation_inactive = (levar.info.translation_inactive || levar.info.billboard_status) ? '&local_off' : '',
        billboards = billboard ? levar.ids.activation_response_ids.enabled_id : levar.ids.activation_response_ids.disabled_id,
        model_placement = levar.info.model_placement ? '&hank_modal=ground_offset' : '',
        bottom_drawer = ((activation_id == '3d') && levar.info.imbed_viewer && (!levar.session_info.is_mobile)) ? levar.ids.activation_response_ids.disbled_id : levar.ids.activation_response_ids.enabled_id;

    if(levar.info?.static_viewer_0) { // static_viewer_0 = model viewer
      params = `${viewer_type}&origin=${origin}&view_in_space_off=${view_in_space_off}${translation_inactive}${auto_launch_ar}`;
      viewer_url = `${levar.config.static_viewer_domain}?ecomm=${levar.info.variant_id}${params}`;
    } else { // interactive_viewer_0 = fibrous
      params = `${viewer_type}&fullscreen=${fullscreen}&origin=${origin}&view_in_space_off=${view_in_space_off}${translation_inactive}&billboards=${billboards}${auto_launch_ar}${model_placement}&bottom_drawer=${bottom_drawer}`;
      viewer_url = `${levar.config.viewer_domain}?ecomm=${levar.info.variant_id}${billboard_imbeded ? '' : session_values}${params}`;
    }
    console.log("getViewerURL", viewer_url)
    // Save data for later
    levar.config.params = params;
    levar.config.viewer_url = viewer_url;

    return viewer_url;
  }

  // Generate QR code
  function generateQRCode() {
    // Remove exisiting QR Code if it exists
    document.getElementById(levar.ids.qr_code).innerHTML = '';

    // Generate QR Code HTML
    var QR_CODE = new QRCode(document.getElementById(levar.ids.qr_code), { width: 250, height: 250, colorDark: '#000000', colorLight: '#ffffff', correctLevel: QRCode.CorrectLevel.H });

    // Compile and return QR code
    QR_CODE.makeCode(getViewerURL('qr'));
  };

  function pdpVariantChange(variant_id) {
    var frame_id = levar.ids.iframe_ids.master_iframe_id,
        current_levar_iframe = document.getElementById(frame_id); // find current viewer => send message to change
    
    if(!current_levar_iframe) return;

    current_levar_iframe.contentWindow.postMessage({
      type: 'levar_message',
      variant_id: variant_id
    }, '*');

    sendLevarAnalytics(levar.events.pdp_variant_change);
  };

  // Push Google Analytics event
  function sendGoogleAnalytics(activation_id) {
    if (!levar.session_info.google_analytics) return;
    var hidden_field = document.querySelector('[name="id"]'),
        metaTitle = document.querySelector('meta[property="og:title"]');
    let data = {
      'activation_type': activation_id,
      'created_at': (new Date()).toISOString(),
      'device_type': levar.session_info.ua,
      'domain': window.location.hostname,
      'model_3d_id': levar.info.model_3d_id,
      'origin': levar.info.origin,
      'product_id': levar.info.product_id,
      'product_name': metaTitle ? metaTitle.content : '',
      'variant_id': levar.info.store_variant_id,
      'variant_name': (hidden_field && (hidden_field.tagName == 'select')) ? hidden_field[hidden_field.selectedIndex].text : '',
      'viewer_url': 'https://viewer.levar.io/?ecomm='+levar.info.variant_id,
    };
    if (window.ga4_property_id) data['send_to'] = window.ga4_property_id;

    gtag('event', 'levar_activation', data);
    console.log('<<< Send Google Analytics Event >>>', data);
  }

  // Push Klaviyo event
  function sendKlaviyoAnalytics(activation_id) {
    if (!levar.session_info.klaviyo) return;
    var _learnq = _learnq || [],
        hidden_field = document.querySelector('[name="id"]'),
        metaTitle = document.querySelector('meta[property="og:title"]');
    let data = {
      ActivationType: activation_id,
      CreatedAt: (new Date()).toISOString(),
      DeviceType: levar.session_info.ua,
      Domain: window.location.hostname,
      Model3dId: levar.info.model_3d_id,
      Origin: levar.info.origin,
      ProductId: levar.info.product_id,
      ProductName: metaTitle ? metaTitle.content : '',
      VariantId: levar.info.store_variant_id,
      VariantName: (hidden_field && (hidden_field.tagName == 'select')) ? hidden_field[hidden_field.selectedIndex].text : '',
      ViewerUrl: 'https://viewer.levar.io/?ecomm='+levar.info.variant_id,
    };
    _learnq.push(['track', 'LEVAR Activation', data]);
    console.log('<<< Send Klaviyo Event >>>', data);
  }
  
  // Push levar analytics event
  function sendLevarAnalytics(event_type, activation_id, data) {
    let xhr = new XMLHttpRequest;
    xhr.open('POST', levar.config ? levar.config.events_url : 'https://be9ylitupj.execute-api.us-east-1.amazonaws.com/dev/send/pixel', true); // Works for sychronous firefox
    xhr.setRequestHeader('Content-Type', 'application/json');

    data = data ? data : {
      created_at: (new Date()).toISOString(),
      device_type: levar.session_info.ua,
      domain: window.location.hostname,
      event_type: event_type,
      implementation_type: activation_id,
      levar_pixel_id: levar.session_info.levar_pixel_id,
      levar_session_id: levar.session_info.levar_session_id,
      model_3d_id: levar.info.model_3d_id,
      origin: levar.info.origin,
      product_id: levar.info.product_id,
      referrer: levar.session_info.referrer,
      store_id: levar.info.store_id,
      variant_id: levar.info.variant_id,
    };

    console.log('<<< Send LEVAR Analytics >>>', event_type, data);
    xhr.send(JSON.stringify(data));
  };

  // Enter/Exit full screen mode
  function fullScreenMode(status, element = null) {
      if (!element) element = document;
      if (status === levar.ids.activation_response_ids.disabled_id) {
        if (element.fullscreenElement) {
            element.exitFullscreen();
        } else if (element.webkitFullscreenElement) {
            element.webkitExitFullscreen();
        } else if (element.mozFullScreenElement) {
            element.mozCancelFullScreen();
        } else if (element.msFullscreenElement) {
            element.msExitFullscreen();
        }
      } else {
        if(element.requestFullscreen) {
            element.requestFullscreen();
        } else if(element.webkitRequestFullScreen ) {
            element.webkitRequestFullscreen();
        } else if(element.mozRequestFullScreen) {
            element.mozRequestFullscreen();
        } else if(element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
      }
  };

  // Close any open viewer
  function removeViewers(iframe_id = levar.ids.iframe_ids.master_iframe_id, send_analytics = true) { 
    // If viewer iframe does not exist terminate function
    const viewer_iframe = document.getElementById(iframe_id);
    if (!viewer_iframe) return;

    // Close full screen mode
    fullScreenMode(levar.ids.activation_response_ids.disabled_id, viewer_iframe);

    // Remove shade event listeners
    window.removeEventListener('message', null);

    // Remove viewer close button from DOM
    const levar_close_btn = document.getElementById(levar.ids.iframe_ids.close_iframe_id);
    if (levar_close_btn) levar_close_btn.remove();

    // Remove viewer iframe from DOM
    viewer_iframe.parentNode.removeChild(viewer_iframe);

    // Close open modal
    closeModal();

    // Untoggle toggle switch
    if (levar.info.debut_toggle) {
      var debut_toggles = document.querySelectorAll('button[data-levar-style="toggle"] input[type="checkbox"]');
      for (var i=0; i < debut_toggles.length; i++) { if (debut_toggles[i]) debut_toggles[i].checked = false; }
    }

    // Trigger levar analytics event for viewer exit
    if (send_analytics) sendLevarAnalytics(levar.events.viewer_page_exit);

    // Remove open viewer class from body element
    document.body.classList.remove(levar.ids.body_classes.player_active);
    document.body.classList.remove(levar.ids.body_classes.try_on_active);

    // Reset levar object session info data for open viewer
    levar.session_info.viewer_on = false;
    levar.session_info.viewer_session_id = null; // NOTE: Is this needed?
  }
  
  // Close any open levar modal
  function closeModal() {
    var levar_modal = document.getElementById(levar.ids.modal_ids.modal_id);
    if (!levar_modal) return;
    levar_modal.remove();
  };

  // Disable any existing levar activation buttons
  function disableButtons() {
    if (levar.elements.activations) {
      for(var i = 0; i < levar.elements.activations.length; i++) {
        if (levar.elements.activations[i]) disableActivation(levar.elements.activations[i]);
      }
    }
    // If default bar implementation then remove default bar from DOM
    if (levar.info.default_bar) {
      var default_bar = document.getElementById(levar.ids.default_bar_ids.default_bar_id);
      var default_trigger = document.getElementById(levar.ids.default_bar_ids.default_button_ids.default_trigger_id);
      if (default_bar) default_bar.remove();
      if (default_trigger) default_trigger.remove();
    }
  };

  function disableActivation(activation) {
    // Apply inactive button styles and remove from tab index
    activation.style = levar.styles.inactive_button;
    activation.setAttribute('tabindex', '-1');
  }

  function enableActivation(activation) {
    // Apply proper activation click event, active button styles and add to tab index
    activation.style = levar.styles.active_button;
    activation.setAttribute('tabindex', '0');
    activation.addEventListener('click', (event) => launchViewer(activation.dataset.levarActivation, activation.dataset.levarStyle == 'toggle' ? true : false, event));
  }

  /**
   * Determine the mobile operating system.
   * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.
   *
   * @returns {String}
   */
  function getMobileOperatingSystem() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;

    // Windows Phone must come first because its UA also contains "Android"
    if (/windows phone/i.test(userAgent)) return "Windows Phone";

    if (/android/i.test(userAgent)) return "Android";

    // iOS detection from: http://stackoverflow.com/a/9039885/177710
    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) return "iOS";

    return "unknown";
  }

  /**
   **************************************
   * Create LEVAR Object ****************
   **************************************
   */

  function createLevarObject() {
    var levar_object = {
      assets: {
        button_3d_animated_icon: '<object type="image/svg+xml" data="https://d36txllq6xta93.cloudfront.net/icons/hand-model-animated.svg" class="levar-icon-animated" id="levar-default-qr-animated-icon">3D</object>',
        button_3d_icon: '<img src="https://d36txllq6xta93.cloudfront.net/icons/hand-model-animated.svg" class="levar-icon" alt="3D" title="3D" />',
        button_my_space_animated_icon:'<object type="image/svg+xml" data="https://d36txllq6xta93.cloudfront.net/icons/phone-model-animated.svg" class="levar-icon-animated" id="levar-default-3d-animated-icon">Your Space</object>',
        button_my_space_icon: '<img src="https://d36txllq6xta93.cloudfront.net/icons/phone-model-animated.svg" class="levar-icon" alt="Your Space" title="Your Space" />',
        levar_icon: 'https://d36txllq6xta93.cloudfront.net/buttons/3dlogo-white.png',
        levar_logo: '<svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="211.74 269.28 368.53 73.28"><defs><style>.cls-1,.cls-2{fill:#fff;}.cls-2{opacity:.75;}</style></defs><path class="cls-2" d="m377.34,269.3c.41,0,.63.32.49.7l-26.09,72.2c-.07.19-.29.35-.49.35h-14.86c-.2,0-.42-.16-.49-.34l-20.76-57.21h-35.45v11.93h19.78c.29,0,.52.24.52.52v14.65c0,.29-.24.52-.52.52h-19.78v14.13h38.51c.29,0,.52.24.52.52v14.75c0,.29-.24.52-.52.52h-105.94c-.29,0-.52-.24-.52-.52v-72.2c0-.29.24-.52.52-.52h15.49c.29,0,.52.24.52.52v56.71h34.89v-56.71c0-.29.23-.52.52-.52h63.28c.21,0,.43.16.49.35l15.57,45.16c.21.56.39,1.06.55,1.52.16.45.25.78.29.99,0-.1.07-.39.21-.86.14-.47.31-1.02.52-1.65l15.68-45.16c.07-.19.29-.35.49-.35h16.57Z"/><path class="cls-1" d="m498.7,341.79l-13.24-27.19c2.76-1.22,5.1-3.01,7.04-5.36,1.94-2.35,3.41-4.95,4.42-7.8,1.01-2.84,1.52-5.61,1.52-8.29,0-4.29-.79-8.25-2.38-11.88-1.59-3.63-4.21-6.53-7.87-8.71-3.66-2.18-8.62-3.27-14.86-3.27h-35.79c-.29,0-.52.23-.52.52v69.8l-28-70c-.07-.18-.29-.33-.49-.33h-15.09c-.2,0-.41.15-.49.33l-28.78,72.2c-.16.39.06.72.49.72h16.97c.2,0,.42-.15.49-.34l5.21-13.58h27.31l5.31,13.58c.07.18.29.33.49.33h32.59c.29,0,.52-.23.52-.52v-24.8h13.92l12.93,25.04c.09.17.27.28.46.28h17.37c.39,0,.64-.4.47-.75Zm-105.82-28.44l5.96-14.65c.21-.49.44-1.04.71-1.65.26-.61.51-1.24.76-1.88.24-.64.45-1.25.63-1.8.17.56.38,1.16.63,1.8.24.65.5,1.27.76,1.88.26.61.5,1.16.71,1.65l5.96,14.65h-16.11Zm87.69-16.01c-.47,1.29-1.27,2.33-2.41,3.11-1.13.78-2.68,1.18-4.63,1.18h-19.99v-16.74h19.99c1.99,0,3.55.4,4.68,1.2,1.13.8,1.93,1.83,2.38,3.09.45,1.26.68,2.58.68,3.98,0,1.5-.24,2.9-.71,4.19Z"/><path class="cls-1" d="m550.72,324.8l23.64,16.84c.38.3.17.91-.31.91h-47.27c-.48,0-.69-.61-.31-.91l23.64-16.84c.18-.14.44-.14.62,0Zm28.72-55.19l-66.68,52.1s-.01.01-.01.02l-.19.39s0,.01,0,.02v19.91c0,.43.49.67.83.4l66.68-52.1s.01-.01.01-.02l.19-.39s0-.01,0-.02v-19.91c0-.43-.49-.67-.83-.4Z"/></svg>',
        loading_svg: 'https://d36txllq6xta93.cloudfront.net/logos/3d_loading_new.svg',
        trigger_icon: '<svg class="trigger-logo" id="levar-3d-qr-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 720 720"><defs><style>.cls-1{fill:#fff;}</style></defs><polygon class="cls-1" points="150.36 180.62 334.41 84.59 427.42 135.19 427.42 227.97 333.4 278.4 150.36 180.62"/><polygon class="cls-1" points="142.24 194.34 325.3 291.48 325.3 536.19 142.24 437.81 142.24 194.34"/><path class="cls-1" d="m340.87,292.1l94.02-50.44s2.62,6.61,16.46,6.92h30.84l-2.83,39.33s-.51,8.63,4.01,10.38c0,0,4.49,2.57,13.73-4.71l27.66-22.36-.03,167.84-183.87,97.12v-244.09Z"/><path class="cls-1" d="m221.93,500.19l-38.14-20.66s-132.21,13.83-136.98,56.66c0,0-18.79,45.84,132.41,64.25,0,0,68.79,9.99,123.06,9.99l-9.52,10.25c-1.68,1.81-2.54,4.28-2.17,6.73.32,2.07,1.27,4.67,3.61,7.46,0,0,1.7,1.5,4.54,2.58,4,1.51,8.52.62,11.7-2.23l32.46-29.07s6.92-6.66,0-15.14l-33.09-29.82s-7.18-5.46-14.67.62c0,0-8.12,5.62-3.75,13.89l9.05,9.52s-122.98-4.85-178.38-19.93c0,0-33.89-9.96-46.81-19.1-3.39-2.4-3.72-7.35-.69-10.18,9.64-9.01,41.86-27.3,147.37-35.82Z"/><path class="cls-1" d="m445.58,499.43l39.68-19.9s132.87,11.58,135.71,60.42c0,0,17.95,57.39-238.42,70.82-3.29.17-6.52-1.06-8.8-3.43-3.94-4.1-7.99-11.16.1-18.63,2.26-2.08,5.21-3.24,8.27-3.34,26.65-.85,178.07-7.16,210.76-41.66,1.65-1.74,1.6-4.47-.04-6.22-7.58-8.08-37.3-28.65-147.27-38.05Z"/><g><path class="cls-1" d="m511.1,126.06s-13.09-.33-15.75,13.82v19.98h31.99v-21.14s-2.87-12.65-16.24-12.65Z"/><path class="cls-1" d="m676.91,225.05v-126.72c-.25-10.67-10.16-9.65-10.16-9.65h-214.07c-10.41,0-9.65,8.38-9.65,8.38v127.99c1.02,8.63,8.13,8.63,8.13,8.63h36.06c11.5-.47,10.16,9.4,10.16,9.4l-2.02,32.76,42.91-35.3c2.2-2.12,4.51-3.61,6.62-4.67,3.32-1.66,7.02-2.45,10.74-2.45h112.15c9.65,0,9.14-8.38,9.14-8.38Zm-134.44-18.73c0,5.36-7.07,5.78-7.07,5.78-2.02,0-3.57-.41-4.75-.98-2.14-1.03-3.42-3.28-3.41-5.65l.08-29.79-32.01-.1-.18,30.31c-.21,6.64-7.71,6.21-7.71,6.21-1.51-.05-2.74-.33-3.75-.72-2.43-.94-3.95-3.37-3.95-5.97v-63.88c0-4.9.99-9.79,3.19-14.16,8.47-16.81,28.28-15.93,28.28-15.93,16.58.31,24.39,8.06,28.05,14.96,2.2,4.14,3.22,8.8,3.22,13.49v66.43Zm87.03,4.31s-6.01,2.4-9.98-3.76l-18.77-38.09h-14.8v37.68s-.14,5.34-6.99,5.62c0,0-7.53.15-7.53-6.43v-86.21s-.48-8,8.18-8h26.55c11.07,0,21.17,6.74,25,17.13,1.28,3.46,2.06,7.61,2.06,12.57,0,0-.35,21.01-17.09,24.61l16.96,35.32s2.39,6.59-3.59,9.58Z"/><path class="cls-1" d="m619.34,139.91c-.33-13.02-11.48-13.02-11.48-13.02h-22.13v27.59h22.41c12.5,0,11.2-14.57,11.2-14.57Z"/></g></svg>'
      },
      config: {
        // api_url: 'https://mpyo8741mj.execute-api.us-east-1.amazonaws.com/dev/', // old
        api_url: 'https://c0l9hb8b28.execute-api.us-east-1.amazonaws.com/dev/', // new
        ar_domain: 'https://click.8thwall.app/',
        ar_viewer_url: null,
        static_viewer_domain: 'https://3d.levar.io',
        static_viewer_url: null,
        auto_launch_ar_param: '&auto_ar_launch=on',
        events_url: 'https://be9ylitupj.execute-api.us-east-1.amazonaws.com/dev/send/pixel',
        params: null,
        qr_code: null,
        qr_code_url: 'https://d36txllq6xta93.cloudfront.net/js/qrcode.min.js',
        session_values: null,
        viewer_domain: 'https://viewer.levar.io/', // prod
        // viewer_domain: 'https://viewer.levardev.com/', // dev
        viewer_url: null,
      },
      elements: {
        activation_containers: [],
        activation_types: {
          ar_button: null,
          default_button: null,
          qr_button: null,
          toggle_switch: null,
        },
        activations: null,
        billboard_container: null,
        default_bar: null,
        default_trigger: null,
        icons: {
          icon_3d: '<svg class="levar-icon-3d" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 107.33 107.33"><defs><style>.levar-svg-path{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:3px;}</style></defs><g><path class="levar-svg-path" d="M70.44,41.23V16.19L48.75,3.67l-21.68,12.52v25.04l21.68,12.52,21.68-12.52Z"/><path class="levar-svg-path" d="M27.07,16.19l21.68,12.52,21.68-12.52"/><line class="levar-svg-path" x1="48.75" y1="53.75" x2="48.75" y2="28.71"/><path class="levar-svg-path" d="M104.96,75.81c-8.11-7.27-15.02-20.11-27.87-19.13-2.96,.99-5.93,1.98-8.89,3.95-8.89,2.96-17.78,0-26.68,.99-4.94,.99-7.9,7.9-3.54,12.2,0,0-15.23-14.18-23.13-22.08-2.96-2.96-7.9-.99-10.87,.99-1.98,1.98-1.98,5.93,0,7.9,8.89,11.86,17.78,25.69,32.61,29.64,7.9,1.98,16.8,0,24.7,.99,8.89,1.98,15.81,5.93,23.04,10.67"/></g></svg>',
          icon_ar_glasses: '<svg id="a" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1920 1920"><defs><style>.b{fill:#2c3494;}</style></defs><g><path d="M1548.65,282.87c18.83-6.09,37.59-14.91,50.93-29.97,1.4,11.83,.8,24.07-3.35,35.32-6.22,17.19-17.25,32.08-28.46,46.31,8.04-1.78,16.27-2.83,24.15-5.32,26.78-7.88,53.52-15.87,80.3-23.73,10.74,18.99,13.14,41.24,14.57,62.63,1.06,23.62,.17,47.3-2.07,70.83-2.38,24.65-5.48,49.35-12.13,73.25-9.1,34.38-25.53,66.35-33.58,101.04,25.4,20.35,45.5,46.63,61.56,74.78,20.5,36.07,34.72,75.41,45.1,115.49,11.61,45.31,18.24,91.82,21.08,138.48,2.95,48.68,1.64,97.62-3.93,146.07-4.52,38.76-11.79,77.26-22.87,114.69-2.13,6.49-3.61,13.25-6.56,19.44-5.97-21.18-12.42-42.23-19.52-63.06-.35-1-.68-1.98-.98-2.94-.98-3-2-5.97-3.06-8.92-1.97-5.67-3.7-11.44-6.04-16.96-2.13-6.42-4.38-12.78-7.06-18.98-.85-2.71-1.82-5.37-3.02-7.92-.88-2.72-1.84-5.4-2.97-8-.66-1.68-1.32-3.34-2-4.98-6.3-15.81-12.79-31.56-20.02-46.96-1.59-4.51-3.96-8.67-6.03-12.94-.68-1.37-1.33-2.73-1.97-4.08-3.5-8.18-7.45-16.24-11.97-23.9-.7-1.35-1.38-2.69-2.05-4.02-2.27-4.35-4.16-8.92-6.95-12.97-1.53-3.08-3.06-6.16-4.94-9.02-.94-1.71-1.94-3.37-3.04-4.95-1.19-2.42-2.43-4.81-3.95-7.02-1.17-2.07-2.38-4.1-3.63-6.1-1.09-1.8-2.13-3.6-3.16-5.4-.31-.31-.94-.93-1.25-1.25-1.47-3.47-3.81-6.43-5.82-9.57-3.33-5.03-6.81-9.97-9.94-15.12-.3-.33-.9-1-1.21-1.34-1.7-3-3.84-5.7-5.82-8.5-3.77-5.49-7.92-10.69-12.01-15.93-2.22-3.11-4.85-5.89-6.94-9.08-1.81-1.9-3.74-3.72-5.03-6.02-3.3-3.16-5.63-7.17-9.04-10.22-3-2.75-4.95-6.42-8.03-9.09-10.57-10.06-20.23-21.14-31.48-30.44-10.23-9.06-20.92-17.67-32.24-25.35-.34-.29-1.01-.86-1.34-1.15-4.16-2.5-8.14-5.27-12.13-8-3.73-2.34-7.47-4.66-11.31-6.81-1.61-1.06-3.26-2.04-4.92-2.97-1.42-.64-2.84-1.27-4.24-1.89-.34-.34-1.03-1.02-1.37-1.37-6.87-3.06-13.31-7.07-20.37-9.68-2.95-1.45-5.89-2.9-8.96-4.05-1.66-.68-3.32-1.35-4.98-1.98-42.61-17.02-88.81-24.51-134.6-23.57-64.48,1.44-127.89,17.87-187.63,41.53-10.35,3.92-20.49,8.34-30.68,12.62l-.09,.41c-3.05,.95-5.91,2.37-8.83,3.62l-.21,.38c-5.39,1.84-10.39,4.64-15.43,7.25-.38-.03-1.14-.09-1.52-.12l-.03,1.44c-.49-.15-1.48-.47-1.98-.62l.07,1.02c-7.72,2.71-14.69,7.15-22.07,10.63v.96c-.5-.15-1.49-.45-1.98-.6v1.55c-.49-.12-1.47-.38-1.96-.5l-.07,1.46c-.47-.1-1.41-.31-1.88-.41l-.14,.94c-5.08,2.23-9.88,5.04-14.8,7.6l-.22,.5c-1.84,.65-3.66,1.32-5.5,1.92,2.12-8.8,5.32-17.32,7.31-26.16,3.19-13.11,6.58-26.46,5.94-40.06-.29-7.74-3.83-15.82-10.79-19.73-5.4-2.19-11.39-3.17-17.15-2.04-14.03,1.48-27.51,5.87-40.91,10.03-43.31,13.75-86.87,28.67-132.47,32.34-5.36,.09-10.63,1.22-15.99,1.01-6.67-.25-13.26,1.05-19.92,.96-7.36,.19-14.76-.07-22.08,.86-11.65,.41-23.34-.15-34.95,.96-21.69,.6-43.43-.19-65.08,1.16-20.98-.07-41.96,.16-62.94,.39-12.99,1.2-26.06,.28-39.06,.99-8.88,1.19-17.89,.15-26.77,1.28-41.25,2.16-83,6.15-122.43,19.29-12.25,4.53-24.37,9.55-35.6,16.28-3.75,2.22-7.3,4.76-10.98,7.08-3.97,2.74-7.78,5.71-11.5,8.78-21.55,17.58-37.54,41.07-49.53,65.97-14.29,29.99-23.39,62.16-30.42,94.54-13.91,65.94-19.74,133.27-24.05,200.42-.76-.78-1.35-1.66-1.76-2.62-10.58-29.66-21.14-59.32-32-88.87-.37-1-.73-1.98-1.1-2.95-1.22-3.71-2.45-7.42-4.02-10.99-4.15-12.28-8.89-24.34-13.3-36.51-17.03-50.53-27.32-103.44-29.64-156.71-1.01-15.31-.44-30.7-.33-46.04,.9-6.6,.59-13.29,1.38-19.89,3.12-41.67,11.77-82.96,25.9-122.31,1.11-2.61,2.09-5.26,3-7.94,.7-1.66,1.38-3.33,2.06-4.99,.66-1.67,1.32-3.33,1.97-4.99,1.05-2.31,2.07-4.63,3-6.98,1.82-3.95,3.7-7.86,5.46-11.82,17.29-35.65,39.78-68.88,67.27-97.46,24.84-26.07,53.63-48.3,84.83-66.25,9.26-5.43,18.93-10.11,28.79-14.33,13.59-5.88,28.2-11.11,38.58-22.17,6.24-6.1,10.54-13.74,14.79-21.25,20.94-29.34,47.42-54.51,76.92-75.12,32.17-22.5,67.82-39.68,104.68-53,41.1-14.8,83.77-24.93,126.79-32.27,81.6-13.73,164.48-17.63,247.1-18.27,115.04-.65,229.92,6.27,344.9,8.7,48.72,.65,97.56,.87,146.11-3.82,24.84-2.57,49.73-6.32,73.59-13.89Z"/><path d="M376.98,1254.18c53.96-2.48,107.98-3.84,162-4.12,27.34-.52,54.68,.14,82.01,.45,48.33,.89,96.71,2.52,144.79,7.65,21.55,2.27,42.95,6.43,63.44,13.53,21.66,7.25,42.11,17.6,63.56,25.4,38.19,14.3,80.97,16.07,120.14,4.62,21.35-6.13,41.32-16.02,61.92-24.17,18.79-7.49,38.3-13.27,58.29-16.52,22.16-3.51,44.56-5.25,66.93-6.78,52.57-3.36,105.26-4.06,157.93-4.36,104.45,.44,208.99,3.46,313.04,12.97,32.6,3.31,65.25,7,97.27,14.16-1.33,43.74-2.42,87.56-7.09,131.1-1.42,10.97-2.81,22.05-6.31,32.59-1.84,5.26-4.52,10.84-9.72,13.48-5.21,2.39-11.14,2.05-16.51,3.89-8.58,2.66-15.08,9.42-20.2,16.52-8.43,11.83-14.39,25.19-19.83,38.6-6.27,15.48-10.86,31.56-15.68,47.53-4.64,15.28-10.15,30.6-19.5,43.7-6.8,9.33-14.65,18.35-24.86,24.03-4.34,2.52-8.92,4.57-13.46,6.68-29.98,11.87-61.97,17.34-93.73,21.97-44.86,6.18-90.11,9.21-135.38,9.83-13,.57-26.04,.53-39.04,.06-48.54-.72-97.19-3.99-144.98-12.81-21.49-4.12-42.91-9.35-63.13-17.84-13.32-5.76-26.72-12.98-35.75-24.68-12.26-16.89-21.5-35.83-28.53-55.43-6.75-18.58-11.67-37.78-18.86-56.2-5.59-14.33-13.02-28.13-23.26-39.69-6.13-5.96-11.81-12.5-18.9-17.38-1.37-.97-2.68-1.97-3.99-2.99-2.86-2.24-5.98-4.09-9.03-6.03-2.27-1.56-4.66-2.91-7.1-4.13-6.99-4.43-14.65-7.66-22.15-11.1-6.43-.15-12.87-.04-19.3-.11-3.58-.28-6.68,1.75-9.87,3.02-5.26,2.59-10.66,4.98-15.61,8.16-2.4,1.21-4.73,2.53-7.01,3.94-6.92,4.17-13.42,9.03-19.57,14.27-6.53,6.51-13.56,12.65-18.75,20.35-9.68,13.24-16.19,28.47-21.43,43.94-6.62,19.42-11.94,39.32-20,58.23-6.27,14.72-13.9,28.94-23.41,41.84-10.35,12.87-25.65,20.37-40.66,26.42-21.93,8.57-45.09,13.48-68.25,17.37-49.68,8.27-100.11,10.65-150.4,11.17-51.07-.26-102.21-2.73-152.86-9.55-24.39-3.3-48.7-7.56-72.47-13.97-16.28-4.67-32.88-9.8-46.9-19.61-15.06-12.07-25.79-28.88-32.36-46.9-7.18-19.66-11.84-40.16-19.43-59.68-6.34-16.17-13.19-32.51-24.16-46.15-4.13-5.72-10.08-9.9-16.49-12.69-6.21-1.88-12.73-2.26-18.91-4.23-2.64-2.38-4.97-5.08-6.85-8.09-1.49-4-3.08-7.97-4.02-12.14-3.68-17.23-5.52-34.79-6.6-52.34-1.02-5.84-.37-11.81-1.36-17.64-.61-5.98,0-12.03-.97-17.98-.53-7.45-.18-14.93-.57-22.38-.77-8.97-.49-17.98-.89-26.96-.2-6.67-.58-13.34-.51-20.02,24.43-5.42,49.23-8.87,74.08-11.66,50.25-5.57,100.72-8.74,151.2-11.14m32,31.77c-24.27,1.59-48.68,4.52-71.89,12.1-11.99,3.85-23.42,9.41-33.74,16.62l.13,.43c-2.71,1.52-5.22,3.39-7.39,5.61-3.45,3.5-7.3,6.69-10.04,10.82-2.13,2.4-4.14,4.92-5.89,7.63-11.93,17.62-17.21,38.85-19.32,59.79-2.51,25.84-.59,51.91,2.97,77.56,4.77,33.58,14.33,67.48,34.47,95.26,11.16,15.44,25.66,28.4,42.15,37.94,31.15,17.97,67.25,24.74,102.65,28.13,26.55,2.54,53.25,3.09,79.91,3.14,28.48-.09,56.96-.07,85.43-1.03,23.95-.49,47.92-1.72,71.73-4.42,20.39-2.49,40.83-6.09,60.05-13.55,14.29-5.53,27.88-13.27,39.07-23.83,15.64-14.17,26.47-32.82,34.34-52.21,6.97-17.53,12.25-35.73,16.13-54.18,.78-2.99,1.48-5.98,1.98-9.01,4.28-21.06,8.33-42.24,9.36-63.74-.14-20.91-3.61-42.35-14.07-60.76-.62-.95-1.23-1.88-1.81-2.8-3.03-5.44-6.87-10.4-11.31-14.75-1.88-3.04-4.31-5.86-7.5-7.55l.27-.29c-2.1-1.62-4.02-3.5-6.35-4.76l.48-.45c-1.45-.84-2.88-1.67-4.33-2.46l.12-.51c-6.37-4.21-12.86-8.28-19.78-11.55-2.96-1.42-5.93-2.8-8.95-4.06-1.68-.67-3.35-1.33-5.01-1.98-28.08-10.73-58.04-15.45-87.83-18.42-24.63-2.19-49.34-3.37-74.07-3.38-10.64-.65-21.3-.33-31.95-.49-30-.04-60.01-.26-90.01-.39-23.35-.03-46.71-.09-70,1.54m810.03,5.84c-20.99,3.29-41.97,7.61-61.82,15.34-1.68,.64-3.35,1.31-5.01,1.99-3.74,1.51-7.36,3.27-10.96,5.08-8.29,3.89-15.74,9.21-23.05,14.64-1.13,1.01-2.21,2.05-3.29,3.1-2.95,2.19-5.7,4.64-8.24,7.29-.13,.42-.38,1.27-.51,1.69-2.64,1.5-4.38,4.02-6.02,6.5l-.41,.06c-6.53,8.93-11.83,18.79-15.14,29.36-7.06,21.74-6.92,45.13-3.72,67.56,3,19.08,6.54,38.09,11.15,56.85,4.79,19.36,10.71,38.55,19.39,56.55,7.81,16.09,18.11,31.25,31.8,42.92,10.76,9.34,23.39,16.38,36.68,21.42,19.56,7.45,40.32,11.09,61.03,13.53,23.26,2.57,46.66,3.78,70.05,4.25,29,1,58.03,.97,87.04,1.06,24.95-.04,49.92-.6,74.79-2.75,32.84-2.96,66.14-8.49,96.05-22.99,26.71-12.75,49.31-34.11,63.1-60.34,1.9-3.36,3.82-6.75,4.94-10.46l.45-.03c12.98-29.39,18.56-61.39,21.28-93.22,1.2-7.31,.35-14.75,1.33-22.08,.35-5.25,.35-10.54-.27-15.76-.67-20.05-3.66-40.48-11.94-58.9-1.3-3.93-3.39-7.5-5.53-11-5.08-8.9-11.8-16.77-19.41-23.58-.99-.61-1.91-1.26-2.7-2.05-4.06-3.56-8.61-6.5-13.16-9.38-.23,0-.68-.04-.91-.05-3.33-2.44-7.14-4.09-10.88-5.73-17.83-7.68-37.01-11.63-56.18-14.13-26.18-3.24-52.6-4.09-78.97-4.12-29.31-.08-58.63,.26-87.95,.34-51.06,.25-102.34-.15-153.01,7.04Z"/></g><path class="b" d="M682.83,1635.48c20.57-2.51,41.19-6.14,60.58-13.67,14.42-5.58,28.12-13.39,39.41-24.04,15.78-14.29,26.7-33.11,34.64-52.67,7.03-17.68,12.36-36.04,16.27-54.65,.79-3.02,1.49-6.03,2-9.09,4.32-21.24,8.4-42.61,9.44-64.3-.14-21.09-3.64-42.72-14.19-61.29-.63-.96-1.24-1.9-1.83-2.82-3.06-5.49-6.93-10.49-11.41-14.88-1.9-3.07-4.35-5.91-7.57-7.62l.27-.29c-2.12-1.63-4.06-3.53-6.41-4.8l.48-.45c-1.46-.85-2.91-1.68-4.37-2.48l.12-.51c-6.43-4.25-12.97-8.35-19.95-11.65-2.99-1.43-5.98-2.82-9.03-4.1-1.69-.68-3.38-1.34-5.05-2-28.33-10.82-58.55-15.59-88.6-18.58-24.85-2.21-49.77-3.4-74.72-3.41-10.73-.66-21.49-.33-32.23-.49-30.26-.04-60.54-.26-90.8-.39-23.55-.03-47.12-.09-70.61,1.55-24.48,1.6-49.11,4.56-72.52,12.21-11.94,3.83-23.32,9.35-33.62,16.49-.13,.1-.27,.21-.4,.31l.12,.4c-1.12,.63-2.2,1.34-3.25,2.09-1.2,.98-2.39,1.96-3.57,2.97-.21,.2-.43,.39-.64,.6-3.48,3.53-7.36,6.75-10.13,10.91-2.15,2.42-4.18,4.96-5.94,7.7-12.03,17.77-17.36,39.19-19.49,60.31-2.53,26.07-.6,52.36,3,78.24,4.81,33.87,14.46,68.07,34.77,96.09,11.26,15.58,25.88,28.65,42.52,38.27,31.42,18.13,67.84,24.96,103.55,28.38,26.78,2.56,53.72,3.12,80.61,3.17,28.73-.09,57.46-.07,86.18-1.04,24.16-.49,48.34-1.74,72.36-4.46Z"/><path class="b" d="M1106.64,1339.23c-.13,.42-.38,1.27-.51,1.69-2.64,1.5-4.38,4.02-6.02,6.5l-.41,.06c-6.53,8.93-11.83,18.79-15.14,29.36-7.06,21.74-6.92,45.13-3.72,67.56,3,19.08,6.54,38.09,11.15,56.85,4.79,19.36,10.71,38.55,19.39,56.55,7.81,16.09,18.11,31.25,31.8,42.92,10.76,9.34,23.39,16.38,36.68,21.42,19.56,7.45,40.32,11.09,61.03,13.53,23.26,2.57,46.66,3.78,70.05,4.25,29,1,58.03,.97,87.04,1.06,24.95-.04,49.92-.6,74.79-2.75,32.84-2.96,66.14-8.49,96.05-22.99,26.71-12.75,49.31-34.11,63.1-60.34,1.9-3.36,3.82-6.75,4.94-10.46l.45-.03c12.98-29.39,18.56-61.39,21.28-93.22,1.2-7.31,.35-14.75,1.33-22.08,.35-5.25,.35-10.54-.27-15.76-.67-20.05-3.66-40.48-11.94-58.9-1.3-3.93-3.39-7.5-5.53-11-5.08-8.9-11.8-16.77-19.41-23.58-.99-.61-1.91-1.26-2.7-2.05-4.06-3.56-8.61-6.5-13.16-9.38-.23,0-.68-.04-.91-.05-3.33-2.44-7.14-4.09-10.88-5.73-17.83-7.68-37.01-11.63-56.18-14.13-26.18-3.24-52.6-4.09-78.97-4.12-29.31-.08-58.63,.26-87.95,.34-51.06,.25-102.34-.15-153.01,7.04-20.99,3.29-41.97,7.61-61.82,15.34-1.68,.64-3.35,1.31-5.01,1.99-3.74,1.51-7.36,3.27-10.96,5.08-8.29,3.89-15.74,9.21-23.05,14.64-1.13,1.01-2.21,2.05-3.29,3.1-2.95,2.19-5.7,4.64-8.24,7.29Z"/></svg>',
          icon_qr: '<svg class="levar-icon-qr" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 71.75 122.88" style="enable-background:new 0 0 71.75 122.88" xml:space="preserve"><g><path class="levar-svg-path" d="M12.89,0H58.9c1.73,0,3.4,0.35,4.91,0.98c1.58,0.65,3,1.61,4.18,2.79c1.18,1.18,2.14,2.6,2.79,4.18 c0.63,1.52,0.98,3.18,0.98,4.91v97.17c0,1.73-0.35,3.39-0.98,4.91c-0.65,1.58-1.61,3-2.79,4.18c-1.18,1.18-2.6,2.13-4.18,2.79 c-1.52,0.63-3.18,0.98-4.91,0.98H12.89c-1.73,0-3.39-0.35-4.91-0.98c-1.58-0.65-3-1.61-4.18-2.79l-0.03-0.03 c-1.17-1.18-2.11-2.59-2.76-4.15c-0.63-1.52-0.98-3.18-0.98-4.91V60.32C0.01,60.2,0,60.09,0,59.98c0-0.11,0.01-0.23,0.04-0.34 V12.86c0-1.73,0.35-3.39,0.98-4.91C1.67,6.37,2.62,4.95,3.8,3.77c1.18-1.18,2.6-2.14,4.18-2.79C9.5,0.35,11.16,0,12.89,0L12.89,0z M6.4,52.89c0.32-0.32,0.75-0.48,1.17-0.48c0.42,0,0.84,0.16,1.17,0.48c0.32,0.32,0.49,0.75,0.49,1.17s-0.16,0.84-0.48,1.17 c-6.03,6.03-6.13,3.37-0.16,9.33c0.32,0.33,0.49,0.75,0.49,1.17c0,0.42-0.16,0.85-0.48,1.17c-0.32,0.32-0.75,0.48-1.17,0.48 c-0.42,0-0.84-0.16-1.17-0.49l-2.25-2.25v33.83H67.8V64.49l-2.44,2.44c-0.32,0.3-0.73,0.45-1.14,0.45c-0.42,0-0.85-0.16-1.17-0.48 c-0.32-0.32-0.48-0.75-0.48-1.17c0-0.42,0.16-0.84,0.48-1.17l4.59-4.59l-4.78-4.78c-0.3-0.32-0.45-0.73-0.45-1.14 c0-0.42,0.16-0.85,0.48-1.17l0.03-0.03c0.32-0.3,0.73-0.45,1.14-0.45c0.42,0,0.85,0.16,1.17,0.48l2.57,2.57V20.04H3.99V55.3 L6.4,52.89L6.4,52.89z M28.81,89.31c-0.32-0.32-0.48-0.75-0.48-1.17c0-0.42,0.16-0.84,0.48-1.17c0.32-0.32,0.75-0.49,1.17-0.49 c0.42,0,0.84,0.16,1.17,0.48l4.75,4.75l4.62-4.62c0.32-0.3,0.73-0.45,1.14-0.45c0.42,0,0.84,0.16,1.17,0.48l0.03,0.03 c0.3,0.32,0.45,0.73,0.45,1.13c0,0.42-0.16,0.84-0.48,1.16l-5.76,5.76c-0.32,0.32-0.75,0.48-1.17,0.48c-0.42,0-0.84-0.16-1.17-0.48 L28.81,89.31L28.81,89.31z M31.12,32.85c-0.32,0.3-0.73,0.45-1.14,0.45c-0.42,0-0.84-0.16-1.17-0.48 c-0.32-0.33-0.49-0.75-0.49-1.17c0-0.42,0.16-0.85,0.48-1.17l5.95-5.95c0.32-0.3,0.73-0.45,1.13-0.45c0.42,0,0.85,0.16,1.17,0.48 l5.79,5.79c0.3,0.32,0.45,0.73,0.45,1.13c0,0.42-0.16,0.84-0.48,1.17l0,0c-0.32,0.32-0.75,0.48-1.17,0.48 c-0.42,0-0.84-0.16-1.17-0.48l-4.59-4.59L31.12,32.85L31.12,32.85z M20.44,62.13c0-0.34,0.14-0.64,0.36-0.86 c0.22-0.22,0.53-0.36,0.86-0.36c0.33,0,0.64,0.14,0.86,0.36l0,0c0.22,0.22,0.36,0.53,0.36,0.86l0,2.98l1.63,0.76 c0.29,0.14,0.49,0.39,0.6,0.67c0.1,0.28,0.1,0.6-0.02,0.89l-0.03,0.08c-0.14,0.29-0.39,0.49-0.67,0.6 c-0.29,0.11-0.63,0.1-0.93-0.04c-0.63-0.29-1.45-0.59-2.03-0.96c-0.18-0.12-0.34-0.26-0.48-0.42c-0.14-0.16-0.25-0.35-0.33-0.55 l-0.01-0.03c-0.06-0.15-0.1-0.31-0.13-0.46c-0.03-0.16-0.04-0.34-0.04-0.52L20.44,62.13L20.44,62.13z M35.02,80.29l-18.77-9.79 c-0.26-0.13-0.46-0.33-0.6-0.56c-0.13-0.22-0.21-0.46-0.22-0.71l-0.01-0.08V47.06c0-0.38,0.14-0.74,0.38-1.01 c0.23-0.26,0.55-0.45,0.9-0.51l18.6-6.2c0.16-0.05,0.33-0.08,0.49-0.08c0.16,0,0.31,0.02,0.45,0.07l18.94,6.48 c0.34,0.11,0.61,0.34,0.79,0.62c0.18,0.28,0.27,0.62,0.25,0.96c0.19,7.23,0,14.75,0,22.02l-0.01,0.08 c-0.01,0.26-0.09,0.51-0.23,0.73c-0.14,0.23-0.35,0.43-0.61,0.56l-18.76,9.53c-0.11,0.06-0.23,0.11-0.35,0.15 c-0.13,0.04-0.27,0.06-0.41,0.06c-0.15,0-0.29-0.02-0.43-0.06C35.27,80.42,35.14,80.36,35.02,80.29L35.02,80.29z M18.5,49.4v18.81 l15.8,8.24V56.57L18.5,49.4L18.5,49.4z M37.38,56.58v19.9l15.75-8V49.64L37.38,56.58L37.38,56.58z M35.77,42.43l-14.53,4.84 l14.61,6.63l14.6-6.43L35.77,42.43L35.77,42.43z M29.24,113.08c-0.54,0-1.05-0.22-1.41-0.59c-0.36-0.36-0.58-0.85-0.58-1.41 c0-0.54,0.22-1.05,0.59-1.41l0.03-0.03c0.36-0.34,0.84-0.56,1.37-0.56h13.6c0.54,0,1.05,0.22,1.41,0.59 c0.36,0.36,0.58,0.85,0.58,1.41c0,0.54-0.22,1.05-0.59,1.41c-0.36,0.36-0.85,0.58-1.41,0.58H29.24L29.24,113.08z M27.96,7.09 c0.8,0,1.51,0.32,2.03,0.84c0.52,0.52,0.84,1.24,0.84,2.03c0,0.8-0.32,1.51-0.84,2.03l-0.03,0.03c-0.52,0.5-1.22,0.81-2,0.81 c-0.79,0-1.51-0.32-2.03-0.84l-0.03-0.03c-0.5-0.52-0.81-1.22-0.81-2c0-0.8,0.32-1.51,0.84-2.03l0.03-0.03 C26.48,7.4,27.18,7.09,27.96,7.09L27.96,7.09z M35.9,7.09c0.79,0,1.51,0.32,2.03,0.84c0.52,0.52,0.84,1.24,0.84,2.03 c0,0.79-0.32,1.51-0.84,2.03c-0.52,0.52-1.24,0.84-2.03,0.84c-0.79,0-1.51-0.32-2.03-0.84c-0.52-0.52-0.84-1.24-0.84-2.03 c0-0.8,0.32-1.51,0.84-2.03C34.38,7.41,35.1,7.09,35.9,7.09L35.9,7.09z M43.83,7.09c0.79,0,1.51,0.32,2.03,0.84 c0.52,0.52,0.84,1.24,0.84,2.03c0,0.79-0.32,1.51-0.84,2.03c-0.52,0.52-1.24,0.84-2.03,0.84c-0.79,0-1.51-0.32-2.03-0.84 c-0.52-0.52-0.84-1.24-0.84-2.03c0-0.79,0.32-1.51,0.84-2.03C42.32,7.41,43.04,7.09,43.83,7.09L43.83,7.09z M67.8,102.44H3.99v7.55 c0,1.21,0.24,2.35,0.68,3.4c0.46,1.09,1.12,2.06,1.95,2.87l0,0c0.83,0.83,1.82,1.5,2.9,1.95c1.04,0.44,2.18,0.68,3.37,0.68H58.9 c1.21,0,2.35-0.24,3.4-0.68c1.09-0.46,2.06-1.12,2.87-1.95c0.83-0.83,1.5-1.82,1.96-2.9c0.44-1.04,0.68-2.18,0.68-3.37V102.44 L67.8,102.44z M3.99,16.05H67.8v-3.2c0-1.21-0.24-2.36-0.68-3.4C66.66,8.37,66,7.4,65.17,6.59l0,0c-0.83-0.83-1.81-1.5-2.9-1.95 c-1.04-0.44-2.18-0.68-3.37-0.68H12.89c-1.21,0-2.36,0.24-3.4,0.68C8.41,5.09,7.44,5.76,6.63,6.58l0,0 c-0.83,0.83-1.5,1.81-1.95,2.9c-0.44,1.04-0.68,2.18-0.68,3.37V16.05L3.99,16.05z"></path></g></svg>',
        },
        modal_qr: null,
        modal_viewer: null,
        viewer_ar: null,
        viewer_close_button: null,
        viewer_close_button_mobile: null,
        viewer_debut: null,
        viewer_master: null,
        viewer_modal: null,
        viewer_player: null,
      },
      errors: {
        asset_blocked: '<<*** BLOCKED - Asset Not Availabe For Selected Variant ***>>',
        target_missing: '<<*** LEVAR - Target Not Found (insertViewer) ***>>',
      },
      events: {
        ar_launch_click: 'ar_launch_click',
        data_types: {
          ipad_exit: 'iPadExit',
          levar_viewer_close: 'levarViewerClose',
        },
        direct_qr_open: 'direct_qr_open',
        modal_launch_click: 'modal_launch_click',
        pdp_variant_change: 'pdp_variant_change',
        viewer_launch_click: 'viewer_launch_click',
        viewer_page_exit: 'viewer_page_exit',
      },
      ids: {
        activation_ids: {
          all_activations: [],
          ar_button_id: 'levar-ar-experience-button',
          custom_button_id: 'levar-custom-button',
          debut_button_id: 'levar-debut-button',
          default_button_ids: [],
          found_activations: [],
          other_button_ids: [
            'levar-player-mobile',
            'levar-direct-qr-button-mobile',
            'levar-custom-button-mobile',
            'levar-debut-button-mobile',
            'levar-ar-experience-button-mobile',
          ],
          player_button_id: 'levar-player',
          qr_button_id: 'levar-direct-qr-button',
        },
        activation_response_ids: {
          debut_id: 'levar_debut',
          disabled_id: 'off',
          enabled_id: 'on',
          modal_id: 'levar_modal',
          player_id: 'levar_player',
        },
        billboard_id: 'levar-billboard',
        body_classes: {
          levar_loaded: 'levar-loaded',
          player_active: 'levar_player_on',
          try_on_active: 'levar_try_on_active',
        },
        cookie_ids: {
          levar_conversion_id: 'levar_conversion',
          levar_pixel_id: 'levar_pixel',
          shopify_analytics_id: '_shopify_y',
        },
        debut_toggle_id: 'levar-debut-toggle',
        default_bar_ids: {
          default_bar_id: 'levar_default_bar',
          default_button_ids: {
            default_3d_id: 'levar-3d-button',
            default_qr_id: 'levar-qr-button',
            default_button_class: 'levar-default-button',
            default_close_id: 'levar-default-close-button',
            default_trigger_id: 'levar_default_trigger',
          },
          default_closed_class: 'levar-default-closed',
        },
        icon_target_id: 'icon-target',
        iframe_ids: {
          billboard_iframe_id: 'levar_billboard_iframe',
          close_iframe_id: 'levar_iframe_close',
          debut_iframe_id: 'levar_debut_iframe',
          master_iframe_id: 'levar_master_id',
          player_iframe_id: 'levar_player_iframe',
        },
        levar_user_id: '_levar_user_id',
        modal_ids: {
          modal_activation_ids: ['levar-custom-button', 'levar-3d-button'],
          modal_close_id: 'levar-close-modal',
          modal_container_id: 'levar-modal-container',
          modal_content_id: 'levar-modal-content',
          modal_id: 'levar-modal',
          modal_type_ids: {
            qr_modal_id: 'qr',
            viewer_modal_id: 'viewer',
          },
        },
        pdp_form_hidden_field: '[name="id"]',
        qr_code: 'qrcode',
        style_id: 'levar-styles',
        target_ids: {
          master_target_id: 'levar_photo_box',
        },
      },
      info: {
        ar_experience_type: null,                         // Type of AR experience (e.g. Try On)
        asset_ready: false,
        auto_launch_ar: false,
        billboard_status: false,                          // Is billboard enabled
        custom_button: false,                             // Is custom button enabled
        custom_text: { 
          qr_header: 'You\'re moments away from Augmented Reality',  // QR modal header text
          qr_footer: 'Scan this QR code with your phone\'s camera',   // QR modal footer text
        },
        debut_toggle: false,                              // Is debut toggle enabled
        default_bar: false,                               // Is default bar enabled
        direct_qr: false,                                 // Is direct to QR enabled
        fullscreen: true,
        imbed_viewer: false,
        levar_player: false,                              // Is levar player enabled
        model_3d_id: null,
        model_placement: null,                            // e.g ceiling, floor, wall
        origin: 'shopify',                                // Viewer origin always Shopify for this script
        preload_viewer: false,                            // Is preload enabled
        product_id: ShopifyAnalytics.meta.product.id,     // Shopify product ID
        static_vto_face_0: null,                          // Face VTO model ID (8th wall)
        static_viewer_0: null,                            // Static Viewer Model ID (model viewer)
        store_id: null,                                   // Shopify store ID
        store_variant_id: checkVariantID(true, false),
        translation_inactive: false,                      // Is weglot enabled
        variant_id: checkVariantID(true),                 // Shopify selected variant ID
        pdp_variant_switch: false,                            // Is variant switch with open viewer enabled
        view_in_ar: false,                                // Is view in AR button inside viewer disabled
        view_in_space_off: false,                         // Is view in space button inside desktop viewer disabled
      },
      init: init,
      session_info: {
        environment: (!window.location.pathname.includes('/products/') && !window.location.pathname.includes('products_preview')) ? 'pdp' : null,
        google_analytics: (typeof gtag === 'function') ? true : false,
        initialized: false, // initialized script has run once
        is_mobile: mobileCheck(),
        klaviyo: checkKlaviyo(),
        levar_pixel_id: getCookie('levar_pixel'),
        levar_session_id: null, // Analytics
        // levar_session_token: null,
        mobile_device: getMobileOperatingSystem(),
        open_viewer_activation: null,
        open_viewer_id: null,
        referrer: window.location.href, // For exit button
        ua: window.navigator.userAgent, // Current user agent string - is this being used?
        viewer_on: false, // viewer currently on 
      },
      styles: {
        activations: {
          hotspot: `.levar-hotspot { position: absolute; top: 1.25rem; right: 1rem; z-index: 2; justify-content: flex-end; color: #fff; background: #fff; padding: 0; align-items: center; border-radius: 45px; transition: all 1s ease; overflow: hidden; transition: all 0.5s ease-in-out; margin: 0; min-width: 0px; width: 260px; max-width: 50px; min-height: 0; height: 48px; display: inline-flex; border: #ccc 1px solid; box-shadow: 1px 1px 4px 1px rgba(0, 0, 0, 0.08); }
                    .levar-hotspot:before, .levar-hotspot:after { display: none; }
                    .levar-hotspot .levar-button-icon { position: relative; z-index: 2; height: 100%; padding: 3px 10px 2px 10px; display: flex; justify-content: center; align-items: center; overflow: hidden; border-radius: 50%; transition: all 0.5s ease-in-out; background-color: #f7f7f7; background-image: -webkit-gradient(linear, left top, left bottom, from(#f7f7f7), to(#e7e7e7)); background-image: -webkit-linear-gradient(top, #f7f7f7, #e7e7e7); background-image: -moz-linear-gradient(top, #f7f7f7, #e7e7e7); background-image: -ms-linear-gradient(top, #f7f7f7, #e7e7e7); background-image: -o-linear-gradient(top, #f7f7f7, #e7e7e7);}
                    .levar-hotspot svg { width: 28px; max-height: 28px; margin: 0; }
                    .levar-hotspot .levar-icon-3d .levar-svg-path { stroke: #242525; transition: all 0.5s ease; }
                    .levar-hotspot span { position: absolute; z-index: 1; left: 20px; opacity: 0; font-size: 14px; transition: all 1s ease 0s; white-space: nowrap; font-weight: 500; }
                    .levar-hotspot:hover, .levar-hotspot:focus, .levar-hotspot.levar-expand { max-width: 154px; background: #12ac74; box-shadow: 1px 1px 6px 0px rgba(0, 0, 0, 0.37); color: #fff; border-color: #999999; }
                    .levar-hotspot:hover span, .levar-hotspot:focus span, .levar-hotspot.levar-expand span { opacity: 1; }
                    .levar-hotspot:hover .levar-icon-3d .levar-svg-path, .levar-hotspot:focus .levar-icon-3d .levar-svg-path, .levar-hotspot.levar-active .levar-icon-3d .levar-svg-path { stroke: #12ac74 !important; }`,
          default: `.levar-button { border: none; outline: none; display: inline-flex; align-items: center; justify-content: center; transition: all 0.25s ease-in-out; opacity: 0; pointer-events: none; padding: 8px 16px; min-height: 60px; width: 100%; background-color: #222; color: #fff; cursor: pointer; visibility: visible; text-transform: uppercase; font-size: 16px; }
                    .levar-button .levar-icon { display: inline-block; margin-right: 20px; margin-left: -16px; }
                    .levar-button svg { width: 44px; height: 44px; }
                    .levar-button .levar-svg-path { transition: 0.25s ease-in-out; }
                    .levar-button .levar-icon-3d .levar-svg-path { stroke: #fff; }
                    .levar-button .levar-icon-qr .levar-svg-path { fill: #fff; }
                    .levar-button:hover { background-color: #444; }`,
          toggle_switch: `.levar-toggle { position: absolute; right: 10px; top: 10px; z-index: 1000; padding: 0; border: none; background: none; transition: all .3s ease-in-out; }
                          .levar-toggle:focus { outline: none; }
                          .levar-toggle .levar-switch { position: relative; display: inline-block; width: 60px; height: 34px; }  
                          .levar-toggle .levar-switch input { opacity: 0; width: 0; height: 0; }
                          .levar-toggle .levar-switch-slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; -webkit-transition: .4s; transition: .4s; border-radius: 34px; }
                          .levar-toggle .levar-switch-slider::before { position: absolute; content: "3D"; line-height: 27px; height: 26px; width: 26px; left: 4px; bottom: 4px; background-color: white; -webkit-transition: .4s; transition: .4s; border-radius: 50%; text-align: center; }
                          .levar-toggle input:checked + .levar-switch-slider { background-color: #2196F3; }
                          .levar-toggle input:focus + .levar-switch-slider { box-shadow: 0 0 1px #2196F3; }
                          .levar-toggle input:checked + .levar-switch-slider:before { -webkit-transform: translateX(26px); -ms-transform: translateX(26px); transform: translateX(26px); }`,
        },
        activation_container: 'display: flex; align-items: center; justify-content: space-between; width: 100%;',
        active_button: 'opacity: 1; cursor: pointer; pointer-events: all; transition: all 1s ease;',
        billboard_iframe: 'width: 100%; height: 100%; min-height: 900px; position: relative; outline: none; overflow: hidden; margin: 2rem auto; border: 0; z-index: 1; outline: none; box-shadow: none;',
        default_bar: `.levar-cta-trigger { display: flex; padding: 8px; background: #222222; z-index: 999999998; position: fixed; left: 0; top: 40vh; cursor: pointer; box-shadow: rgba(0, 0, 0, 0.35) 0px 4px 8px 0px, rgba(0, 0, 0, 0.35) 0px 6px 20px 0px; animation: ctaOpen 0.75s 1 normal ease-in-out forwards; }
                      .trigger-logo { width: 50px; height: 50px; pointer-events: none; }
                      .levar-cta { background: #222222; box-sizing: border-box; position: fixed; top: 30vh; left: 0px; padding: 38px 8px 8px 8px; width: 100%; max-width: 194px; display: flex; flex-wrap: wrap; flex-direction: column; justify-content: space-between; align-items: center; z-index: 999999999; overflow: hidden; text-align: center; box-shadow: rgba(0, 0, 0, 0.35) 0px 4px 8px 0px, rgba(0, 0, 0, 0.35) 0px 6px 20px 0px; animation: ctaClose 1s 1 normal ease-in-out forwards; border-top-right-radius: 3px; border-bottom-right-radius: 3px; }
                      .levar-top, .levar-bottom { display: flex; align-items: center; flex: 2; z-index: 9; flex-direction: column; }
                      .levar-top { margin-bottom: 16px;  align-items: flex-start; width: 100%; font-size: 16px; }
                      .levar-bottom { justify-content: center; flex: 1; flex-wrap: wrap; width: 100%; }
                      .cta-logo { width: 40px; height: 40px; margin-top: 12px; }
                      #levar-copy { color: #f1f1f1; font-size: 16px; width: 100%; }
                      #levar_default_bar span { text-transform: none; color: #fff; font-size: revert; }
                      .levar-default-button { position: relative; width: 100%; padding: 0; display: flex; justify-content: flex-end; align-items: center; flex-direction: row-reverse; font-family: inherit; font-size: 14px; color: rgb(242, 240, 237) !important; cursor: pointer; background-color: transparent !important; transition: 0.4s ease; text-decoration: none; margin-bottom: 1em; border: none !important; height: auto; min-height: 1px; }
                      .levar-default-button span { flex-grow: 1; text-align; }
                      .levar-default-button-icon { overflow: hidden; width: 72px; height: 72px; position: relative; margin-right: auto; padding: 10px 10px; border-radius: 50%; transition: all 0.33s linear; transform: translateY(0); }
                      .levar-default-button-bg { position: absolute; z-index: -1; top: 0; left: 0; width: 100%; height: 100%; transition: all 0.25s ease-in-out; background-color: #5c5c5c; border-radius: 50%; transform: scale(0); }
                      .levar-icon, .levar-icon-animated { position: absolute; top: 12px; left: 12px; right: 12px; cursor: pointer; transition: opacity 0.75s ease-in; pointer-events: none; }
                      .levar-icon { opacity: 1; }
                      .icon-target { opacity: 0; transition: opacity 0.75s ease-in; }
                      .levar-default-button svg { max-width: 38px; max-height: 42px; }
                      .levar-default-button .b { fill: rgb(242, 240, 237); }
                      #levar-icon-3d .b { stroke: rgb(242, 240, 237) !important; }
                      #levar-qr-button .levar-icon, #levar-qr-button .levar-icon-animated { top: 6px; left: 6px; right: 6px; }
                      .levar-default-button:hover .levar-icon { opacity: 1; }
                      .levar-default-button:hover .levar-default-button-bg { transform: scale(1); }
                      .levar-default-button:hover .icon-target { opacity: 1; }
                      .levar-default-button:hover .levar-default-button-icon { box-shadow: 1px 1px 1px 0 rgba(0, 0, 0, 0.35), -1px 2px 8px 0 rgba(0, 0, 0, 0.35); -webkit-box-shadow: 1px 1px 1px 0 rgba(0, 0, 0, 0.35), -1px 2px 8px 0 rgba(0, 0, 0, 0.35); -moz-box-shadow: 1px 1px 1px 0 rgba(0, 0, 0, 0.35), -1px 2px 8px 0 rgba(0, 0, 0, 0.35); }
                      #levar-default-close-button { width: 20px; height: 20px; position: absolute; z-index: 3; top: 8px; right: 8px; cursor: pointer; transition: all .5s ease; }
                      #levar-default-close-button:hover { opacity: .5; }
                      #levar-default-close-button:before, #levar-default-close-button:after { position: absolute; left: 7px; top: 2px; content: ' '; height: 16px; width: 2px; background-color: #828282; }
                      #levar-default-close-button:before { transform: rotate(45deg); }
                      #levar-default-close-button:after { transform: rotate(-45deg); }
                      .levar-loaded .levar-cta { animation: ctaOpen 1s 1 normal ease-in-out forwards; }
                      .levar-loaded .levar-cta-trigger { animation: ctaClose 1s 1 normal ease-in-out forwards; }
                      .levar-loaded .levar-default-closed.levar-cta { animation: ctaClose 1s 1 normal ease-in-out forwards; }
                      .levar-loaded .levar-default-closed.levar-cta-trigger { opacity: 1; animation: ctaOpen 0.75s 1 0.75s normal ease-in-out both; }
                      .levar-loaded .levar-default-closed.levar-cta-trigger .trigger-logo { animation: bounce 5s ease-in-out infinite both 5s; }
                      @keyframes ctaOpen { 0% {transform: translateX(-110%);} 100% {transform: translateX(0);} }
                      @keyframes ctaClose { 0% {transform: translateX(0);} 100% {transform: translateX(-110%);} }
                      @keyframes bounce { 0%, 7.5%, 15%, 22.5%, 35%, 42.5% { scale: 1; } 10.25% { scale: 0.8; } 25.75% { scale: .8; } }
                      #levar-branding { margin-top: 10px; padding-top: 6px; color: #C6C8CA; font-size: 10px; display: flex; width: 100%; justify-content: flex-end; align-items: flex-end; text-decoration: none; }
                      #levar-branding span { line-height: 1;  margin-right: 5px; }
                      #levar-branding svg { max-width: 50px; width: 50px; transform: translateY(-1px); }`,
        default_iframe: 'width:100%; height:100%; border:none; margin:0; padding:0; z-index: 99; position: absolute; top: 0px; right: 0px; left: 0px; bottom: 0px; overflow: hidden; outline: none; box-shadow: none;',
        inactive_button: 'opacity: 0; pointer-events: none; display: none;',
        initial: `button[data-levar-activation] { opacity: 0; pointer-events: none; }
                  button[data-levar-activation] * { pointer-events: none; }
                  #levar_master_id { min-height: 510px; }`,
        mobile_iframe: 'width:100%; height:100%; z-index: 9999999999; border:none; margin:0; padding:0; position: fixed; top: 0px; right: 0px; left: 0px; bottom: 0px; overflow: hidden;',
        modal_iframe: 'width: 95vw; height: 90vh; max-height: 80vh; max-width: 80vw; position: relative; outline: none; overflow: hidden; margin: 0 auto; border: 0; outline: none; box-shadow: none;',
        modal_style: `#levar-modal { background-color: rgba(0, 0, 0, 0.75); z-index: 999999999; width:100%; height:100%; border:none; margin:0; padding:0; position: fixed; top: 0px; right: 0px; left: 0px; bottom: 0px; overflow: hidden;}
                      .levar-modal-container { display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; min-height: 100vh; }
                      .levar-modal-box-custom { background: #ffffff; display: flex; max-height: calc(100% - 64px); padding: 2px; flex-direction: column; margin: 32px; position: relative; overflow-y: auto; border-radius: 2px; box-shadow: 0px 11px 15px -7px rgb(0 0 0 / 20%), 0px 24px 38px 3px rgb(0 0 0 / 14%), 0px 9px 46px 8px rgb(0 0 0 / 12%); } 
                      .levar-modal-box { max-width: 414px; background: #ffffff; display: flex; max-height: calc(100% - 64px); padding: 2px; flex-direction: column; margin: 32px; position: relative; overflow-y: auto; border-radius: 2px; box-shadow: 0px 11px 15px -7px rgb(0 0 0 / 20%), 0px 24px 38px 3px rgb(0 0 0 / 14%), 0px 9px 46px 8px rgb(0 0 0 / 12%); } 
                      .levar-modal-top { display: flex; justify-content: center; align-items: center; padding: 10px 16px; } .levar-modal-top h6 { color: #6d6d6d; margin: 0; font-size: 17px; font-family: inherit; font-weight: 500; line-height: 2; } 
                      .levar-modal-bottom { display: flex; padding: 15px; justify-content: center; } .levar-modal-bottom p { color: #6d6d6d;  margin: 0;  }
                      .levar-qr-body { padding: 16px 24px; position: relative; display: flex; justify-content: center; align-items: center; border-top: 1px solid rgba(0, 0, 0, 0.12); border-bottom: 1px solid rgba(0, 0, 0, 0.12); } 
                      .levar-qr-body canvas { cursor: default; position: relative; }
                      .qrBorder { position: relative; padding: 16px; } .qrBorder::before, .qrBorder::after, .qrBorder > :first-child:before, .qrBorder > :first-child:after { content: ' '; position: absolute; width: 40px; height: 40px; border-style: solid; border-color: #3f9fff; }
                      .qrBorder::before { top: 0; left:0; border-width: 3px 0 0 3px; } .qrBorder::after { top: 0; right:0; border-width: 3px 3px 0 0; } .qrBorder > :first-child:before { bottom: 0; right: 0; border-width: 0 3px 3px 0; } 
                      .qrBorder > :first-child:after { bottom: 0; left: 0; border-width: 0 0 3px 3px; }`,
        open_viewer_height: '510px',
        viewer_container: 'position: relative;',
        viewer_close_button: 'transition: opacity 2s; opacity: 0; position: absolute; top: 16px; right: 16px; font-size: 18px; z-index: 999; font-style: normal; cursor: pointer; background: rgb(194, 194, 194); padding: 6px 8px; line-height: 1; border-radius: 50%; border: none; outline: none; color: rgb(95, 95, 95); font-family: sans-serif;',
        viewer_close_button_mobile: 'transition: opacity 2s; opacity: 0; position: fixed; top: 16px; right: 16px; font-size: 18px; z-index: 2147483648; font-style: normal; cursor: pointer; background: rgb(194, 194, 194); padding: 6px 8px; line-height: 1; border-radius: 50%; border: none; outline: none; color: rgb(95, 95, 95); font-family: sans-serif;',
      }
    };
    return levar_object;
  }
})(window, document);
