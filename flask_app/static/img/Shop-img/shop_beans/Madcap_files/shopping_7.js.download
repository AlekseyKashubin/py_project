var extensions = {};
extensions['Someoddpilot.B2B.0.0.18'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/B2B/0.0.18/' + asset;
};
// @module Someoddpilot.B2B.Login
define('Someoddpilot.B2B.Login.View',
    [
        'b2b_lightbox_login.tpl', 'Someoddpilot.B2B.SS2Model', 'Backbone', 'Someoddpilot.B2B.Utils'
    ],
    function (
        b2b_lightbox_login_tpl, B2BSS2Model, Backbone, SomeoddpilotB2BUtils
    ) {
        'use strict';
        function handleLoginClick(event) {
            var form = jQuery(event.target.closest('form'));
            var formData = form.serializeObject();
            var fieldEmail = form.find('input[type="email"]').get(0);
            var fieldPassword = form.find('input[type="password"]').get(0);
            // Remove any existing error classes
            fieldEmail.classList.remove('form-error');
            fieldPassword.classList.remove('form-error');
            if (
                formData.email.trim().length < 5 ||
                !SomeoddpilotB2BUtils.isEmailValid(formData.email)
            ) {
                fieldEmail.classList.add('form-error');
                return false;
            }
            if (formData.password.trim().length < 10) {
                fieldPassword.classList.add('form-error');
                return false;
            }
            var companyId = SC.ENVIRONMENT.companyId;
            var siteId = container.getComponent('Environment').getSiteSetting('siteid');
            var baseUrl = new URL(SC.ENVIRONMENT.baseUrl);
            var scaPath = baseUrl.pathname.match(/^\/[^\/]+\//).pop();
            // Note: adding the siteId and companyId don't appear to be strictly
            // necessary, though is done to conform to existing requests
            var loginEndpoint = scaPath + 'services/Account.Login.Service.ss?n=' + siteId + '&c=' + companyId;
            jQuery.ajax(loginEndpoint, {
                    data: JSON.stringify(formData),
                    contentType: 'application/json',
                    type: 'POST'
                })
                .done(function (data, result) {
                    if (result !== 'success') {
                        console.warn('Unknown user state, login was not a success.');
                        return;
                    }
                    SomeoddpilotB2BUtils.updateUserObject(data.user);
                    SomeoddpilotB2BUtils.isB2BUser().done(function (isB2BUser) {
                        if (isB2BUser) {
                            // Reload to re-render as an authenticated user
                            window.location.reload();
                            return;
                        }
                        console.warn('User logged in but not a B2B user, directing to retail experience.');
                        var redirectURL = 'https://' +
                            SomeoddpilotB2BUtils.getRetailDomain() +
                            window.location.pathname +
                            window.location.search +
                            window.location.hash;
                        Backbone.history.location.assign(redirectURL);
                    });
                })
                .fail(function (data) {
                    console.error(data.responseJSON.errorMessage);
                });
            return false;
        }
        function retailRedirect(pathFragment) {
            var baseUrl = new URL(SC.ENVIRONMENT.baseUrl);
            var scaPath = baseUrl.pathname.match(/^\/[^\/]+\//).pop();
            var redirectURL = 'https://' +
                SomeoddpilotB2BUtils.getRetailDomain() +
                scaPath +
                pathFragment;
            Backbone.history.location.assign(redirectURL);
        }
        // @class Someoddpilot.B2B.Login.View @extends Backbone.View
        return Backbone.View.extend({
            template: b2b_lightbox_login_tpl
                ,
            initialize: function (options) {
                }
                ,
            events: {
                'click [data-action="login-button"]': handleLoginClick,
                'click [data-action="forgot-password"]': function () {
                    retailRedirect('checkout.ssp?is=login&login=T&fragment=login-register#forgot-password');
                },
                'click [data-action="sign-up"]': function () {
                    retailRedirect('checkout.ssp?is=login&login=T&fragment=login-register#login-register');
                }
            }
            ,
            bindings: {}
            ,
            childViews: {}
            //@method getContext @return Someoddpilot.B2B.Login.View.Context
            ,
            getContext: function getContext() {
                //@class Someoddpilot.B2B.Login.View.Context
            }
        });
    });
// @module Someoddpilot.B2B
define('Someoddpilot.B2B.View',
    [
        'b2b.tpl'
        , 'Someoddpilot.B2B.SS2Model'
        , 'Backbone'
    ]
    , function (
        b2b_tpl
        , B2BSS2Model
        , Backbone
    ) {
        'use strict';
        // @class Someoddpilot.B2B.View @extends Backbone.View
        return Backbone.View.extend({
            template: b2b_tpl
            , initialize: function (options) {
            }
            , events: {}
            , bindings: {}
            , childViews: {}
            //@method getContext @return Someoddpilot.B2B.View.Context
            , getContext: function getContext() {
                //@class Someoddpilot.B2B.View.Context
            }
        });
    });
// @module Someoddpilot.B2B.Wholesale
define('Someoddpilot.B2B.Wholesale.View',
    [
        'b2b_wholesale.tpl'
        , 'Someoddpilot.B2B.SS2Model'
        , 'Backbone'
    ]
    , function (
        b2b_wholesale_tpl
        , B2BSS2Model
        , Backbone
    ) {
        'use strict';
        // @class Someoddpilot.B2B.Wholesale.View @extends Backbone.View
        return Backbone.View.extend({
            template: b2b_wholesale_tpl
            , initialize: function (options) {
            }
            , events: {}
            , bindings: {}
            , childViews: {}
            //@method getContext @return Someoddpilot.B2B.Wholesale.View.Context
            , getContext: function getContext() {
                //@class Someoddpilot.B2B.Wholesale.View.Context
            }
        });
    });
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.B2B.Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "services/B2B.Service.ss"
            )
        )
    });
});
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.B2B.SS2Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/B2B/SuiteScript2/B2B.Service.ss"
            ),
            true
        )
    });
});
// @module Someoddpilot.B2B.Utils
define('Someoddpilot.B2B.Utils', [], function () {
    'use strict';
    // RFC 5322 compliant Email Address regex (99.99% applicable)
    var rgxEmail = new RegExp(/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/);
    // Closure scoped container reference
    var container;
    // Closure scoped eAPI references
    var config;
    var user;
    var userPromise;
    var CustomerCategory = {
        'B2B': '1',
        'B2C': '2'
    };
    function processUserData(callback) {
        // Create a deferred object to return
        var deferred = jQuery.Deferred();
        // If user data has been cached already immediately invoke callback
        if (typeof user !== 'undefined') {
            return deferred.resolve(callback(user));
        }
        // When the user profile promise has resolved, resolve this deferred
        userPromise.done(function (userData) {
            deferred.resolve(callback(userData));
        });
        // Return a promise that can be chained
        return deferred.promise();
    }
    return {
        updateContainerRef: function (mtaContainer) {
            container = mtaContainer;
            var Environment = container.getComponent('Environment');
            config = Environment.getConfig('B2B');
            var UserProfile = container.getComponent('UserProfile');
            userPromise = UserProfile.getUserProfile().done(function (result) {
                user = result;
            });
        },
        updateUserObject: function (userObj) {
            user = userObj;
        },
        isCMS: function () {
            return /^\/cms/.test(window.top.location.pathname);
        },
        isB2BSite: function () {
            return window.location.hostname === config.domain;
        },
        isB2BUser: function () {
            return processUserData(function (user) {
                if (typeof user.customfields === 'undefined') {
                    return false;
                }
                if (
                    !Array.isArray(user.customfields) ||
                    user.customfields.length < 1
                ) {
                    return false;
                }
                return user.customfields[0].value === CustomerCategory.B2B;
            });
        },
        isEmailValid: function (email) {
            return rgxEmail.test(email);
        },
        getRetailDomain: function () {
            return config.retailDomain || 'sandbox.madcapcoffee.com';
        }
    }
});
define('Someoddpilot.B2B',
    [
        'Someoddpilot.B2B.View',
        'Someoddpilot.B2B.Login.View',
        'Someoddpilot.B2B.Wholesale.View',
        'Someoddpilot.B2B.Utils',
        'MyAccountMenu',
        'Utils'
    ],
    function (
        B2BView,
        B2BLoginView,
        B2BWholesaleView,
        SomeoddpilotB2BUtils,
        MyAccountMenu,
        Utils
    ) {
        'use strict';
        var cms = {
            'selector': {
                'b2b': '[data-cms-area^="b2b_"]',
                'retail': '[data-cms-area]:not([data-cms-area^="b2b_"])'
            }
        }
        function redirectB2BUsers(container, config) {
            SomeoddpilotB2BUtils.isB2BUser().done(function (isB2BUser) {
                // Do not redirect non-B2B users
                if (!isB2BUser) {
                    return;
                }
                var redirectURL = 'https://' +
                    config.domain +
                    window.location.pathname +
                    window.location.search +
                    window.location.hash;
                console.log('Redirecting B2B user to: ' + redirectURL);
                Backbone.history.location.assign(redirectURL);
            });
        }
        function _cleanupCmsAreas(selector) {
            var areas = document.querySelectorAll(selector);
            areas.forEach(function (element) {
                element.remove();
            });
        }
        function cleanupCmsAreas(selector) {
            _cleanupCmsAreas(selector);
            // If in the CMS, attempt the process again in the next event cycle
            if (SomeoddpilotB2BUtils.isCMS()) {
                setTimeout(function () {
                    _cleanupCmsAreas(selector);
                });
            }
        }
        return {
            mountToApp: function mountToApp(container) {
                // using the 'Layout' component we add a new child view inside the 'Header' existing view
                // (there will be a DOM element with the HTML attribute data-view="Header.Logo")
                // more documentation of the Extensibility API in
                // https://system.netsuite.com/help/helpcenter/en_US/APIs/SuiteCommerce/Extensibility/Frontend/index.html
                // MadCap: DEBUG
                window.container = container;
                var myAccountMenu = MyAccountMenu.getInstance();
                //TAVANO EDITS
                // myAccountMenu.removeEntry('billing');
                // myAccountMenu.removeEntry('cases');
                // myAccountMenu.removeSubEntry('reorderitems');
                // myAccountMenu.removeSubEntry('quotes');
                // myAccountMenu.addEntry({
                //     id: 'giftcertificates',
                //     name: Utils.translate('Gift Certificates'),
                //     index: 3,
                //     url: 'gift-certificates',
                // });
                // Update utils closure scoped container reference
                SomeoddpilotB2BUtils.updateContainerRef(container);
                /** @type {LayoutComponent} */
                var Layout = container.getComponent('Layout');
                /** @type {PageTypeComponent} */
                var PageType = container.getComponent('PageType');
                // Use this for layout events
                /** @type {ApplicationLayout} */
                var ApplicationLayout = container.getLayout();
                var isB2BSite = SomeoddpilotB2BUtils.isB2BSite();
                var Environment = container.getComponent('Environment');
                var b2bConfig = Environment.getConfig('B2B');
                // Don't initialize any further if not on the B2B domain
                if (!isB2BSite) {
                    // User flow control: Determine if redirection for B2B users should occur
                    if (b2bConfig.redirectUsers === true) {
                        container.getLayout().on('beforeRender', function () {
                            redirectB2BUsers(container, b2bConfig);
                        });
                        return;
                    }
                    // Adjust available CMS areas for the retail site
                    ApplicationLayout.on('afterAppendToDom', function () {
                        cleanupCmsAreas(cms.selector.b2b);
                    });
                    return;
                }
                // Add body class for B2B specific styles
                document.body.classList.add('b2b');
                // Adjust available CMS areas for the B2B site
                ApplicationLayout.on('afterAppendToDom', function () {
                    cleanupCmsAreas(cms.selector.retail);
                });
                // Register route for the Wholesale 101 page
                PageType.registerPageType({
                    name: 'sop_wholesale_101',
                    routes: ['wholesale'],
                    view: function () {
                        return new B2BWholesaleView({
                            container: container
                        });
                    },
                    defaultTemplate: {
                        name: 'b2b_wholesale.tpl',
                        displayName: 'Wholesale 101'
                    }
                });
                // Add B2B menu entries
                Layout.addChildView('B2B.Menu', function () {
                    return new B2BView({
                        container: container,
                        classes: 'header-menu-level1-anchor'
                    });
                });
                // Lightbox login view
                if (
                    b2bConfig.requireLogin === true &&
                    !SomeoddpilotB2BUtils.isCMS()
                ) {
                    SomeoddpilotB2BUtils.isB2BUser().done(function (isB2BUser) {
                        // Do not display lightbox for logged in B2B users
                        if (isB2BUser) {
                            return;
                        }
                        // Display lightbox for all other users
                        Layout.addChildView('B2B.Login', function (options) {
                            return new B2BLoginView(options);
                        });
                    });
                }
            }
        };
    });
};
extensions['SuiteCommerce.Blog.2.1.1'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/SuiteCommerce/Blog/2.1.1/' + asset;
};
/// <amd-module name="SuiteCommerce.Blog.BlogHome.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.BlogHome.Configuration", ["require", "exports", "SuiteCommerce.Blog.Common.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Interval;
    (function (Interval) {
        Interval["OFF"] = "OFF";
        Interval["5 sec"] = "5 sec";
        Interval["8 sec"] = "8 sec";
        Interval["13 sec"] = "13 sec";
    })(Interval || (Interval = {}));
    var IntervalMillisecondsMap = {
        OFF: 0,
        '5 sec': 5000,
        '8 sec': 8000,
        '13 sec': 13000,
    };
    var BlogHomeConfiguration = /** @class */ (function (_super) {
        __extends(BlogHomeConfiguration, _super);
        function BlogHomeConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BlogHomeConfiguration, "blogHomeTitle", {
            get: function () {
                return this.get('blog.blogHomeTitle') || 'Blog';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "showFeaturedArticlesInPagination", {
            get: function () {
                return this.get('blog.showFeaturedArticlesInPagination');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "moreArticlesLabel", {
            get: function () {
                return this.get('blog.moreArticlesLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "allArticlesTaxonomyName", {
            get: function () {
                return this.get('blog.allArticlesTaxonomyName');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "emptyStateLabel", {
            get: function () {
                return this.get('blog.emptyStateLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "emptyStateMessage", {
            get: function () {
                return this.get('blog.emptyStateMessage');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "emptyStateButtonLabel", {
            get: function () {
                return this.get('blog.emptyStateButtonLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "showLatestPostsSection", {
            get: function () {
                return this.get('blog.showLatestPostsSection');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "latestPostsLabel", {
            get: function () {
                return this.get('blog.latestPostsLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "latestPostsCarouselInterval", {
            get: function () {
                var interval = this.get('blog.latestPostsCarouselInterval');
                return interval ? IntervalMillisecondsMap[interval] : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "titleForTagSearch", {
            get: function () {
                return this.translate('Articles tagged');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "titleForAuthorSearch", {
            get: function () {
                return this.translate('Articles written by');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "defaultSearchUrl", {
            get: function () {
                return this.get('defaultSearchUrl');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeConfiguration, "showRssFeedLink", {
            get: function () {
                return this.get('blog.showRssFeedLink');
            },
            enumerable: true,
            configurable: true
        });
        return BlogHomeConfiguration;
    }(Configuration_1.Configuration));
    exports.BlogHomeConfiguration = BlogHomeConfiguration;
});
/// <amd-module name="SuiteCommerce.Blog.BlogHome.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.BlogHome.Model", ["require", "exports", "Backbone", "SuiteCommerce.Blog.Post.Collection"], function (require, exports, Backbone_1, Post_Collection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BlogHomeModel = /** @class */ (function (_super) {
        __extends(BlogHomeModel, _super);
        function BlogHomeModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BlogHomeModel.prototype, "featuredPosts", {
            get: function () {
                if (!this.get('featuredPosts')) {
                    this.featuredPosts = new Post_Collection_1.PostCollection();
                }
                return this.get('featuredPosts');
            },
            set: function (featuredPosts) {
                this.set('featuredPosts', featuredPosts);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeModel.prototype, "posts", {
            get: function () {
                if (!this.get('posts')) {
                    this.posts = new Post_Collection_1.PostCollection();
                }
                return this.get('posts');
            },
            set: function (posts) {
                this.set('posts', posts);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeModel.prototype, "headerBlockPostList", {
            get: function () {
                return new Post_Collection_1.PostCollection(this.posts.slice(0, 2));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BlogHomeModel.prototype, "contentPostList", {
            get: function () {
                return new Post_Collection_1.PostCollection(this.posts.slice(2));
            },
            enumerable: true,
            configurable: true
        });
        return BlogHomeModel;
    }(Backbone_1.Model));
    exports.BlogHomeModel = BlogHomeModel;
});
/// <amd-module name="SuiteCommerce.Blog.BlogHome.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.BlogHome.View", ["require", "exports", "Backbone", "SuiteCommerce.Blog.BlogHome.Model", "sc_blog_home_default_layout.tpl", "SuiteCommerce.Blog.BlogHome.Configuration", "SuiteCommerce.Blog.Common", "SuiteCommerce.Blog.PostList.View", "SuiteCommerce.Blog.PostList.Model", "SuiteCommerce.Blog.PostCard.View", "SuiteCommerce.Blog.Post.Collection", "SuiteCommerce.Blog.Common.Searcher.Helper", "SuiteCommerce.Blog.PostSearch.View", "SuiteCommerce.Blog.TaxonomyNavigation.View", "SuiteCommerce.Blog.TaxonomyNavigation.Model", "SuiteCommerce.Blog.Common.ParameterProcessor", "SuiteCommerce.Blog.Pagination.View", "SuiteCommerce.Blog.Pagination.Model", "SuiteCommerce.Blog.DataProvider.Category.Model", "SuiteCommerce.Blog.DataProvider", "SuiteCommerce.Blog.PostSearch.Model", "SuiteCommerce.Blog.Pagination.Configuration", "SuiteCommerce.Blog.PostSearch.Configuration", "SuiteCommerce.Blog.EmptyState.View", "SuiteCommerce.Blog.EmptyState.Model", "SuiteCommerce.Blog.SuggestionsList.View", "SuiteCommerce.Blog.SuggestionsList.Model", "SuiteCommerce.Blog.Instrumentation", "SuiteCommerce.Blog.LatestPosts.View", "SuiteCommerce.Blog.LatestPosts.Model", "SuiteCommerce.Blog.LatestPosts.Slide.Collection", "SuiteCommerce.Blog.ExtCarousel.Model"], function (require, exports, Backbone_1, BlogHome_Model_1, blogHomeTemplate, BlogHome_Configuration_1, Common_1, PostList_View_1, PostList_Model_1, PostCard_View_1, Post_Collection_1, BlogPostSearcher_Helper_1, PostSearch_View_1, TaxonomyNavigation_View_1, TaxonomyNavigation_Model_1, ParameterProcessor_1, Pagination_View_1, Pagination_Model_1, DataProvider_Category_Model_1, DataProvider_1, PostSearch_Model_1, Pagination_Configuration_1, PostSearch_Configuration_1, EmptyState_View_1, EmptyState_Model_1, SuggestionsList_View_1, SuggestionsList_Model_1, Instrumentation_1, LatestPosts_View_1, LatestPosts_Model_1, LatestPosts_Slide_Collection_1, ExtCarousel_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BlogHomeView = /** @class */ (function (_super) {
        __extends(BlogHomeView, _super);
        function BlogHomeView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = blogHomeTemplate;
            _this.title = BlogHome_Configuration_1.BlogHomeConfiguration.blogHomeTitle;
            _this.showEmptyState = false;
            _this.defaultPageNumber = 1;
            _this.navigationData = ParameterProcessor_1.ParameterProcessor.getProcessedNavigationData(Backbone_1.history.getFragment());
            _this.activeFilter = _this.getActiveFilter();
            _this.updateTitle();
            _this.updateBreadcrumbs();
            _this.model = new BlogHome_Model_1.BlogHomeModel();
            _this.setupDataProviderListener();
            _this.setupLatestPostsView();
            _this.setupFeaturedPostListView();
            _this.setupFeaturedPostInCategoryView();
            _this.setupPostListViews();
            _this.setupPostListPagination();
            _this.setupPostSearchView();
            _this.setupTaxonomyNavigationView();
            return _this;
        }
        BlogHomeView.prototype.setupDataProviderListener = function () {
            var _this = this;
            DataProvider_1.DataProvider.entitiesModel.on('sync', function () {
                _this.activeFilter = _this.getActiveFilter();
                _this.updateTitle();
                _this.updateBreadcrumbs();
                _this.render();
            });
        };
        BlogHomeView.prototype.getActiveFilter = function (navigationData) {
            if (navigationData === void 0) { navigationData = this.navigationData; }
            var filter = { type: '' };
            if (navigationData && navigationData.mainTaxonomy) {
                var taxonomy = navigationData.mainTaxonomy;
                if (taxonomy.name === Common_1.AvailableTaxonomies.category) {
                    filter.type = Common_1.AvailableTaxonomies.category;
                    var category = DataProvider_1.DataProvider.categories.getCategoryByURLComponent(taxonomy.value) ||
                        DataProvider_1.DataProvider.categories.getCategoryById(taxonomy.value);
                    if (taxonomy.value === Common_1.DefaultTaxonomies.all.urlComponent) {
                        category = new DataProvider_Category_Model_1.CategoryModel({
                            name: Common_1.DefaultTaxonomies.all.name,
                        });
                    }
                    if (category) {
                        filter.label = category.name;
                        filter.value = taxonomy.value;
                    }
                }
                if (taxonomy.name === Common_1.AvailableTaxonomies.term) {
                    filter.type = Common_1.AvailableTaxonomies.term;
                    var term = DataProvider_1.DataProvider.terms.getTermByURLComponent(taxonomy.value) ||
                        DataProvider_1.DataProvider.terms.getTermById(taxonomy.value);
                    var termName = term ? term.name : '';
                    if (termName) {
                        filter.label = termName;
                        filter.value = taxonomy.value;
                    }
                }
                if (taxonomy.name === Common_1.AvailableTaxonomies.tag) {
                    filter.type = Common_1.AvailableTaxonomies.tag;
                    filter.label = BlogHome_Configuration_1.BlogHomeConfiguration.titleForTagSearch;
                    filter.value = "#" + taxonomy.value.toUpperCase();
                }
                if (taxonomy.name === Common_1.AvailableTaxonomies.author) {
                    filter.type = Common_1.AvailableTaxonomies.author;
                    var author = DataProvider_1.DataProvider.authors.getAuthorByURLComponent(taxonomy.value) ||
                        DataProvider_1.DataProvider.authors.getAuthorById(taxonomy.value);
                    if (author) {
                        filter.label = BlogHome_Configuration_1.BlogHomeConfiguration.titleForAuthorSearch;
                        filter.value = author.name;
                    }
                }
            }
            else if (navigationData && navigationData.searchPhrase) {
                filter.type = ParameterProcessor_1.SearchPhraseSettings.keywords;
                filter.label = PostSearch_Configuration_1.PostSearchConfiguration.searchResultsLabel;
                filter.value = navigationData.searchPhrase;
            }
            return filter.type ? filter : null;
        };
        BlogHomeView.prototype.updateTitle = function () {
            var filter = this.activeFilter;
            if (filter && filter.label) {
                var value = filter.type === ParameterProcessor_1.SearchPhraseSettings.keywords ||
                    filter.type === Common_1.AvailableTaxonomies.category ||
                    filter.type === Common_1.AvailableTaxonomies.term
                    ? ''
                    : filter.value;
                this.title += " | " + filter.label + " " + value;
                this.postListTitle = { label: filter.label, text: value };
            }
            else {
                this.postListTitle = {
                    label: BlogHome_Configuration_1.BlogHomeConfiguration.moreArticlesLabel,
                    text: '',
                };
            }
        };
        BlogHomeView.prototype.updateBreadcrumbs = function () {
            var navigationData = ParameterProcessor_1.ParameterProcessor.getProcessedNavigationData(Backbone_1.history.getFragment());
            var pages = navigationData
                ? this.getBreadcrumbEntries(this.getActiveFilter(navigationData))
                : [
                    {
                        text: BlogHome_Configuration_1.BlogHomeConfiguration.blogHomeTitle,
                        href: "" + Common_1.BLOG_URL_BASE,
                    },
                ];
            this.getBreadcrumbPages = function () { return pages; };
        };
        BlogHomeView.prototype.getBreadcrumbEntries = function (activeFilter) {
            var filter = activeFilter || this.activeFilter;
            var entries = [
                {
                    text: BlogHome_Configuration_1.BlogHomeConfiguration.blogHomeTitle,
                    href: "" + Common_1.BLOG_URL_BASE,
                },
            ];
            if (filter && filter.label) {
                var value = filter.type === ParameterProcessor_1.SearchPhraseSettings.keywords ||
                    filter.type === Common_1.AvailableTaxonomies.category ||
                    filter.type === Common_1.AvailableTaxonomies.term
                    ? ''
                    : filter.value;
                entries.push({ text: filter.label + " " + value, href: '' });
            }
            return entries;
        };
        BlogHomeView.prototype.setupLatestPostsView = function () {
            if (this.isHomePage() && BlogHome_Configuration_1.BlogHomeConfiguration.showLatestPostsSection) {
                var interval = BlogHome_Configuration_1.BlogHomeConfiguration.latestPostsCarouselInterval;
                this.latestPostView = new LatestPosts_View_1.LatestPostsView({
                    model: new LatestPosts_Model_1.LatestPostsModel({
                        interval: interval,
                        carouselTitle: BlogHome_Configuration_1.BlogHomeConfiguration.latestPostsLabel,
                        slides: new LatestPosts_Slide_Collection_1.LatestPostsSlideCollection(),
                        transition: ExtCarousel_Model_1.Transition.fade,
                        autoPlay: !!interval,
                    }),
                });
            }
        };
        BlogHomeView.prototype.setupFeaturedPostListView = function () {
            var _this = this;
            if (this.isHomePage() ||
                (this.navigationData.pageNumber > 1 &&
                    BlogHome_Configuration_1.BlogHomeConfiguration.showFeaturedArticlesInPagination)) {
                var featuredTerm = this.getFeaturedTerm();
                if (!featuredTerm) {
                    this.updateFeaturedListAfterDataProviderSync();
                }
                var viewModel = new PostList_Model_1.PostListModel({
                    posts: this.model.featuredPosts,
                    showPostCardsPlaceholders: true,
                    postCardLayout: PostCard_View_1.PostCardLayout.vertical,
                    postCardPlaceholdersQuantity: 4,
                    title: featuredTerm ? featuredTerm.name : '',
                });
                this.featuredPostListView = new PostList_View_1.PostListView({ model: viewModel });
                this.model.featuredPosts
                    .fetch(BlogPostSearcher_Helper_1.BlogPostSearcherHelper.buildRequestBody({
                    settings: { pageNumber: this.defaultPageNumber, pageSize: 5 },
                    taxonomies: [
                        {
                            name: Common_1.AvailableTaxonomies.term,
                            value: Common_1.DefaultTaxonomies.featured.defaultAlias,
                        },
                    ],
                }))
                    .done(function () {
                    _this.featuredPostListView.model.posts = new Post_Collection_1.PostCollection(_this.model.featuredPosts.slice(0, 4));
                    _this.featuredPostListView.model.showPostCardsPlaceholders = false;
                    _this.featuredPostListView.model.hideList =
                        _this.featuredPostListView.model.posts.size() === 0;
                });
            }
        };
        BlogHomeView.prototype.getFeaturedTerm = function () {
            return DataProvider_1.DataProvider.entitiesModel.terms.getTermByDefaultAlias(Common_1.DefaultTaxonomies.featured.defaultAlias);
        };
        BlogHomeView.prototype.updateFeaturedListAfterDataProviderSync = function () {
            var _this = this;
            DataProvider_1.DataProvider.entitiesModel.on('sync', function () {
                var featuredTerm = _this.getFeaturedTerm();
                if (featuredTerm) {
                    _this.featuredPostListView.model.title = featuredTerm.name;
                }
            });
        };
        BlogHomeView.prototype.setupFeaturedPostInCategoryView = function () {
            var _this = this;
            var activeFilter = this.activeFilter;
            if (activeFilter && activeFilter.type === Common_1.AvailableTaxonomies.category) {
                if (DataProvider_1.DataProvider.entitiesModel.isSync) {
                    this.fetchFeaturedPostInActiveCategory();
                }
                else {
                    DataProvider_1.DataProvider.entitiesModel.on('change:isSync', function () {
                        _this.fetchFeaturedPostInActiveCategory();
                    });
                }
            }
        };
        BlogHomeView.prototype.fetchFeaturedPostInActiveCategory = function () {
            var _this = this;
            var activeFilter = this.activeFilter;
            var featuredInCategoryTerm = DataProvider_1.DataProvider.terms.getTermByDefaultAlias(Common_1.DefaultTaxonomies.featuredInCategory.defaultAlias);
            if (featuredInCategoryTerm &&
                featuredInCategoryTerm.isUsed &&
                activeFilter.value !== Common_1.DefaultTaxonomies.all.urlComponent) {
                var posts_1 = new Post_Collection_1.PostCollection();
                posts_1
                    .fetch(BlogPostSearcher_Helper_1.BlogPostSearcherHelper.buildRequestBody({
                    settings: { pageNumber: this.defaultPageNumber, pageSize: 5 },
                    taxonomies: [
                        {
                            name: Common_1.AvailableTaxonomies.term,
                            value: featuredInCategoryTerm.urlComponent,
                        },
                        { name: Common_1.AvailableTaxonomies.category, value: activeFilter.value },
                    ],
                }))
                    .done(function () {
                    if (posts_1.size() > 0) {
                        _this.featuredPostsInCategoryView = new PostList_View_1.PostListView({
                            model: new PostList_Model_1.PostListModel({
                                title: featuredInCategoryTerm.name,
                                posts: new Post_Collection_1.PostCollection(posts_1.slice(0, 4)),
                                showPostCardsPlaceholders: false,
                                postCardLayout: PostCard_View_1.PostCardLayout.vertical,
                                postCardPlaceholdersQuantity: 4,
                            }),
                        });
                        _this.render();
                    }
                });
            }
        };
        BlogHomeView.prototype.setupPostListViews = function () {
            var _this = this;
            this.setupHeaderBlockPostListView();
            this.setupContentPostListView();
            this.setupAllPostListView();
            var pageNumber = this.navigationData && this.navigationData.pageNumber
                ? this.navigationData.pageNumber
                : this.defaultPageNumber;
            var searcherRequestLog = Instrumentation_1.default.getLog('BlogPostSearcherRequest');
            searcherRequestLog.startTimer();
            this.model.posts
                .fetch(BlogPostSearcher_Helper_1.BlogPostSearcherHelper.buildRequestBody({
                taxonomies: this.navigationData && this.navigationData.mainTaxonomy
                    ? this.navigationData.taxonomies
                    : [],
                settings: {
                    pageNumber: pageNumber,
                    pageSize: Pagination_Configuration_1.PaginationConfiguration.articlesByPage,
                },
                searchPhrase: this.navigationData && this.navigationData.searchPhrase
                    ? this.navigationData.searchPhrase
                    : '',
            }))
                .done(function (response) {
                searcherRequestLog.endTimer();
                var activeFilter = _this.activeFilter;
                if (_this.model.posts.totalInServer > 0 ||
                    (activeFilter && activeFilter.type === ParameterProcessor_1.SearchPhraseSettings.keywords)) {
                    _this.showEmptyState = false;
                    _this.headerBlockPostListView.model.showPostCardsPlaceholders = false;
                    _this.headerBlockPostListView.model.posts = _this.model.headerBlockPostList;
                    _this.contentPostListView.model.showPostCardsPlaceholders = false;
                    _this.contentPostListView.model.posts = _this.model.contentPostList;
                    _this.allPostListView.model.showPostCardsPlaceholders = false;
                    _this.allPostListView.model.posts = _this.model.posts;
                    _this.setupPostListPagination();
                    if (activeFilter &&
                        activeFilter.type === ParameterProcessor_1.SearchPhraseSettings.keywords &&
                        _this.model.posts.totalInServer === 0) {
                        if (DataProvider_1.DataProvider.entitiesModel.isSync) {
                            _this.setupSuggestionsListView(activeFilter.value);
                        }
                        else {
                            DataProvider_1.DataProvider.entitiesModel.on('change:isSync', function () {
                                _this.setupSuggestionsListView(activeFilter.value);
                            });
                        }
                    }
                    _this.render();
                }
                else {
                    _this.showEmptyState = true;
                    _this.setupEmptyStateView(response);
                }
                searcherRequestLog.setParameters({
                    activity: 'Blog Post Searcher Request',
                    totalTime: searcherRequestLog.getElapsedTimeForTimer(),
                    instanceCount: response.total,
                    subType: activeFilter ? activeFilter.type : '',
                });
                searcherRequestLog.submit();
                if (!activeFilter) {
                    _this.createQuantityOfArticlesLog(response.total);
                }
            });
        };
        BlogHomeView.prototype.createQuantityOfArticlesLog = function (quantityOfLogs) {
            var quantityOfArticlesLog = Instrumentation_1.default.getLog('quantityOfArticlesLog');
            quantityOfArticlesLog.setParameters({
                activity: 'Quantity of Articles',
                instanceCount: quantityOfLogs,
            });
            quantityOfArticlesLog.submit();
        };
        BlogHomeView.prototype.setupSuggestionsListView = function (term) {
            var pinnedTaxonomies = [];
            var searchTerm = DataProvider_1.DataProvider.terms.getTermByURLComponent(Common_1.DefaultTaxonomies.search.defaultAlias);
            if (searchTerm && searchTerm.isUsed) {
                pinnedTaxonomies.push({
                    name: Common_1.AvailableTaxonomies.term,
                    value: searchTerm.urlComponent,
                });
            }
            this.suggestionsListView = new SuggestionsList_View_1.SuggestionsListView({
                model: new SuggestionsList_Model_1.SuggestionsListModel({
                    title: PostSearch_Configuration_1.PostSearchConfiguration.noSearchResultsLabel.replace('[[term]]', "<span class=\"term\">" + term + "</span>"),
                    suggestionMessage: PostSearch_Configuration_1.PostSearchConfiguration.noResultsArticleSuggestionMessage,
                    searchOptions: {
                        settings: { pageSize: 5, pageNumber: 1 },
                        taxonomies: pinnedTaxonomies,
                    },
                    quantityOfSuggestions: 2,
                }),
            });
        };
        BlogHomeView.prototype.setupEmptyStateView = function (response) {
            this.showEmptyState = true;
            var model;
            if (response.error) {
                model = this.getEmptyStateModelForError(response.error, response.errorMessage);
            }
            else {
                model = new EmptyState_Model_1.EmptyStateModel({
                    label: BlogHome_Configuration_1.BlogHomeConfiguration.emptyStateLabel,
                    message: BlogHome_Configuration_1.BlogHomeConfiguration.emptyStateMessage,
                    actionButtonLabel: BlogHome_Configuration_1.BlogHomeConfiguration.emptyStateButtonLabel,
                    actionButtonUrl: BlogHome_Configuration_1.BlogHomeConfiguration.defaultSearchUrl,
                });
            }
            this.emptyStateView = new EmptyState_View_1.EmptyStateView({ model: model });
            this.render();
        };
        BlogHomeView.prototype.getEmptyStateModelForError = function (error, errorMessage) {
            var label = '';
            if (error === BlogPostSearcher_Helper_1.BlogPostSearcherError.taxonomyNotFound) {
                label = PostSearch_Configuration_1.PostSearchConfiguration.noSearchResultsLabel.replace('[[term]]', "<span class=\"term\">" + errorMessage.join(',') + "</span>");
            }
            else {
                label = BlogHome_Configuration_1.BlogHomeConfiguration.emptyStateLabel;
            }
            return new EmptyState_Model_1.EmptyStateModel({
                label: label,
                message: BlogHome_Configuration_1.BlogHomeConfiguration.emptyStateMessage,
                actionButtonLabel: BlogHome_Configuration_1.BlogHomeConfiguration.emptyStateButtonLabel,
                actionButtonUrl: BlogHome_Configuration_1.BlogHomeConfiguration.defaultSearchUrl,
            });
        };
        BlogHomeView.prototype.setupPostListPagination = function () {
            if (!this.postListPagination) {
                this.postListPagination = new Pagination_View_1.PaginationView({
                    model: new Pagination_Model_1.PaginationModel({
                        pageSize: Pagination_Configuration_1.PaginationConfiguration.articlesByPage,
                        total: 0,
                        currentPage: this.defaultPageNumber,
                    }),
                });
            }
            else {
                this.postListPagination.model.total = this.model.posts.totalInServer;
                if (this.navigationData && this.navigationData.pageNumber) {
                    this.postListPagination.model.currentPage = this.navigationData.pageNumber;
                }
                this.postListPagination.generateButtons();
            }
        };
        BlogHomeView.prototype.setupAllPostListView = function () {
            var viewModel = new PostList_Model_1.PostListModel({
                posts: this.model.headerBlockPostList,
                showPostCardsPlaceholders: true,
                postCardLayout: PostCard_View_1.PostCardLayout.horizontal,
                postCardPlaceholdersQuantity: 4,
                highlightInCards: this.navigationData && this.navigationData.searchPhrase
                    ? this.navigationData.searchPhrase
                    : '',
            });
            this.allPostListView = new PostList_View_1.PostListView({ model: viewModel });
        };
        BlogHomeView.prototype.setupHeaderBlockPostListView = function () {
            var viewModel = new PostList_Model_1.PostListModel({
                posts: this.model.headerBlockPostList,
                showPostCardsPlaceholders: true,
                postCardLayout: PostCard_View_1.PostCardLayout.horizontal,
                postCardPlaceholdersQuantity: 2,
                highlightInCards: this.navigationData && this.navigationData.searchPhrase
                    ? this.navigationData.searchPhrase
                    : '',
            });
            this.headerBlockPostListView = new PostList_View_1.PostListView({ model: viewModel });
        };
        BlogHomeView.prototype.setupContentPostListView = function () {
            var viewModel = new PostList_Model_1.PostListModel({
                posts: this.model.contentPostList,
                showPostCardsPlaceholders: true,
                postCardLayout: PostCard_View_1.PostCardLayout.horizontal,
                postCardPlaceholdersQuantity: 4,
                highlightInCards: this.navigationData && this.navigationData.searchPhrase
                    ? this.navigationData.searchPhrase
                    : '',
            });
            this.contentPostListView = new PostList_View_1.PostListView({ model: viewModel });
        };
        BlogHomeView.prototype.setupPostSearchView = function () {
            this.postSearchView = new PostSearch_View_1.PostSearchView({
                model: new PostSearch_Model_1.PostSearchModel({
                    phrase: this.navigationData && this.navigationData.searchPhrase
                        ? this.navigationData.searchPhrase
                        : '',
                }),
            });
        };
        BlogHomeView.prototype.setupTaxonomyNavigationView = function () {
            this.taxonomyNavigationView = new TaxonomyNavigation_View_1.TaxonomyNavigationView({
                model: new TaxonomyNavigation_Model_1.TaxonomyNavigationModel(),
                navigationData: this.navigationData,
            });
        };
        Object.defineProperty(BlogHomeView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'PostSearch.View': function () {
                        return _this.postSearchView;
                    },
                    'TaxonomyNavigation.View': function () {
                        return _this.taxonomyNavigationView;
                    },
                    'SuggestionsList.View': function () {
                        return _this.suggestionsListView;
                    },
                    'LatestPosts.View': function () {
                        return _this.latestPostView;
                    },
                    'FeaturedPostList.View': function () {
                        return _this.featuredPostListView;
                    },
                    'FeaturedPostsInCategory.View': function () {
                        return _this.featuredPostsInCategoryView;
                    },
                    'HeaderBlockPostList.View': function () {
                        return _this.headerBlockPostListView;
                    },
                    'ContentPostList.View': function () {
                        return _this.contentPostListView;
                    },
                    'AllPostList.View': function () {
                        return _this.allPostListView;
                    },
                    'PostListPagination.View': function () {
                        return _this.postListPagination;
                    },
                    'EmptyState.View': function () {
                        return _this.emptyStateView;
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        BlogHomeView.prototype.getContext = function () {
            var filter = this.activeFilter;
            return {
                url: Common_1.BLOG_URL_BASE,
                header: BlogHome_Configuration_1.BlogHomeConfiguration.blogHomeTitle,
                postListTitle: this.postListTitle,
                postListSize: this.model.posts.size(),
                showEmptyState: this.showEmptyState,
                isHomePage: this.isHomePage(),
                isPostListFiltered: this.isPostListFiltered(),
                isPostListFilteredByAuthor: !!(filter &&
                    filter.type &&
                    filter.type === Common_1.AvailableTaxonomies.author),
                isPostListFilteredByCategory: !!(filter &&
                    filter.type &&
                    filter.type === Common_1.AvailableTaxonomies.category),
                isPostListFilteredByTag: !!(filter &&
                    filter.type &&
                    filter.type === Common_1.AvailableTaxonomies.tag),
                isPostListFilteredByTerm: !!(filter &&
                    filter.type &&
                    filter.type === Common_1.AvailableTaxonomies.term),
                isPostListFilteredByPhrase: !!(filter &&
                    filter.type &&
                    filter.type === ParameterProcessor_1.SearchPhraseSettings.keywords),
                showRssFeedLink: BlogHome_Configuration_1.BlogHomeConfiguration.showRssFeedLink,
            };
        };
        BlogHomeView.prototype.isHomePage = function () {
            return (!this.isPostListFiltered() &&
                (!this.navigationData ||
                    (this.navigationData &&
                        this.navigationData.pageNumber &&
                        this.navigationData.pageNumber === 1)));
        };
        BlogHomeView.prototype.isPostListFiltered = function () {
            return !!(this.navigationData &&
                (this.navigationData.taxonomies || this.navigationData.searchPhrase));
        };
        return BlogHomeView;
    }(Backbone_1.View));
    exports.BlogHomeView = BlogHomeView;
});
/// <amd-module name="SuiteCommerce.Blog.BlogHome"/>
define("SuiteCommerce.Blog.BlogHome", ["require", "exports", "Utils", "SuiteCommerce.Blog.BlogHome.View"], function (require, exports, Utils_1, BlogHome_View_1) {
    "use strict";
    return {
        mountToApp: function (container) {
            var pageTypeComponent = container.getComponent('PageType');
            this.registerPageTypes(pageTypeComponent);
        },
        registerPageTypes: function (pageTypeComponent) {
            var taxonomyNavigationPattern = /^blog\/(category|term|tag|author)\/([A-Za-z0-9\-.]+)(\/?)(\?(.*)$)?/;
            pageTypeComponent.registerPageType({
                name: 'ext-blog-list',
                routes: ['blog(/)', 'blog?*queryParams', taxonomyNavigationPattern],
                view: BlogHome_View_1.BlogHomeView,
                defaultTemplate: {
                    name: 'sc_blog_home_default_layout.tpl',
                    displayName: 'Blog Post List',
                    thumbnail: Utils_1.getAbsoluteUrl(getExtensionAssetsPath('img/ic_cct_sc_blog_post_list.svg')),
                },
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.Blog.Common.Searcher.Helper"/>
define("SuiteCommerce.Blog.Common.Searcher.Helper", ["require", "exports", "SuiteCommerce.Blog.Common.Configuration", "SuiteCommerce.Blog.Common"], function (require, exports, Configuration_1, Common_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BlogPostSearcherError;
    (function (BlogPostSearcherError) {
        BlogPostSearcherError["taxonomyNotFound"] = "TAXONOMY_NOT_FOUND";
        BlogPostSearcherError["invalidPageRange"] = "INVALID_PAGE_RANGE";
        BlogPostSearcherError["badRequest"] = "BAD_REQUEST";
    })(BlogPostSearcherError = exports.BlogPostSearcherError || (exports.BlogPostSearcherError = {}));
    var BlogPostSearcherHelper = /** @class */ (function () {
        function BlogPostSearcherHelper() {
        }
        BlogPostSearcherHelper.buildRequestBody = function (options) {
            var requestParams = {
                paginationSettings: options.settings,
                siteId: Configuration_1.Configuration.siteId,
            };
            // Adjusting the page number (in backend the pages starts from zero)
            requestParams.paginationSettings.pageNumber -= 1;
            requestParams.filters = {};
            if (options.taxonomies.length > 0) {
                requestParams.filters.taxonomies = {};
                options.taxonomies.forEach(function (taxonomy) {
                    requestParams.filters.taxonomies[taxonomy.name] = { pinned: [taxonomy.value] };
                });
            }
            if (options.searchPhrase) {
                requestParams.filters.phrase = Common_1.sanitizeString(options.searchPhrase);
            }
            return {
                data: { blogPostSearchParameters: JSON.stringify(requestParams) },
            };
        };
        return BlogPostSearcherHelper;
    }());
    exports.BlogPostSearcherHelper = BlogPostSearcherHelper;
});
/// <amd-module name="SuiteCommerce.Blog.Common"/>
define("SuiteCommerce.Blog.Common", ["require", "exports", "underscore", "SuiteCommerce.Blog.BlogHome.Configuration", "Utils", "SuiteCommerce.Blog.Common.Configuration"], function (require, exports, _, BlogHome_Configuration_1, Utils_1, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BLOG_URL_BASE = '/blog';
    var AvailableTaxonomies;
    (function (AvailableTaxonomies) {
        AvailableTaxonomies["category"] = "category";
        AvailableTaxonomies["term"] = "term";
        AvailableTaxonomies["tag"] = "tag";
        AvailableTaxonomies["author"] = "author";
    })(AvailableTaxonomies = exports.AvailableTaxonomies || (exports.AvailableTaxonomies = {}));
    var DefaultTaxonomies = /** @class */ (function () {
        function DefaultTaxonomies() {
        }
        Object.defineProperty(DefaultTaxonomies, "all", {
            get: function () {
                return {
                    name: BlogHome_Configuration_1.BlogHomeConfiguration.allArticlesTaxonomyName,
                    urlComponent: 'all',
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DefaultTaxonomies, "featured", {
            get: function () {
                return {
                    defaultAlias: 'featured',
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DefaultTaxonomies, "featuredInCategory", {
            get: function () {
                return {
                    defaultAlias: 'featured-in-category',
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DefaultTaxonomies, "search", {
            get: function () {
                return {
                    defaultAlias: 'no-search-results',
                };
            },
            enumerable: true,
            configurable: true
        });
        return DefaultTaxonomies;
    }());
    exports.DefaultTaxonomies = DefaultTaxonomies;
    function sanitizeString(text) {
        return text ? text.replace(/[!\[\]$%^&*(){}|<>?+\/\\]/g, '') : '';
    }
    exports.sanitizeString = sanitizeString;
    function resizeImage(url, size) {
        var urlToUse = url ||
            Utils_1.getThemeAbsoluteUrlOfNonManagedResources('img/no_image_available.jpeg', Configuration_1.Configuration.get('imageNotAvailable'));
        var sizeToUse = Configuration_1.Configuration.get("imageSizeMapping." + size) || size;
        var resize = _.first(_.where(Configuration_1.Configuration.get('siteSettings.imagesizes') || [], {
            name: sizeToUse,
        }));
        if (resize) {
            return urlToUse + (~urlToUse.indexOf('?') ? '&' : '?') + resize.urlsuffix;
        }
        return urlToUse;
    }
    exports.resizeImage = resizeImage;
});
/// <amd-module name="SuiteCommerce.Blog.Common.Configuration"/>
define("SuiteCommerce.Blog.Common.Configuration", ["require", "exports", "Utils"], function (require, exports, Utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var environment = null;
    var Configuration = /** @class */ (function () {
        function Configuration() {
        }
        Object.defineProperty(Configuration, "environment", {
            set: function (environmentComponent) {
                environment = environmentComponent;
            },
            enumerable: true,
            configurable: true
        });
        Configuration.get = function (key) {
            if (environment) {
                return environment.getConfig(key);
            }
            console.error('Please set the Environment Component in the Configuration.');
            return null;
        };
        Configuration.translate = function (text) {
            return Utils_1.translate(text);
        };
        Object.defineProperty(Configuration, "siteId", {
            get: function () {
                if (environment) {
                    return environment.getSiteSetting('siteid');
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Configuration, "readMoreLabel", {
            get: function () {
                return this.get('blog.readMoreLabel');
            },
            enumerable: true,
            configurable: true
        });
        Configuration.isRunningInSEO = function () {
            return environment.isPageGenerator();
        };
        Object.defineProperty(Configuration, "isEnabledJSONLd", {
            get: function () {
                return this.get('structureddatamarkup.type') === 'JSON-LD';
            },
            enumerable: true,
            configurable: true
        });
        return Configuration;
    }());
    exports.Configuration = Configuration;
});
/// <amd-module name="SuiteCommerce.Blog.Common.Instrumentation.Helper"/>
define("SuiteCommerce.Blog.Common.Instrumentation.Helper", ["require", "exports", "SuiteCommerce.Blog.Instrumentation"], function (require, exports, Instrumentation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComponentArea = 'SC Blog';
    exports.ExtensionVersion = '2.1.1';
    exports.QueueNameSuffix = '-Blog';
    var InstrumentationHelper = /** @class */ (function () {
        function InstrumentationHelper() {
        }
        InstrumentationHelper.initializeInstrumentation = function (environment) {
            Instrumentation_1.default.initialize({
                environment: environment,
                queueNameSuffix: exports.QueueNameSuffix,
                defaultParameters: {
                    componentArea: exports.ComponentArea,
                    extensionVersion: exports.ExtensionVersion,
                },
            });
        };
        return InstrumentationHelper;
    }());
    exports.InstrumentationHelper = InstrumentationHelper;
});
/// <amd-module name="SuiteCommerce.Blog.Common.PageTypeModel"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Common.PageTypeModel", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PageTypeModel = /** @class */ (function (_super) {
        __extends(PageTypeModel, _super);
        function PageTypeModel(initializationOptions) {
            return _super.call(this, initializationOptions) || this;
        }
        Object.defineProperty(PageTypeModel.prototype, "name", {
            get: function () {
                return this.get('name');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageTypeModel.prototype, "url", {
            get: function () {
                var url = this.get('url');
                if (url && !url.match('^\/')) {
                    url = "/" + url;
                }
                return url;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageTypeModel.prototype, "header", {
            /* SC/SCA >= 20.2: page_header
             * SC/SCA < 20.2: header */
            get: function () {
                return this.get('header') || this.get('page_header');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageTypeModel.prototype, "title", {
            /* SC/SCA >= 20.2: page_title
             * SC/SCA < 20.2: title */
            get: function () {
                return this.get('title') || this.get('page_title');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageTypeModel.prototype, "fields", {
            get: function () {
                return this.get('fields');
            },
            enumerable: true,
            configurable: true
        });
        return PageTypeModel;
    }(Backbone_1.Model));
    exports.PageTypeModel = PageTypeModel;
});
/// <amd-module name="SuiteCommerce.Blog.Common.ParameterProcessor"/>
define("SuiteCommerce.Blog.Common.ParameterProcessor", ["require", "exports", "SuiteCommerce.Blog.Common"], function (require, exports, Common_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PageSettings;
    (function (PageSettings) {
        PageSettings["page"] = "page";
    })(PageSettings = exports.PageSettings || (exports.PageSettings = {}));
    var SearchPhraseSettings;
    (function (SearchPhraseSettings) {
        SearchPhraseSettings["keywords"] = "keywords";
    })(SearchPhraseSettings = exports.SearchPhraseSettings || (exports.SearchPhraseSettings = {}));
    var ParameterProcessor = /** @class */ (function () {
        function ParameterProcessor() {
        }
        ParameterProcessor.getProcessedNavigationData = function (urlFragment) {
            var urlComponents = this.decodeParams(urlFragment);
            if (urlComponents) {
                return this.getNavigationData(urlComponents);
            }
            return;
        };
        ParameterProcessor.decodeParams = function (urlFragment) {
            try {
                var components = {};
                var componentURLDecoded = decodeURIComponent(urlFragment);
                if (componentURLDecoded.split('?').length > 0) {
                    var fragments = componentURLDecoded.split('?');
                    var params = fragments.shift();
                    var paramsArray = params.split('/');
                    paramsArray.shift();
                    components.params = paramsArray.join('/');
                    components.queryParams = fragments.join('?');
                }
                return components;
            }
            catch (exception) {
                console.warn('Search canceled: URI malformed', exception);
                return {};
            }
        };
        ParameterProcessor.getNavigationData = function (components) {
            var _this = this;
            var data = {};
            if (components.params) {
                var taxonomyComponents = components.params.split('/');
                data.mainTaxonomy = {
                    name: taxonomyComponents[0],
                    value: taxonomyComponents[1],
                };
                data.taxonomies = [data.mainTaxonomy];
            }
            if (components.queryParams) {
                components.queryParams.split('&').forEach(function (paramAndValue) {
                    var pieces = paramAndValue.split('=');
                    var paramName = pieces.shift();
                    var value = pieces.join('=');
                    if (paramName in PageSettings && paramName === PageSettings.page) {
                        if (!isNaN(parseInt(value, 10))) {
                            data.pageNumber = parseInt(value, 10);
                        }
                    }
                    // Additional taxonomies in query params only are taking into consideration
                    // if the user is visiting a taxonomy page (taxonomy existing in parameters)
                    if (data.mainTaxonomy && _this.isWhitelistedTaxonomy(paramName)) {
                        if (!data.taxonomies)
                            data.taxonomies = [];
                        if (value !== data.mainTaxonomy.value) {
                            data.taxonomies.push({
                                value: value,
                                name: paramName,
                            });
                        }
                    }
                    if (paramName in SearchPhraseSettings &&
                        paramName === SearchPhraseSettings.keywords) {
                        data.searchPhrase = value;
                    }
                });
            }
            if (Object.keys(data).length !== 0)
                return data;
            return;
        };
        ParameterProcessor.isWhitelistedTaxonomy = function (param) {
            return param in Common_1.AvailableTaxonomies;
        };
        return ParameterProcessor;
    }());
    exports.ParameterProcessor = ParameterProcessor;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider.Author.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProvider.Author.Collection", ["require", "exports", "Backbone", "SuiteCommerce.Blog.DataProvider.Author.Model"], function (require, exports, Backbone_1, DataProvider_Author_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AuthorCollection = /** @class */ (function (_super) {
        __extends(AuthorCollection, _super);
        function AuthorCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = DataProvider_Author_Model_1.AuthorModel;
            return _this;
        }
        AuthorCollection.prototype.getAuthorById = function (id) {
            return this.find(function (author) {
                return author.id === id;
            });
        };
        AuthorCollection.prototype.getAuthorByURLComponent = function (urlComponent) {
            return this.find(function (author) {
                return author.urlComponent === urlComponent;
            });
        };
        return AuthorCollection;
    }(Backbone_1.Collection));
    exports.AuthorCollection = AuthorCollection;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider.Author.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProvider.Author.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AuthorModel = /** @class */ (function (_super) {
        __extends(AuthorModel, _super);
        function AuthorModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AuthorModel.prototype, "id", {
            get: function () {
                return this.get('id');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AuthorModel.prototype, "name", {
            get: function () {
                return this.get('name');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AuthorModel.prototype, "urlComponent", {
            get: function () {
                return this.get('urlComponent');
            },
            enumerable: true,
            configurable: true
        });
        return AuthorModel;
    }(Backbone_1.Model));
    exports.AuthorModel = AuthorModel;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider.Category.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProvider.Category.Collection", ["require", "exports", "Backbone", "SuiteCommerce.Blog.DataProvider.Category.Model"], function (require, exports, Backbone_1, DataProvider_Category_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CategoryCollection = /** @class */ (function (_super) {
        __extends(CategoryCollection, _super);
        function CategoryCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = DataProvider_Category_Model_1.CategoryModel;
            return _this;
        }
        CategoryCollection.prototype.getCategoryById = function (id) {
            return this.find(function (category) {
                return category.id === id;
            });
        };
        CategoryCollection.prototype.getCategoryByURLComponent = function (urlComponent) {
            return this.find(function (category) {
                return category.urlComponent === urlComponent;
            });
        };
        return CategoryCollection;
    }(Backbone_1.Collection));
    exports.CategoryCollection = CategoryCollection;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider.Category.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProvider.Category.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CategoryModel = /** @class */ (function (_super) {
        __extends(CategoryModel, _super);
        function CategoryModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CategoryModel.prototype, "id", {
            get: function () {
                return this.get('id');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CategoryModel.prototype, "name", {
            get: function () {
                return this.get('name');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CategoryModel.prototype, "urlComponent", {
            get: function () {
                return this.get('urlComponent');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CategoryModel.prototype, "isUsed", {
            get: function () {
                return this.get('isUsed');
            },
            enumerable: true,
            configurable: true
        });
        return CategoryModel;
    }(Backbone_1.Model));
    exports.CategoryModel = CategoryModel;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider.File.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProvider.File.Collection", ["require", "exports", "Backbone", "SuiteCommerce.Blog.DataProvider.File.Model"], function (require, exports, Backbone_1, DataProvider_File_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FileCollection = /** @class */ (function (_super) {
        __extends(FileCollection, _super);
        function FileCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = DataProvider_File_Model_1.FileModel;
            _this.url = '/app/site/hosting/scriptlet.nl?script=customscript_ns_sc_sl_blog_url_prov' +
                '&deploy=customdeploy_ns_sc_sl_blog_url_prov_dep';
            return _this;
        }
        FileCollection.prototype.getFileById = function (id) {
            return this.find(function (file) {
                return file.id === id;
            });
        };
        return FileCollection;
    }(Backbone_1.Collection));
    exports.FileCollection = FileCollection;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider.File.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProvider.File.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var FileModel = /** @class */ (function (_super) {
        __extends(FileModel, _super);
        function FileModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FileModel.prototype, "id", {
            get: function () {
                return this.get('id');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileModel.prototype, "url", {
            get: function () {
                return this.get('url');
            },
            enumerable: true,
            configurable: true
        });
        return FileModel;
    }(Backbone_1.Model));
    exports.FileModel = FileModel;
});
/// <amd-module name="SuiteCommerce.Blog.DataProviderEntities.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProviderEntities.Model", ["require", "exports", "SuiteCommerce.Blog.DataProvider.Category.Collection", "SuiteCommerce.Blog.DataProvider.Author.Collection", "SuiteCommerce.Blog.DataProvider.Term.Collection", "Backbone"], function (require, exports, DataProvider_Category_Collection_1, DataProvider_Author_Collection_1, DataProvider_Term_Collection_1, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataProviderModel = /** @class */ (function (_super) {
        __extends(DataProviderModel, _super);
        function DataProviderModel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.urlRoot = '/app/site/hosting/scriptlet.nl?script=customscript_ns_sc_sl_blog_entity_loader' +
                '&deploy=customdeploy_ns_sc_sl_blog_entity_loader';
            return _this;
        }
        Object.defineProperty(DataProviderModel.prototype, "categories", {
            get: function () {
                var categoryCollection = new DataProvider_Category_Collection_1.CategoryCollection();
                categoryCollection.add(this.get('categories'));
                return categoryCollection;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataProviderModel.prototype, "authors", {
            get: function () {
                var authorCollection = new DataProvider_Author_Collection_1.AuthorCollection();
                authorCollection.add(this.get('authors'));
                return authorCollection;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataProviderModel.prototype, "terms", {
            get: function () {
                var termCollection = new DataProvider_Term_Collection_1.TermCollection();
                termCollection.add(this.get('terms'));
                return termCollection;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataProviderModel.prototype, "isSync", {
            get: function () {
                return this.get('isSync');
            },
            set: function (isSync) {
                this.set('isSync', isSync);
            },
            enumerable: true,
            configurable: true
        });
        return DataProviderModel;
    }(Backbone_1.Model));
    exports.DataProviderModel = DataProviderModel;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider.Term.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProvider.Term.Collection", ["require", "exports", "Backbone", "SuiteCommerce.Blog.DataProvider.Term.Model"], function (require, exports, Backbone_1, DataProvider_Term_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TermCollection = /** @class */ (function (_super) {
        __extends(TermCollection, _super);
        function TermCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = DataProvider_Term_Model_1.TermModel;
            return _this;
        }
        TermCollection.prototype.getTermById = function (id) {
            return this.find(function (term) {
                return term.id === id;
            });
        };
        TermCollection.prototype.getTermByName = function (name) {
            return this.find(function (term) {
                return term.name === name;
            });
        };
        TermCollection.prototype.getTermByURLComponent = function (URLComponent) {
            return this.find(function (term) {
                return term.urlComponent === URLComponent;
            });
        };
        TermCollection.prototype.getTermByDefaultAlias = function (alias) {
            return this.find(function (term) {
                return term.defaultAlias === alias;
            });
        };
        return TermCollection;
    }(Backbone_1.Collection));
    exports.TermCollection = TermCollection;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider.Term.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.DataProvider.Term.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TermModel = /** @class */ (function (_super) {
        __extends(TermModel, _super);
        function TermModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TermModel.prototype, "id", {
            get: function () {
                return this.get('id');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TermModel.prototype, "name", {
            get: function () {
                return this.get('name');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TermModel.prototype, "urlComponent", {
            get: function () {
                return this.get('urlComponent');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TermModel.prototype, "isUsed", {
            get: function () {
                return this.get('isUsed');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TermModel.prototype, "defaultAlias", {
            get: function () {
                return this.get('defaultAlias');
            },
            enumerable: true,
            configurable: true
        });
        return TermModel;
    }(Backbone_1.Model));
    exports.TermModel = TermModel;
});
/// <amd-module name="SuiteCommerce.Blog.DataProvider"/>
define("SuiteCommerce.Blog.DataProvider", ["require", "exports", "SuiteCommerce.Blog.DataProviderEntities.Model", "SuiteCommerce.Blog.DataProvider.File.Collection", "SuiteCommerce.Blog.Common.Configuration", "SuiteCommerce.Blog.Instrumentation"], function (require, exports, DataProvider_Model_1, DataProvider_File_Collection_1, Configuration_1, Instrumentation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataProviderController = /** @class */ (function () {
        function DataProviderController() {
            this.entitiesModel = new DataProvider_Model_1.DataProviderModel();
            this.files = new DataProvider_File_Collection_1.FileCollection();
        }
        Object.defineProperty(DataProviderController, "instance", {
            get: function () {
                if (!this.dataProviderInstance) {
                    this.dataProviderInstance = new DataProviderController();
                }
                return this.dataProviderInstance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataProviderController.prototype, "categories", {
            get: function () {
                return this.entitiesModel.categories;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataProviderController.prototype, "authors", {
            get: function () {
                return this.entitiesModel.authors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataProviderController.prototype, "terms", {
            get: function () {
                return this.entitiesModel.terms;
            },
            enumerable: true,
            configurable: true
        });
        DataProviderController.prototype.fetchEntitiesData = function () {
            var _this = this;
            this.entitiesModel.isSync = false;
            var loaderRequest = Instrumentation_1.default.getLog('loaderRequest');
            loaderRequest.startTimer();
            this.entitiesModel
                .fetch({ data: { siteId: Configuration_1.Configuration.siteId } })
                .done(function () {
                _this.entitiesModel.isSync = true;
                loaderRequest.endTimer();
                loaderRequest.setParameters({
                    activity: 'Entities Loader Request',
                    totalTime: loaderRequest.getElapsedTimeForTimer(),
                });
                loaderRequest.submit();
                _this.createLogForEntityLoaded('Authors', _this.entitiesModel.authors.size());
                _this.createLogForEntityLoaded('Categories', _this.entitiesModel.categories.size());
            });
        };
        DataProviderController.prototype.createLogForEntityLoaded = function (entity, quantity) {
            var log = Instrumentation_1.default.getLog("quantityOf" + entity);
            log.setParameters({
                activity: "Quantity of " + entity,
                instanceCount: quantity,
            });
            log.submit();
        };
        DataProviderController.prototype.getFileById = function (fileId) {
            if (fileId) {
                return this.files.getFileById(fileId);
            }
            return;
        };
        DataProviderController.prototype.fetchFilesData = function (fileIds) {
            this.files.fetch({
                data: { fileIds: JSON.stringify(fileIds) },
                remove: false,
            });
        };
        return DataProviderController;
    }());
    exports.DataProvider = DataProviderController.instance;
});
/// <amd-module name="SuiteCommerce.Blog.EmptyState.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.EmptyState.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EmptyStateModel = /** @class */ (function (_super) {
        __extends(EmptyStateModel, _super);
        function EmptyStateModel(options) {
            return _super.call(this, options) || this;
        }
        Object.defineProperty(EmptyStateModel.prototype, "label", {
            get: function () {
                return this.get('label');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyStateModel.prototype, "message", {
            get: function () {
                return this.get('message');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyStateModel.prototype, "actionButtonLabel", {
            get: function () {
                return this.get('actionButtonLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyStateModel.prototype, "actionButtonUrl", {
            get: function () {
                return this.get('actionButtonUrl');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyStateModel.prototype, "showSuggestions", {
            get: function () {
                return this.get('showSuggestions');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyStateModel.prototype, "suggestionListTitle", {
            get: function () {
                return this.get('suggestionListTitle');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EmptyStateModel.prototype, "searchSuggestionOptions", {
            get: function () {
                return this.get('searchSuggestionOptions');
            },
            enumerable: true,
            configurable: true
        });
        return EmptyStateModel;
    }(Backbone_1.Model));
    exports.EmptyStateModel = EmptyStateModel;
});
/// <amd-module name="SuiteCommerce.Blog.EmptyState.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.EmptyState.View", ["require", "exports", "Backbone", "sc_blog_home_empty_state.tpl"], function (require, exports, Backbone_1, emptyStateTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EmptyStateView = /** @class */ (function (_super) {
        __extends(EmptyStateView, _super);
        function EmptyStateView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.template = emptyStateTemplate;
            return _this;
        }
        EmptyStateView.prototype.getContext = function () {
            return {
                label: this.model.label,
                message: this.model.message,
                buttonLabel: this.model.actionButtonLabel,
                buttonUrl: this.model.actionButtonUrl,
            };
        };
        return EmptyStateView;
    }(Backbone_1.View));
    exports.EmptyStateView = EmptyStateView;
});
/// <amd-module name="SuiteCommerce.Blog.ExtCarousel.DOMHandler"/>
define("SuiteCommerce.Blog.ExtCarousel.DOMHandler", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Direction;
    (function (Direction) {
        Direction["right"] = "right";
        Direction["left"] = "left";
    })(Direction = exports.Direction || (exports.Direction = {}));
    var ClassNames;
    (function (ClassNames) {
        ClassNames["slidesContainer"] = "sc-ext-carousel-slides";
        ClassNames["slideWrapper"] = "sc-ext-carousel-slide";
        ClassNames["activeSlide"] = "active";
        ClassNames["incomingHelper"] = "in-{direction}";
        ClassNames["dragAreaHelper"] = "drag-area";
        ClassNames["dragStartHelper"] = "drag-start";
        ClassNames["dragEndHelper"] = "drag-end";
    })(ClassNames = exports.ClassNames || (exports.ClassNames = {}));
    exports.transitionSpeed = 400;
    exports.transitionSpeedDragging = 200;
    var ExtCarouselDOMHandler = /** @class */ (function () {
        function ExtCarouselDOMHandler(options) {
            this.transitionDelay = exports.transitionSpeed + 100;
            this.$parentElement = options.sourceView.$el;
        }
        ExtCarouselDOMHandler.prototype.executeSlideTransition = function (transition) {
            this.handleIncomingTransition(transition.target);
            this.handleOutgoingTransition(transition.current);
        };
        ExtCarouselDOMHandler.prototype.handleIncomingTransition = function (movementData) {
            var _this = this;
            this.isRunningTransition = true;
            this.toggleSelectorOnSlide(movementData.index, ClassNames.incomingHelper.replace('{direction}', movementData.direction));
            this.forceReflowSlide(movementData.index);
            this.toggleSelectorOnSlide(movementData.index, this.getOutputDirection(movementData));
            setTimeout(function () {
                _this.toggleSelectorOnSlide(movementData.index, ClassNames.activeSlide + "\n        " + ClassNames.incomingHelper.replace('{direction}', movementData.direction) + "\n        " + _this.getOutputDirection(movementData));
            }, 0);
        };
        ExtCarouselDOMHandler.prototype.handleOutgoingTransition = function (movementData) {
            var _this = this;
            this.toggleSelectorOnSlide(movementData.index, movementData.direction);
            setTimeout(function () {
                _this.toggleSelectorOnSlide(movementData.index, movementData.direction + " " + ClassNames.activeSlide);
                _this.isRunningTransition = false;
            }, exports.transitionSpeed);
        };
        ExtCarouselDOMHandler.prototype.prepareDragArea = function (current, target) {
            this.dragArea.addClass(ClassNames.dragAreaHelper);
            this.getSlideByIndex(current).addClass(ClassNames.dragStartHelper);
            this.getSlideByIndex(target).addClass(ClassNames.dragStartHelper);
        };
        ExtCarouselDOMHandler.prototype.prepareEndingDrag = function (current, target) {
            this.getSlideByIndex(current).addClass(ClassNames.dragEndHelper);
            this.getSlideByIndex(target).addClass(ClassNames.dragEndHelper);
        };
        ExtCarouselDOMHandler.prototype.moveSlideTo = function (movementData) {
            this.getSlideByIndex(movementData.index).css('transform', "translateX(" + movementData.vectorX + "px)");
        };
        ExtCarouselDOMHandler.prototype.getVectorXForBoundSlide = function (dragDirection, activeSlideIndex) {
            if (!this.$lastActiveSlide || activeSlideIndex !== this.lastActiveSlideIndex) {
                this.updateLastActiveSlide(activeSlideIndex);
            }
            var offset = this.$lastActiveSlide.offset();
            var activeSlideOffset = (offset) ? offset.left : 0;
            if (dragDirection === Direction.right) {
                return activeSlideOffset + this.lastActiveSlideWidth - this.lastActiveSlideOffsetParent;
            }
            return this.lastActiveSlideWidth - activeSlideOffset + this.lastActiveSlideOffsetParent;
        };
        ExtCarouselDOMHandler.prototype.updateLastActiveSlide = function (index) {
            this.lastActiveSlideIndex = index;
            this.$lastActiveSlide = this.getSlideByIndex(index);
            this.lastActiveSlideWidth = this.$lastActiveSlide.width();
            var parent = this.$lastActiveSlide.offsetParent();
            var parentOffset = (parent) ? parent.offset() : null;
            this.lastActiveSlideOffsetParent = (parentOffset) ? parentOffset.left : 0;
        };
        ExtCarouselDOMHandler.prototype.getOutputDirection = function (movement) {
            return movement.direction === Direction.left ? Direction.right : Direction.left;
        };
        ExtCarouselDOMHandler.prototype.cleanDragUtilities = function (activeSlideIndex, targetSlideIndex) {
            this.cleanDragUtilitiesForSlide(activeSlideIndex);
            this.cleanDragUtilitiesForSlide(targetSlideIndex);
            this.dragArea.removeClass(ClassNames.dragAreaHelper);
        };
        ExtCarouselDOMHandler.prototype.cleanDragUtilitiesForSlide = function (index) {
            var $slide = this.getSlideByIndex(index);
            $slide.removeClass(ClassNames.dragStartHelper + " " + ClassNames.dragEndHelper);
            $slide.removeAttr('style');
        };
        ExtCarouselDOMHandler.prototype.toggleSelectorOnSlide = function (index, selector) {
            var slide = this.getSlideByIndex(index);
            slide.toggleClass(selector);
        };
        ExtCarouselDOMHandler.prototype.getSlideByIndex = function (index) {
            return this.slides.eq(index);
        };
        Object.defineProperty(ExtCarouselDOMHandler.prototype, "slides", {
            get: function () {
                if (!this.$slides)
                    this.$slides = this.$parentElement.find(this.formatAsSelector(ClassNames.slideWrapper));
                return this.$slides;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselDOMHandler.prototype, "dragArea", {
            get: function () {
                if (!this.$dragArea) {
                    this.$dragArea = this.$parentElement.find(this.formatAsSelector(ClassNames.slidesContainer));
                }
                return this.$dragArea;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselDOMHandler.prototype, "screenWidth", {
            get: function () {
                return jQuery(window).width();
            },
            enumerable: true,
            configurable: true
        });
        ExtCarouselDOMHandler.prototype.formatAsSelector = function (text) {
            return "." + text;
        };
        ExtCarouselDOMHandler.prototype.forceReflowSlide = function (index) {
            var $slide = this.getSlideByIndex(index);
            var offset = $slide.offset();
            if (offset) {
                offset.top;
                offset.left;
            }
        };
        return ExtCarouselDOMHandler;
    }());
    exports.ExtCarouselDOMHandler = ExtCarouselDOMHandler;
});
/// <amd-module name="SuiteCommerce.Blog.ExtCarousel.GestureInterpreter"/>
define("SuiteCommerce.Blog.ExtCarousel.GestureInterpreter", ["require", "exports", "SuiteCommerce.Blog.ExtCarousel.DOMHandler", "underscore"], function (require, exports, ExtCarousel_DOMHandler_1, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DOMEvents;
    (function (DOMEvents) {
        DOMEvents["touchStart"] = "touchstart";
        DOMEvents["touchMove"] = "touchmove";
        DOMEvents["touchEnd"] = "touchend";
        DOMEvents["mouseUp"] = "mouseup";
        DOMEvents["mouseMove"] = "mousemove";
        DOMEvents["mouseDown"] = "mousedown";
        DOMEvents["mouseLeave"] = "mouseleave";
    })(DOMEvents || (DOMEvents = {}));
    var ExtCarouselGestureInterpreter = /** @class */ (function () {
        function ExtCarouselGestureInterpreter(options) {
            this.startingDragThreshold = 15;
            this.$target = options.targetArea;
            this.startPosition = 0;
            this.endPosition = 0;
            this.isTouchSupported = 'ontouchstart' in window || !!navigator.maxTouchPoints;
            this.dragStartCallback = options.dragStartCallback.bind(options.context);
            this.dragEndCallback = _.throttle(options.dragEndCallback.bind(options.context), 200);
        }
        ExtCarouselGestureInterpreter.prototype.handleGestures = function () {
            if (this.isTouchSupported) {
                this.registerListenersForTouchEvents();
            }
            this.registerListenersForMouseEvents();
        };
        ExtCarouselGestureInterpreter.prototype.registerListenersForTouchEvents = function () {
            var _this = this;
            this.$target.on(DOMEvents.touchStart, function (event) {
                _this.startMovementHandler(event);
            });
            this.$target.on(DOMEvents.touchMove, function (event) {
                _this.moveHandler(event);
            });
            this.$target.on(DOMEvents.touchEnd, function (event) {
                _this.endMovementHandler(event);
            });
        };
        ExtCarouselGestureInterpreter.prototype.registerListenersForMouseEvents = function () {
            var _this = this;
            this.$target.on(DOMEvents.mouseDown, function (event) {
                _this.startMovementHandler(event);
            });
            this.$target.on(DOMEvents.mouseMove, function (event) {
                _this.moveHandler(event);
            });
            this.$target.on(DOMEvents.mouseUp + " " + DOMEvents.mouseLeave, function (event) {
                _this.endMovementHandler(event);
            });
        };
        ExtCarouselGestureInterpreter.prototype.startMovementHandler = function (event) {
            // event.changedTouches[0].clientX : touch gestures
            // event.pageX : mouse gestures
            this.startPosition = event.touches ? event.touches[0].clientX : event.pageX;
            if (this.endPosition)
                this.endPosition = 0;
        };
        ExtCarouselGestureInterpreter.prototype.moveHandler = function (event) {
            if (event.touches && event.touches.length > 1) {
                this.endPosition = 0;
            }
            else {
                this.endPosition = event.touches ?
                    event.touches[0].clientX - this.startPosition :
                    event.pageX - this.startPosition;
                if (this.startPosition !== 0 && Math.abs(this.endPosition) > this.startingDragThreshold) {
                    var absEndPosition = Math.abs(this.endPosition);
                    var directionFactor = absEndPosition / this.endPosition;
                    if (directionFactor > 0) {
                        this.dragStartCallback(this.endPosition, ExtCarousel_DOMHandler_1.Direction.left);
                    }
                    if (directionFactor < 0) {
                        this.dragStartCallback(this.endPosition, ExtCarousel_DOMHandler_1.Direction.right);
                    }
                }
            }
        };
        ExtCarouselGestureInterpreter.prototype.endMovementHandler = function (event) {
            if (this.startPosition !== 0) {
                var absEndPosition = Math.abs(this.endPosition);
                if (absEndPosition > this.startingDragThreshold) {
                    var directionFactor = absEndPosition / this.endPosition;
                    if (directionFactor > 0) {
                        this.dragEndCallback(this.endPosition, ExtCarousel_DOMHandler_1.Direction.left);
                    }
                    if (directionFactor < 0) {
                        this.dragEndCallback(this.endPosition, ExtCarousel_DOMHandler_1.Direction.right);
                    }
                }
                this.startPosition = 0;
            }
        };
        return ExtCarouselGestureInterpreter;
    }());
    exports.ExtCarouselGestureInterpreter = ExtCarouselGestureInterpreter;
});
/// <amd-module name="SuiteCommerce.Blog.ExtCarousel.Indicator.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.ExtCarousel.Indicator.Collection", ["require", "exports", "Backbone", "SuiteCommerce.Blog.ExtCarousel.Indicator.Model"], function (require, exports, Backbone_1, ExtCarousel_Indicator_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExtCarouselIndicatorCollection = /** @class */ (function (_super) {
        __extends(ExtCarouselIndicatorCollection, _super);
        function ExtCarouselIndicatorCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = ExtCarousel_Indicator_Model_1.ExtCarouselIndicatorModel;
            return _this;
        }
        return ExtCarouselIndicatorCollection;
    }(Backbone_1.Collection));
    exports.ExtCarouselIndicatorCollection = ExtCarouselIndicatorCollection;
});
/// <amd-module name="SuiteCommerce.Blog.ExtCarousel.Indicator.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.ExtCarousel.Indicator.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExtCarouselIndicatorModel = /** @class */ (function (_super) {
        __extends(ExtCarouselIndicatorModel, _super);
        function ExtCarouselIndicatorModel(options) {
            return _super.call(this, options) || this;
        }
        Object.defineProperty(ExtCarouselIndicatorModel.prototype, "index", {
            get: function () {
                return this.get('index');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselIndicatorModel.prototype, "slide", {
            get: function () {
                return this.get('slide');
            },
            enumerable: true,
            configurable: true
        });
        return ExtCarouselIndicatorModel;
    }(Backbone_1.Model));
    exports.ExtCarouselIndicatorModel = ExtCarouselIndicatorModel;
});
/// <amd-module name="SuiteCommerce.Blog.ExtCarousel.Indicator.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.ExtCarousel.Indicator.View", ["require", "exports", "Backbone", "sc_ext_carousel_indicator.tpl"], function (require, exports, Backbone_1, indicatorTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExtCarouselIndicatorView = /** @class */ (function (_super) {
        __extends(ExtCarouselIndicatorView, _super);
        function ExtCarouselIndicatorView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = indicatorTemplate;
            _this.indicatorContentView = options.indicatorContentView;
            _this.setupModelListener();
            return _this;
        }
        ExtCarouselIndicatorView.prototype.setupModelListener = function () {
            var _this = this;
            this.model.slide.on('change:isActive', function () {
                if (_this.model.slide.isActive) {
                    _this.$el.addClass('active');
                }
                else {
                    _this.$el.removeClass('active');
                }
            });
        };
        Object.defineProperty(ExtCarouselIndicatorView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'IndicatorContent.View': function () {
                        return new _this.indicatorContentView({ model: _this.model });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        ExtCarouselIndicatorView.prototype.getContext = function () {
            return {
                index: this.model.index,
                isActive: this.model.slide.isActive,
            };
        };
        return ExtCarouselIndicatorView;
    }(Backbone_1.View));
    exports.ExtCarouselIndicatorView = ExtCarouselIndicatorView;
});
/// <amd-module name="SuiteCommerce.Blog.ExtCarousel.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.ExtCarousel.Model", ["require", "exports", "Backbone", "SuiteCommerce.Blog.ExtCarousel.Indicator.Collection", "SuiteCommerce.Blog.ExtCarousel.Indicator.Model"], function (require, exports, Backbone_1, ExtCarousel_Indicator_Collection_1, ExtCarousel_Indicator_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Transition;
    (function (Transition) {
        Transition["fade"] = "fade";
        Transition["slide"] = "slide";
    })(Transition = exports.Transition || (exports.Transition = {}));
    var ExtCarouselModel = /** @class */ (function (_super) {
        __extends(ExtCarouselModel, _super);
        function ExtCarouselModel(options) {
            var _this = _super.call(this, options) || this;
            _this.setupSlideCollectionListener();
            return _this;
        }
        ExtCarouselModel.prototype.setupSlideCollectionListener = function () {
            var _this = this;
            this.slides.on('add reset', function (input) {
                if (input instanceof Backbone_1.Model) {
                    _this.indicators.add(new ExtCarousel_Indicator_Model_1.ExtCarouselIndicatorModel({
                        slide: input,
                        index: _this.slides.indexOf(input),
                    }));
                }
                else {
                    var indicators_1 = [];
                    input.each(function (slide) {
                        indicators_1.push(new ExtCarousel_Indicator_Model_1.ExtCarouselIndicatorModel({
                            slide: slide,
                            index: _this.slides.indexOf(slide),
                        }));
                    });
                    _this.indicators.reset(indicators_1);
                }
            });
        };
        ExtCarouselModel.prototype.defaults = function () {
            return {
                interval: 5000,
                transition: Transition.slide,
                showIndicators: true,
                autoPlay: true,
            };
        };
        Object.defineProperty(ExtCarouselModel.prototype, "carouselTitle", {
            get: function () {
                return this.get('carouselTitle');
            },
            set: function (carouselTitle) {
                this.set('carouselTitle', carouselTitle);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselModel.prototype, "interval", {
            get: function () {
                return this.get('interval');
            },
            set: function (duration) {
                this.set('interval', duration);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselModel.prototype, "transition", {
            get: function () {
                return this.get('transition');
            },
            set: function (transition) {
                this.set('transition', transition);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselModel.prototype, "showIndicators", {
            get: function () {
                return this.get('showIndicators');
            },
            set: function (showIndicators) {
                this.set('showIndicators', showIndicators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselModel.prototype, "slides", {
            get: function () {
                return this.get('slides');
            },
            set: function (slides) {
                this.set('slides', slides);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselModel.prototype, "autoPlay", {
            get: function () {
                return this.get('autoPlay');
            },
            set: function (autoPlay) {
                this.set('autoPlay', autoPlay);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtCarouselModel.prototype, "indicators", {
            get: function () {
                if (!this.get('indicators'))
                    this.set('indicators', new ExtCarousel_Indicator_Collection_1.ExtCarouselIndicatorCollection());
                return this.get('indicators');
            },
            enumerable: true,
            configurable: true
        });
        return ExtCarouselModel;
    }(Backbone_1.Model));
    exports.ExtCarouselModel = ExtCarouselModel;
});
/// <amd-module name="SuiteCommerce.Blog.ExtCarousel.Slide.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.ExtCarousel.Slide.View", ["require", "exports", "Backbone", "sc_ext_carousel_slide.tpl"], function (require, exports, Backbone_1, extSlideTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExtCarouselSlideView = /** @class */ (function (_super) {
        __extends(ExtCarouselSlideView, _super);
        function ExtCarouselSlideView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = extSlideTemplate;
            _this.slideContentView = options.slideContentView;
            return _this;
        }
        Object.defineProperty(ExtCarouselSlideView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'SlideContent.View': function () {
                        return new _this.slideContentView({ model: _this.model });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        ExtCarouselSlideView.prototype.getContext = function () {
            return {
                isActive: this.model.isActive,
            };
        };
        return ExtCarouselSlideView;
    }(Backbone_1.View));
    exports.ExtCarouselSlideView = ExtCarouselSlideView;
});
/// <amd-module name="SuiteCommerce.Blog.ExtCarousel.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.ExtCarousel.View", ["require", "exports", "Backbone", "sc_ext_carousel.tpl", "SuiteCommerce.Blog.ExtCarousel.Slide.View", "SuiteCommerce.Blog.ExtCarousel.Indicator.View", "SuiteCommerce.Blog.ExtCarousel.GestureInterpreter", "SuiteCommerce.Blog.ExtCarousel.DOMHandler", "underscore", "Backbone.CollectionView"], function (require, exports, Backbone_1, extCarouselTemplate, ExtCarousel_Slide_View_1, ExtCarousel_Indicator_View_1, ExtCarousel_GestureInterpreter_1, ExtCarousel_DOMHandler_1, _, BackboneCollectionView) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExtCarouselView = /** @class */ (function (_super) {
        __extends(ExtCarouselView, _super);
        function ExtCarouselView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = extCarouselTemplate;
            _this.swipeThreshold = 45;
            _this.setupModelListener();
            _this.carouselId = new Date().getUTCMilliseconds();
            _this.buildEventsHash();
            return _this;
        }
        ExtCarouselView.prototype.setupModelListener = function () {
            var _this = this;
            this.model.on('change:showIndicators', function () {
                _this.render();
            });
        };
        ExtCarouselView.prototype.buildEventsHash = function () {
            var events = {
                'click [data-action="change-slide"]': 'onIndicatorsUsage',
            };
            events["mouseenter [data-carousel-id=\"" + this.carouselId + "\"] .sc-ext-carousel-slide"] = 'onMouseEnter';
            events["mouseleave [data-carousel-id=\"" + this.carouselId + "\"] .sc-ext-carousel-slide"] = 'onMouseLeave';
            this.events = events;
        };
        Object.defineProperty(ExtCarouselView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'Slides.View': function () {
                        if (_this.model.slides.size() > 0) {
                            _this.model.slides.models[0].isActive = true;
                        }
                        return new BackboneCollectionView({
                            childView: ExtCarousel_Slide_View_1.ExtCarouselSlideView,
                            collection: _this.model.slides,
                            childViewOptions: {
                                slideContentView: _this.slideContentView,
                                transition: _this.model.transition,
                            },
                        });
                    },
                    'Indicators.View': function () {
                        return _this.indicatorContentView
                            ? new BackboneCollectionView({
                                childView: ExtCarousel_Indicator_View_1.ExtCarouselIndicatorView,
                                collection: _this.model.indicators,
                                childViewOptions: {
                                    indicatorContentView: _this.indicatorContentView,
                                },
                            })
                            : null;
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        ExtCarouselView.prototype.onMouseEnter = function () {
            if (this.isAutoPlayAllowed() && this.alternationIntervalId !== null) {
                this.pause();
            }
        };
        ExtCarouselView.prototype.onMouseLeave = function () {
            if (this.isAutoPlayAllowed() && !this.alternationIntervalId) {
                this.cycle();
            }
        };
        ExtCarouselView.prototype.moveToSlide = function (targetIndex) {
            var activeIndex = this.getActiveIndex();
            var isGoingToWrapToRight = activeIndex === this.model.slides.size() - 1 && targetIndex === 0;
            if (targetIndex !== activeIndex) {
                if (targetIndex > activeIndex || isGoingToWrapToRight) {
                    this.transitionToRight(activeIndex, targetIndex);
                }
                else {
                    this.transitionToLeft(activeIndex, targetIndex);
                }
            }
        };
        ExtCarouselView.prototype.transitionToRight = function (current, target) {
            this.DOMHandler.executeSlideTransition({
                current: {
                    index: current,
                    direction: ExtCarousel_DOMHandler_1.Direction.left,
                },
                target: {
                    index: target,
                    direction: ExtCarousel_DOMHandler_1.Direction.right,
                },
            });
            this.changeActiveModel(current, target);
        };
        ExtCarouselView.prototype.transitionToLeft = function (current, target) {
            this.DOMHandler.executeSlideTransition({
                current: {
                    index: current,
                    direction: ExtCarousel_DOMHandler_1.Direction.right,
                },
                target: {
                    index: target,
                    direction: ExtCarousel_DOMHandler_1.Direction.left,
                },
            });
            this.changeActiveModel(current, target);
        };
        ExtCarouselView.prototype.changeActiveModel = function (current, target) {
            this.model.slides.at(current).isActive = false;
            this.model.slides.at(target).isActive = true;
        };
        ExtCarouselView.prototype.getActiveIndex = function () {
            return this.model.slides.findIndex(function (slide) {
                return slide.isActive;
            });
        };
        ExtCarouselView.prototype.getNextIndex = function () {
            var nextIndex = this.getActiveIndex() + 1;
            return this.model.slides.at(nextIndex) ? nextIndex : 0;
        };
        ExtCarouselView.prototype.getPrevIndex = function () {
            var prevIndex = this.getActiveIndex() - 1;
            return this.model.slides.at(prevIndex) && prevIndex >= 0
                ? prevIndex
                : this.model.slides.length - 1;
        };
        ExtCarouselView.prototype.getContext = function () {
            return {
                carouselTitle: this.model.carouselTitle,
                carouselId: this.carouselId,
                slides: this.model.slides,
                transition: this.model.transition,
                showIndicators: this.model.showIndicators,
            };
        };
        ExtCarouselView.prototype.render = function () {
            _super.prototype.render.call(this);
            if (this.model.slides.size() > 1) {
                this.initializeDOMHandler();
                this.initializeGestureInterpretation();
                this.throttleTransitionTriggers();
            }
            return;
        };
        ExtCarouselView.prototype.initializeDOMHandler = function () {
            this.DOMHandler = new ExtCarousel_DOMHandler_1.ExtCarouselDOMHandler({ sourceView: this });
        };
        ExtCarouselView.prototype.initializeGestureInterpretation = function () {
            this.gestureInterpreter = new ExtCarousel_GestureInterpreter_1.ExtCarouselGestureInterpreter({
                context: this,
                targetArea: this.DOMHandler.dragArea,
                dragStartCallback: this.onDrag,
                dragEndCallback: this.onDragEnd,
            });
            this.gestureInterpreter.handleGestures();
        };
        ExtCarouselView.prototype.onDrag = function (vectorX, direction) {
            this.pause();
            if (!this.isDragging) {
                this.lastDraggingDirection = direction;
                this.activeIndexDragging = this.getActiveIndex();
                this.targetIndexDragging = this.getTargetIndexByDirection(direction);
                this.DOMHandler.prepareDragArea(this.activeIndexDragging, this.targetIndexDragging);
                this.isDragging = true;
            }
            if (this.isDragging && direction !== this.lastDraggingDirection) {
                this.lastDraggingDirection = direction;
                this.DOMHandler.cleanDragUtilitiesForSlide(this.targetIndexDragging);
                this.targetIndexDragging = this.getTargetIndexByDirection(direction);
                this.DOMHandler.toggleSelectorOnSlide(this.targetIndexDragging, ExtCarousel_DOMHandler_1.ClassNames.dragStartHelper);
            }
            var vectorXBoundSlide = this.DOMHandler.getVectorXForBoundSlide(direction, this.activeIndexDragging);
            var directionFactor = direction === ExtCarousel_DOMHandler_1.Direction.right ? 1 : -1;
            this.DOMHandler.moveSlideTo({
                vectorX: vectorX,
                index: this.activeIndexDragging,
            });
            this.DOMHandler.moveSlideTo({
                vectorX: vectorXBoundSlide * directionFactor,
                index: this.targetIndexDragging,
            });
        };
        ExtCarouselView.prototype.onDragEnd = function (vectorX, direction) {
            var _this = this;
            this.DOMHandler.prepareEndingDrag(this.activeIndexDragging, this.targetIndexDragging);
            if (Math.abs(vectorX) > this.swipeThreshold) {
                var factorSwipeMovement = direction === ExtCarousel_DOMHandler_1.Direction.right ? -1 : 1;
                this.model.slides.at(this.activeIndexDragging).isActive = false;
                this.model.slides.at(this.targetIndexDragging).isActive = true;
                this.DOMHandler.toggleSelectorOnSlide(this.activeIndexDragging, ExtCarousel_DOMHandler_1.ClassNames.activeSlide);
                this.DOMHandler.toggleSelectorOnSlide(this.targetIndexDragging, ExtCarousel_DOMHandler_1.ClassNames.activeSlide);
                this.DOMHandler.moveSlideTo({
                    index: this.targetIndexDragging,
                    vectorX: 0,
                });
                this.DOMHandler.moveSlideTo({
                    index: this.activeIndexDragging,
                    vectorX: this.DOMHandler.screenWidth * factorSwipeMovement,
                });
            }
            else {
                var factorCanceledMovement = direction === ExtCarousel_DOMHandler_1.Direction.right ? 1 : -1;
                this.DOMHandler.moveSlideTo({
                    index: this.targetIndexDragging,
                    vectorX: this.DOMHandler.screenWidth * factorCanceledMovement,
                });
                this.DOMHandler.moveSlideTo({
                    index: this.activeIndexDragging,
                    vectorX: 0,
                });
            }
            setTimeout(function () {
                _this.DOMHandler.cleanDragUtilities(_this.activeIndexDragging, _this.targetIndexDragging);
                _this.isDragging = false;
            }, ExtCarousel_DOMHandler_1.transitionSpeedDragging);
            this.cycle();
        };
        ExtCarouselView.prototype.getTargetIndexByDirection = function (direction) {
            return direction === ExtCarousel_DOMHandler_1.Direction.right
                ? this.getNextIndex()
                : this.getPrevIndex();
        };
        ExtCarouselView.prototype.throttleTransitionTriggers = function () {
            if (this.DOMHandler) {
                this.onIndicatorsUsage = _.throttle(this.onIndicatorsUsageHandler, this.DOMHandler.transitionDelay);
            }
        };
        ExtCarouselView.prototype.onIndicatorsUsageHandler = function (event) {
            if (!this.DOMHandler.isRunningTransition) {
                this.pause();
                var targetIndex = jQuery(event.currentTarget).data('index');
                this.moveToSlide(targetIndex);
                this.cycle();
            }
        };
        ExtCarouselView.prototype.start = function () {
            this.render();
            this.cycle();
        };
        ExtCarouselView.prototype.cycle = function () {
            var _this = this;
            if (this.isAutoPlayAllowed()) {
                if (this.alternationIntervalId)
                    this.pause();
                this.alternationIntervalId = setInterval(function () { return _this.moveToSlide(_this.getNextIndex()); }, this.model.interval);
            }
        };
        ExtCarouselView.prototype.isAutoPlayAllowed = function () {
            return this.model.autoPlay && this.model.slides.size() > 1;
        };
        ExtCarouselView.prototype.pause = function () {
            if (this.alternationIntervalId) {
                clearInterval(this.alternationIntervalId);
                this.alternationIntervalId = null;
            }
        };
        return ExtCarouselView;
    }(Backbone_1.View));
    exports.ExtCarouselView = ExtCarouselView;
});
/// <amd-module name="SuiteCommerce.Blog.Instrumentation.Log"/>
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
define("SuiteCommerce.Blog.Instrumentation.Log", ["require", "exports", "SuiteCommerce.Blog.Instrumentation.Logger"], function (require, exports, Instrumentation_Logger_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogSeverity;
    (function (LogSeverity) {
        LogSeverity["INFO"] = "info";
        LogSeverity["ERROR"] = "error";
    })(LogSeverity = exports.LogSeverity || (exports.LogSeverity = {}));
    var Log = /** @class */ (function () {
        function Log(attributes) {
            if (attributes === void 0) { attributes = { label: '' }; }
            this.setInitialAttributes(attributes);
        }
        Log.prototype.setInitialAttributes = function (attributes) {
            var defaultAttributes = {
                label: null,
                timer: {},
                severity: LogSeverity.INFO,
            };
            var _a = __assign(__assign({}, defaultAttributes), attributes), label = _a.label, parametersToSubmit = _a.parametersToSubmit, timer = _a.timer, severity = _a.severity;
            this.label = label;
            this.parametersToSubmit = parametersToSubmit;
            this.timer = timer;
            this.severity = severity;
        };
        Log.prototype.startTimer = function () {
            this.timer.startTime = this.getTimestamp();
        };
        Log.prototype.endTimer = function () {
            this.timer.endTime = this.getTimestamp();
        };
        Log.prototype.getTimestamp = function () {
            if (!this.isOldInternetExplorer()) {
                return performance.now() || Date.now();
            }
            return Date.now();
        };
        Log.prototype.getElapsedTimeForTimer = function () {
            var timer = this.timer;
            if (timer.startTime && timer.endTime) {
                if (timer.startTime > timer.endTime) {
                    console.warn('Start time should be minor that end time in timer');
                    return null;
                }
                return timer.endTime - timer.startTime;
            }
            if (!timer.startTime)
                console.warn('The Start time is not defined');
            if (!timer.endTime)
                console.warn('The End time is not defined');
            return null;
        };
        Log.prototype.setParameters = function (data) {
            var _this = this;
            Object.keys(data).forEach(function (parameter) {
                _this.setParameter(parameter, data[parameter]);
            });
        };
        Log.prototype.setParameter = function (parameter, value) {
            var logData = this.parametersToSubmit;
            logData[parameter] = value;
            this.parametersToSubmit = logData;
        };
        Log.prototype.submit = function () {
            if (!this.isOldInternetExplorer()) {
                switch (this.severity) {
                    case LogSeverity.ERROR:
                        this.submitAsError();
                        break;
                    case LogSeverity.INFO:
                    default:
                        this.submitAsInfo();
                }
            }
        };
        Log.prototype.isOldInternetExplorer = function () {
            return (!!navigator.userAgent.match(/Trident/g) ||
                !!navigator.userAgent.match(/MSIE/g));
        };
        Log.prototype.submitAsError = function () {
            Instrumentation_Logger_1.Logger.getLogger().error(this.parametersToSubmit);
        };
        Log.prototype.submitAsInfo = function () {
            Instrumentation_Logger_1.Logger.getLogger().info(this.parametersToSubmit);
        };
        return Log;
    }());
    exports.Log = Log;
});
/// <amd-module name="SuiteCommerce.Blog.Instrumentation.Logger"/>
define("SuiteCommerce.Blog.Instrumentation.Logger", ["require", "exports", "SuiteCommerce.Blog.Instrumentation.MockAppender"], function (require, exports, Instrumentation_MockAppender_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Logger = /** @class */ (function () {
        function Logger() {
        }
        Logger.getLogger = function () {
            this.instance = this.instance || this.buildLoggerInstance();
            return this.instance;
        };
        Logger.buildLoggerInstance = function () {
            var _a;
            try {
                // @ts-ignore
                var LoggersModule = require('Loggers').Loggers;
                // @ts-ignore
                var elasticAppender = require('Loggers.Appender.ElasticLogger').LoggersAppenderElasticLogger.getInstance();
                // Just for test purposes in local environments: the output of MockApppender is the browser console.
                var mockAppender = Instrumentation_MockAppender_1.MockAppender.getInstance();
                // @ts-ignore
                var configurationModule = require('Loggers.Configuration');
                var loggerName = "CommerceExtensions" + Logger.options.queueNameSuffix;
                LoggersModule.setConfiguration((_a = {},
                    _a[loggerName] = {
                        log: [
                            { profile: configurationModule.prod, appenders: [elasticAppender] },
                            { profile: configurationModule.dev, appenders: [mockAppender] },
                        ],
                        actions: {},
                        loggers: {},
                    },
                    _a));
                return LoggersModule.getLogger(loggerName);
            }
            catch (e) {
                return {
                    info: function (obj) { },
                    error: function (obj) { },
                };
            }
        };
        return Logger;
    }());
    exports.Logger = Logger;
});
/// <amd-module name="SuiteCommerce.Blog.Instrumentation.MockAppender"/>
define("SuiteCommerce.Blog.Instrumentation.MockAppender", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MockAppender = /** @class */ (function () {
        function MockAppender() {
        }
        MockAppender.prototype.info = function (data) {
            console.info('MockAppender - Info', data);
        };
        MockAppender.prototype.error = function (data) {
            console.error('MockAppender - Error', data);
        };
        MockAppender.prototype.ready = function () {
            return true;
        };
        MockAppender.getInstance = function () {
            if (!MockAppender.instance) {
                MockAppender.instance = new MockAppender();
            }
            return MockAppender.instance;
        };
        MockAppender.prototype.start = function (action, options) {
            return options;
        };
        MockAppender.prototype.end = function (startOptions, options) { };
        return MockAppender;
    }());
    exports.MockAppender = MockAppender;
});
/// <amd-module name="SuiteCommerce.Blog.Instrumentation"/>
define("SuiteCommerce.Blog.Instrumentation", ["require", "exports", "underscore", "SuiteCommerce.Blog.Instrumentation.Logger", "SuiteCommerce.Blog.Instrumentation.Log"], function (require, exports, _, Instrumentation_Logger_1, Instrumentation_Log_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var logs = [];
    exports.default = {
        initialize: function (options) {
            Instrumentation_Logger_1.Logger.options = options;
        },
        getLog: function (logLabel) {
            return this.getLogModelByLabel(logLabel) || this.registerNewLog(logLabel);
        },
        getLogModelByLabel: function (label) {
            return _(logs).findWhere({ label: label });
        },
        registerNewLog: function (label) {
            var defaultParameters = _.clone(Instrumentation_Logger_1.Logger.options.defaultParameters);
            var log = new Instrumentation_Log_1.Log({ label: label, parametersToSubmit: defaultParameters });
            logs.push(log);
            return log;
        },
        setParameterForAllLogs: function (parameter, value) {
            logs.forEach(function (log) {
                log.setParameter(parameter, value);
            });
        },
        setParametersForAllLogs: function (data) {
            logs.forEach(function (log) {
                log.setParameters(data);
            });
        },
        submitLogs: function () {
            logs.forEach(function (log) {
                log.submit();
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.Blog.LatestPosts.Indicator.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.LatestPosts.Indicator.View", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LatestPostsIndicatorModel = /** @class */ (function (_super) {
        __extends(LatestPostsIndicatorModel, _super);
        function LatestPostsIndicatorModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LatestPostsIndicatorModel.prototype, "index", {
            get: function () {
                return this.get('index');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LatestPostsIndicatorModel.prototype, "slide", {
            get: function () {
                return this.get('slide');
            },
            enumerable: true,
            configurable: true
        });
        return LatestPostsIndicatorModel;
    }(Backbone_1.Model));
    exports.LatestPostsIndicatorModel = LatestPostsIndicatorModel;
});
/// <amd-module name="SuiteCommerce.Blog.LatestPosts.Indicator.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.LatestPosts.Indicator.Model", ["require", "exports", "Backbone", "sc_blog_latest_posts_indicator.tpl"], function (require, exports, Backbone_1, latestPostsIndicatorTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LatestPostsIndicatorView = /** @class */ (function (_super) {
        __extends(LatestPostsIndicatorView, _super);
        function LatestPostsIndicatorView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.template = latestPostsIndicatorTemplate;
            return _this;
        }
        LatestPostsIndicatorView.prototype.getContext = function () {
            return {
                label: this.model.index + 1,
            };
        };
        return LatestPostsIndicatorView;
    }(Backbone_1.View));
    exports.LatestPostsIndicatorView = LatestPostsIndicatorView;
});
/// <amd-module name="SuiteCommerce.Blog.LatestPosts.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.LatestPosts.Model", ["require", "exports", "SuiteCommerce.Blog.ExtCarousel.Model"], function (require, exports, ExtCarousel_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LatestPostsModel = /** @class */ (function (_super) {
        __extends(LatestPostsModel, _super);
        function LatestPostsModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LatestPostsModel;
    }(ExtCarousel_Model_1.ExtCarouselModel));
    exports.LatestPostsModel = LatestPostsModel;
});
/// <amd-module name="SuiteCommerce.Blog.LatestPosts.Slide.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.LatestPosts.Slide.Collection", ["require", "exports", "SuiteCommerce.Blog.LatestPosts.Slide.Model.ts", "Backbone"], function (require, exports, LatestPosts_Slide_Model_1, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LatestPostsSlideCollection = /** @class */ (function (_super) {
        __extends(LatestPostsSlideCollection, _super);
        function LatestPostsSlideCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = LatestPosts_Slide_Model_1.LatestPostsSlideModel;
            return _this;
        }
        return LatestPostsSlideCollection;
    }(Backbone_1.Collection));
    exports.LatestPostsSlideCollection = LatestPostsSlideCollection;
});
/// <amd-module name="SuiteCommerce.Blog.LatestPosts.Slide.Model.ts"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.LatestPosts.Slide.Model.ts", ["require", "exports", "SuiteCommerce.Blog.Post.Model"], function (require, exports, Post_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LatestPostsSlideModel = /** @class */ (function (_super) {
        __extends(LatestPostsSlideModel, _super);
        function LatestPostsSlideModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LatestPostsSlideModel.prototype, "isActive", {
            get: function () {
                return this.get('isActive');
            },
            set: function (isActive) {
                this.set('isActive', isActive);
            },
            enumerable: true,
            configurable: true
        });
        return LatestPostsSlideModel;
    }(Post_Model_1.PostModel));
    exports.LatestPostsSlideModel = LatestPostsSlideModel;
});
/// <amd-module name="SuiteCommerce.Blog.LatestPosts.Slide.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.LatestPosts.Slide.View", ["require", "exports", "Backbone", "sc_blog_latest_posts_slide.tpl", "sc_blog_latest_posts_slide_dummy.tpl", "SuiteCommerce.Blog.Common.Configuration"], function (require, exports, Backbone_1, slideTemplate, slideTemplateDummy, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LatestPostsSlideView = /** @class */ (function (_super) {
        __extends(LatestPostsSlideView, _super);
        function LatestPostsSlideView(options) {
            var _this = _super.call(this, options) || this;
            _this.model.on('change', function () {
                _this.render();
            });
            _this.template = (_this.model.isDummy) ? slideTemplateDummy : slideTemplate;
            _this.events = {
                'click [data-action="navigate-to-blog"]': 'navigateToBlogPost',
            };
            return _this;
        }
        LatestPostsSlideView.prototype.navigateToBlogPost = function (event) {
            if (event.target.tagName === 'A') {
                return true;
            }
            Backbone_1.history.navigate(this.model.url, true);
        };
        LatestPostsSlideView.prototype.getContext = function () {
            return {
                showThumbnailContainer: !this.model.isDummy,
                category: this.model.categoryName,
                excerpt: this.model.excerpt,
                header: this.model.header,
                readMoreLabel: Configuration_1.Configuration.readMoreLabel,
                imageAlt: this.model.headerImageAlt,
                imageUrl: this.model.headerImageURL,
                imageResizeId: this.model.headerImageResizeName,
                url: this.model.url,
                showThumbnail: !!this.model.headerImageURL,
                categoryURL: this.model.categoryURL,
            };
        };
        return LatestPostsSlideView;
    }(Backbone_1.View));
    exports.LatestPostsSlideView = LatestPostsSlideView;
});
/// <amd-module name="SuiteCommerce.Blog.LatestPosts.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.LatestPosts.View", ["require", "exports", "SuiteCommerce.Blog.ExtCarousel.View", "SuiteCommerce.Blog.LatestPosts.Slide.Model.ts", "SuiteCommerce.Blog.LatestPosts.Slide.View", "SuiteCommerce.Blog.Common.Searcher.Helper", "SuiteCommerce.Blog.Post.Collection", "SuiteCommerce.Blog.LatestPosts.Indicator.Model"], function (require, exports, ExtCarousel_View_1, LatestPosts_Slide_Model_1, LatestPosts_Slide_View_1, BlogPostSearcher_Helper_1, Post_Collection_1, LatestPosts_Indicator_View_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LatestPostsView = /** @class */ (function (_super) {
        __extends(LatestPostsView, _super);
        function LatestPostsView(options) {
            var _this = _super.call(this, options) || this;
            _this.slideContentView = LatestPosts_Slide_View_1.LatestPostsSlideView;
            _this.indicatorContentView = LatestPosts_Indicator_View_1.LatestPostsIndicatorView;
            _this.fetchPostList();
            return _this;
        }
        LatestPostsView.prototype.fetchPostList = function () {
            var _this = this;
            var postsCollection = new Post_Collection_1.PostCollection();
            this.addDummyModel();
            postsCollection
                .fetch(BlogPostSearcher_Helper_1.BlogPostSearcherHelper.buildRequestBody({
                settings: { pageSize: 5, pageNumber: 1 },
                taxonomies: [],
            }))
                .done(function (response) {
                _this.model.slides.reset(response.data.slice(0, 3));
                _this.model.showIndicators = true;
                _this.start();
            });
        };
        LatestPostsView.prototype.addDummyModel = function () {
            this.model.showIndicators = false;
            this.model.slides.add(new LatestPosts_Slide_Model_1.LatestPostsSlideModel());
        };
        return LatestPostsView;
    }(ExtCarousel_View_1.ExtCarouselView));
    exports.LatestPostsView = LatestPostsView;
});
/// <amd-module name="SuiteCommerce.Blog.Pagination.Button.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Pagination.Button.Collection", ["require", "exports", "Backbone", "SuiteCommerce.Blog.Pagination.Button.Model"], function (require, exports, Backbone_1, Pagination_Button_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PaginationButtonCollection = /** @class */ (function (_super) {
        __extends(PaginationButtonCollection, _super);
        function PaginationButtonCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = Pagination_Button_Model_1.PaginationButtonModel;
            return _this;
        }
        return PaginationButtonCollection;
    }(Backbone_1.Collection));
    exports.PaginationButtonCollection = PaginationButtonCollection;
});
/// <amd-module name="SuiteCommerce.Blog.Pagination.Button.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Pagination.Button.Model", ["require", "exports", "Backbone", "SuiteCommerce.Blog.Common.ParameterProcessor", "SuiteCommerce.Blog.Common"], function (require, exports, Backbone_1, ParameterProcessor_1, Common_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PaginationButtonModel = /** @class */ (function (_super) {
        __extends(PaginationButtonModel, _super);
        function PaginationButtonModel(options) {
            return _super.call(this, options) || this;
        }
        Object.defineProperty(PaginationButtonModel.prototype, "pageNumber", {
            get: function () {
                return this.get('pageNumber');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationButtonModel.prototype, "url", {
            get: function () {
                var urlComponents = ParameterProcessor_1.ParameterProcessor.decodeParams(Backbone_1.history.getFragment());
                var pageURLComponent = ParameterProcessor_1.PageSettings.page;
                if (urlComponents.queryParams || urlComponents.params) {
                    if (urlComponents.queryParams.indexOf(pageURLComponent + "=") !== -1) {
                        urlComponents.queryParams = urlComponents.queryParams.replace(new RegExp(pageURLComponent + "=[0-9]+", 'gi'), pageURLComponent + "=" + this.pageNumber);
                    }
                    else {
                        urlComponents.queryParams = urlComponents.queryParams
                            ? urlComponents.queryParams + "&" + pageURLComponent + "=" + this.pageNumber
                            : pageURLComponent + "=" + this.pageNumber;
                    }
                    return encodeURI("" + Common_1.BLOG_URL_BASE + (urlComponents.params ? "/" + urlComponents.params : '') + "?" + urlComponents.queryParams);
                }
                return encodeURI(Common_1.BLOG_URL_BASE + "?" + pageURLComponent + "=" + this.pageNumber);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationButtonModel.prototype, "isActive", {
            get: function () {
                return this.get('isActive');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationButtonModel.prototype, "label", {
            get: function () {
                return this.get('label') || this.pageNumber;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationButtonModel.prototype, "hideDivider", {
            get: function () {
                return this.get('hideDivider');
            },
            set: function (hideDivider) {
                this.set('hideDivider', hideDivider);
            },
            enumerable: true,
            configurable: true
        });
        return PaginationButtonModel;
    }(Backbone_1.Model));
    exports.PaginationButtonModel = PaginationButtonModel;
});
/// <amd-module name="SuiteCommerce.Blog.Pagination.Button.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Pagination.Button.View", ["require", "exports", "Backbone", "sc_blog_pagination_button.tpl"], function (require, exports, Backbone_1, buttonTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PaginationButtonView = /** @class */ (function (_super) {
        __extends(PaginationButtonView, _super);
        function PaginationButtonView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = buttonTemplate;
            _this.events = {
                'click [data-action="trigger-pagination"]': 'triggerPagination',
            };
            if (options.isEnabledEventsHandling)
                _this.isEnabledEventsHandling = options.isEnabledEventsHandling;
            if (options.paginationEventId)
                _this.paginationEventId = options.paginationEventId;
            return _this;
        }
        PaginationButtonView.prototype.triggerPagination = function (event) {
            event.preventDefault();
            var page = parseInt(event.target.getAttribute('data-page'), 10);
            this.model.trigger(this.paginationEventId, { page: page });
            return false;
        };
        PaginationButtonView.prototype.getContext = function () {
            return {
                label: this.model.label,
                url: this.model.url,
                isActive: this.model.isActive,
                isEnabledEventsHandling: this.isEnabledEventsHandling,
                pageNumber: this.model.pageNumber,
                hideDivider: this.model.hideDivider,
            };
        };
        return PaginationButtonView;
    }(Backbone_1.View));
    exports.PaginationButtonView = PaginationButtonView;
});
/// <amd-module name="SuiteCommerce.Blog.Pagination.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Pagination.Configuration", ["require", "exports", "SuiteCommerce.Blog.Common.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PaginationConfiguration = /** @class */ (function (_super) {
        __extends(PaginationConfiguration, _super);
        function PaginationConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PaginationConfiguration, "paginationLabel", {
            get: function () {
                return this.get('blog.paginationLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationConfiguration, "articlesByPage", {
            get: function () {
                return parseInt(this.get('blog.articlesByPage'), 10);
            },
            enumerable: true,
            configurable: true
        });
        return PaginationConfiguration;
    }(Configuration_1.Configuration));
    exports.PaginationConfiguration = PaginationConfiguration;
});
/// <amd-module name="SuiteCommerce.Blog.Pagination.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Pagination.Model", ["require", "exports", "Backbone", "SuiteCommerce.Blog.Pagination.Button.Collection", "SuiteCommerce.Blog.Pagination.Configuration", "underscore", "SuiteCommerce.Blog.Pagination.Button.Model"], function (require, exports, Backbone_1, Pagination_Button_Collection_1, Pagination_Configuration_1, _, Pagination_Button_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_PAGINATION_EVENT_ID = 'pagination_triggered';
    var PaginationModel = /** @class */ (function (_super) {
        __extends(PaginationModel, _super);
        function PaginationModel(options) {
            var _this = _super.call(this, options) || this;
            _this.buttonsToShowPerBlock = 5;
            _this.on('change:buttons', function () {
                _this.visibleButtonGroup = _this.selectButtonGroupToShow();
            });
            return _this;
        }
        Object.defineProperty(PaginationModel.prototype, "total", {
            get: function () {
                return this.get('total');
            },
            set: function (total) {
                this.set('total', total);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationModel.prototype, "pageSize", {
            get: function () {
                return this.get('pageSize');
            },
            set: function (pageSize) {
                this.set('pageSize', pageSize);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationModel.prototype, "currentPage", {
            get: function () {
                return this.get('currentPage');
            },
            set: function (currentPage) {
                this.set('currentPage', currentPage);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationModel.prototype, "buttons", {
            get: function () {
                return this.get('buttons');
            },
            set: function (buttons) {
                this.set('buttons', buttons);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationModel.prototype, "visibleButtonGroup", {
            get: function () {
                if (!this.get('visibleButtonGroup')) {
                    this.visibleButtonGroup = this.selectButtonGroupToShow();
                }
                return this.get('visibleButtonGroup');
            },
            set: function (buttons) {
                this.set('visibleButtonGroup', buttons);
            },
            enumerable: true,
            configurable: true
        });
        PaginationModel.prototype.selectButtonGroupToShow = function () {
            var _this = this;
            var visibleButtons = new Pagination_Button_Collection_1.PaginationButtonCollection();
            if (this.buttons.size() > 5) {
                var buttonsGroups_1 = _.chunk(this.buttons.models, this.buttonsToShowPerBlock);
                var activeGroupIndex_1;
                buttonsGroups_1.forEach(function (group, index) {
                    if (group.filter(function (button) {
                        return button.isActive;
                    }).length > 0) {
                        activeGroupIndex_1 = index;
                        if (group.length < _this.buttonsToShowPerBlock) {
                            visibleButtons = new Pagination_Button_Collection_1.PaginationButtonCollection(_.last(buttonsGroups_1[index - 1], _this.buttonsToShowPerBlock - group.length));
                            visibleButtons.add(group);
                        }
                        else {
                            visibleButtons = new Pagination_Button_Collection_1.PaginationButtonCollection(group);
                        }
                    }
                });
                return this.addNavigationButtons(buttonsGroups_1, activeGroupIndex_1, visibleButtons);
            }
            visibleButtons.add(this.buttons.models);
            return visibleButtons;
        };
        PaginationModel.prototype.addNavigationButtons = function (groups, activeGroupIndex, buttons) {
            var previousGroup = (groups[activeGroupIndex - 1]) ?
                groups[activeGroupIndex - 1] : null;
            var nextGroup = (groups[activeGroupIndex + 1]) ?
                groups[activeGroupIndex + 1] : null;
            if (previousGroup) {
                buttons.models[0].hideDivider = true;
                buttons.unshift(new Pagination_Button_Model_1.PaginationButtonModel({
                    isEnabledEventsHandling: this.isEnabledEventsHandling,
                    isActive: false,
                    pageNumber: previousGroup[this.buttonsToShowPerBlock - 1].pageNumber,
                    label: '<',
                    hideDivider: true,
                }));
            }
            if (nextGroup) {
                buttons.add(new Pagination_Button_Model_1.PaginationButtonModel({
                    isEnabledEventsHandling: this.isEnabledEventsHandling,
                    isActive: false,
                    pageNumber: nextGroup[0].pageNumber,
                    label: '>',
                    hideDivider: true,
                }));
            }
            return buttons;
        };
        Object.defineProperty(PaginationModel.prototype, "paginationLabel", {
            get: function () {
                return this.get('paginationLabel') || Pagination_Configuration_1.PaginationConfiguration.paginationLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationModel.prototype, "isEnabledEventsHandling", {
            get: function () {
                return this.get('isEnabledEventsHandling');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationModel.prototype, "paginationEventId", {
            get: function () {
                return this.get('paginationEventId') || exports.DEFAULT_PAGINATION_EVENT_ID;
            },
            enumerable: true,
            configurable: true
        });
        return PaginationModel;
    }(Backbone_1.Model));
    exports.PaginationModel = PaginationModel;
});
/// <amd-module name="SuiteCommerce.Blog.Pagination.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Pagination.View", ["require", "exports", "Backbone", "sc_blog_pagination.tpl", "Backbone.CollectionView", "SuiteCommerce.Blog.Pagination.Button.View", "SuiteCommerce.Blog.Pagination.Button.Model", "SuiteCommerce.Blog.Pagination.Button.Collection"], function (require, exports, Backbone_1, paginationTemplate, BackboneCollectionView, Pagination_Button_View_1, Pagination_Button_Model_1, Pagination_Button_Collection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PaginationView = /** @class */ (function (_super) {
        __extends(PaginationView, _super);
        function PaginationView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = paginationTemplate;
            _this.model.on('change:visibleButtonGroup', function () {
                _this.render();
            });
            return _this;
        }
        Object.defineProperty(PaginationView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'Pagination.Buttons.View': function () {
                        return new BackboneCollectionView({
                            childView: Pagination_Button_View_1.PaginationButtonView,
                            collection: _this.model.visibleButtonGroup,
                            childViewOptions: {
                                isEnabledEventsHandling: _this.model.isEnabledEventsHandling,
                                paginationEventId: _this.model.paginationEventId,
                            },
                        });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        PaginationView.prototype.generateButtons = function () {
            var _this = this;
            var buttons = new Pagination_Button_Collection_1.PaginationButtonCollection();
            if (this.model.total > this.model.pageSize) {
                var quantityOfPages = Math.ceil(this.model.total / this.model.pageSize);
                for (var i = 1; i <= quantityOfPages; i += 1) {
                    buttons.add(new Pagination_Button_Model_1.PaginationButtonModel({
                        pageNumber: i,
                        isActive: this.model.currentPage === i,
                        isEnabledEventsHandling: this.model.isEnabledEventsHandling,
                    }));
                }
            }
            this.model.buttons = buttons;
            this.model.visibleButtonGroup.on(this.model.paginationEventId, function (data) {
                _this.trigger(_this.model.paginationEventId, data);
            });
        };
        PaginationView.prototype.getContext = function () {
            return {
                paginationLabel: this.model.paginationLabel,
                showPagination: this.model.buttons && this.model.buttons.size() > 0,
            };
        };
        return PaginationView;
    }(Backbone_1.View));
    exports.PaginationView = PaginationView;
});
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Author.View", ["require", "exports", "Backbone", "sc_blog_post_author.tpl"], function (require, exports, Backbone_1, categoryTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostAuthorView = /** @class */ (function (_super) {
        __extends(PostAuthorView, _super);
        function PostAuthorView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = categoryTemplate;
            _this.model.on('change', function () {
                _this.render();
            });
            return _this;
        }
        PostAuthorView.prototype.getContext = function () {
            return {
                author: this.model.author,
                authorName: this.model.authorName,
                authorUrl: this.model.authorUrl,
            };
        };
        return PostAuthorView;
    }(Backbone_1.View));
    exports.PostAuthorView = PostAuthorView;
});
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Category.View", ["require", "exports", "Backbone", "sc_blog_post_category.tpl", "SuiteCommerce.Blog.Common", "SuiteCommerce.Blog.BlogHome.Configuration"], function (require, exports, Backbone_1, categoryTemplate, Common_1, BlogHome_Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostCategoryView = /** @class */ (function (_super) {
        __extends(PostCategoryView, _super);
        function PostCategoryView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = categoryTemplate;
            _this.model.on('change', function () {
                _this.render();
            });
            return _this;
        }
        PostCategoryView.prototype.getContext = function () {
            return {
                blogPageTitle: BlogHome_Configuration_1.BlogHomeConfiguration.blogHomeTitle,
                blogPageUrl: Common_1.BLOG_URL_BASE,
                category: this.model.category,
                categoryName: this.model.categoryName,
                categoryURL: this.model.categoryURL,
            };
        };
        return PostCategoryView;
    }(Backbone_1.View));
    exports.PostCategoryView = PostCategoryView;
});
/// <amd-module name="SuiteCommerce.Blog.Post.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Collection", ["require", "exports", "Backbone", "SuiteCommerce.Blog.Post.Model", "underscore"], function (require, exports, Backbone_1, Post_Model_1, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostCollection = /** @class */ (function (_super) {
        __extends(PostCollection, _super);
        function PostCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = Post_Model_1.PostModel;
            _this.url = '/app/site/hosting/scriptlet.nl?script=customscript_ns_sc_sl_blog_post_searcher' +
                '&deploy=customdeploy_ns_sc_sl_blog_post_searcher';
            _this.totalInServer = 0;
            return _this;
        }
        PostCollection.prototype.parse = function (response) {
            this.totalInServer = response.total;
            return _(response.data).compact() || null;
        };
        return PostCollection;
    }(Backbone_1.Collection));
    exports.PostCollection = PostCollection;
});
/// <amd-module name="SuiteCommerce.Blog.Post.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Configuration", ["require", "exports", "SuiteCommerce.Blog.Common.Configuration", "underscore"], function (require, exports, Configuration_1, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostConfiguration = /** @class */ (function (_super) {
        __extends(PostConfiguration, _super);
        function PostConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PostConfiguration, "siteImageSizes", {
            get: function () {
                return this.get('siteSettings.imagesizes');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostConfiguration, "dateFormat", {
            get: function () {
                return this.get('siteSettings.dateformat').replace(/fm/g, '');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostConfiguration, "largeImageResize", {
            get: function () {
                var resizeId = this.get('blog.largeImageResizeId');
                return _.find(this.siteImageSizes, function (imageSize) {
                    return imageSize.name === resizeId;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostConfiguration, "thumbnailImageResize", {
            get: function () {
                var resizeId = this.get('blog.thumbnailImageResizeId');
                return _.find(this.siteImageSizes, function (imageSize) {
                    return imageSize.name === resizeId;
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostConfiguration, "publishedDateLabel", {
            get: function () {
                return this.translate('Published on');
            },
            enumerable: true,
            configurable: true
        });
        return PostConfiguration;
    }(Configuration_1.Configuration));
    exports.PostConfiguration = PostConfiguration;
});
/// <amd-module name="SuiteCommerce.Blog.Post.Content.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Content.View", ["require", "exports", "Backbone", "jQuery", "sc_blog_post_content.tpl", "SuiteCommerce.Blog.Post.Configuration", "SuiteCommerce.Blog.Common", "SuiteCommerce.Blog.Instrumentation"], function (require, exports, Backbone_1, jQuery, contentTemplate, Post_Configuration_1, Common_1, Instrumentation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostContentView = /** @class */ (function (_super) {
        __extends(PostContentView, _super);
        function PostContentView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.template = contentTemplate;
            return _this;
        }
        PostContentView.prototype.getContext = function () {
            return {
                content: this.model.content
                    ? this.getProcessedBlogContent("" + this.model.content)
                    : '',
                notProcessedContent: this.model.content,
            };
        };
        PostContentView.prototype.getProcessedBlogContent = function (blogContent) {
            var blogProcessedContent = blogContent;
            if (!Post_Configuration_1.PostConfiguration.isRunningInSEO()) {
                blogProcessedContent = this.processCMSAreasMarkup(blogProcessedContent);
                if (Post_Configuration_1.PostConfiguration.largeImageResize) {
                    blogProcessedContent = this.resizeImages(blogProcessedContent, Post_Configuration_1.PostConfiguration.largeImageResize.name);
                }
            }
            blogProcessedContent = this.generateCMSAreas(blogProcessedContent);
            this.createQuantityOfCustomCMSAreasLog();
            return blogProcessedContent;
        };
        PostContentView.prototype.processCMSAreasMarkup = function (blogContent) {
            var $htmlNodesModified = jQuery("<div>" + blogContent + "</div>");
            $htmlNodesModified.children().each(function (index, element) {
                var $element = jQuery(element);
                $element.html($element
                    .html()
                    .replace(PostContentView.CMS_AREA_REG, function (substring) {
                    $element.after(substring + " ");
                    return '';
                }));
                $element.wrap('<div data-component="content-wrapper"></div>');
            });
            return $htmlNodesModified.html();
        };
        PostContentView.prototype.resizeImages = function (blogContent, resizeId) {
            var $htmlNodesModified = jQuery("<div>" + blogContent + "</div>");
            var domainUrl = jQuery(location).attr('origin');
            $htmlNodesModified.find('img').each(function (index, element) {
                var $element = jQuery(element);
                var urlAfterCanonicalization = $element.prop('src');
                if (urlAfterCanonicalization.indexOf(domainUrl) !== -1) {
                    $element.attr('src', Common_1.resizeImage($element.attr('src'), resizeId));
                }
            });
            return $htmlNodesModified.html();
        };
        PostContentView.prototype.generateCMSAreas = function (blogContent) {
            return blogContent.replace(PostContentView.CMS_AREA_REG, function (substring) {
                var substringWithoutBrackets = substring
                    .replace('[[', '')
                    .replace(']]', '');
                var contentAreaId = substringWithoutBrackets.split(':')[1];
                return "<div class=\"sc-blog-layout-dynamic-cms-area\"\n                    data-cms-area=\"blog-post-g-" + contentAreaId + "\"\n                    data-cms-area-filters=\"path\"></div>";
            });
        };
        PostContentView.prototype.createQuantityOfCustomCMSAreasLog = function () {
            var log = Instrumentation_1.default.getLog('quantityOfCustomCMSAreasLog');
            log.setParameters({
                activity: 'Custom CMS Areas Usage',
                instanceCount: (this.model.content.match(PostContentView.CMS_AREA_REG) || []).length,
            });
            log.submit();
        };
        PostContentView.CMS_AREA_REG = /\[\[content:[-\w]{1,20}\]\]/g;
        return PostContentView;
    }(Backbone_1.View));
    exports.PostContentView = PostContentView;
});
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Footer.View", ["require", "exports", "Backbone", "sc_blog_post_footer.tpl", "SuiteCommerce.Blog.Common", "SuiteCommerce.Blog.Post.Category.View"], function (require, exports, Backbone_1, footerTemplate, Common_1, Post_Category_View_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostFooterView = /** @class */ (function (_super) {
        __extends(PostFooterView, _super);
        function PostFooterView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.template = footerTemplate;
            return _this;
        }
        Object.defineProperty(PostFooterView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'Category.View': function () {
                        return new Post_Category_View_1.PostCategoryView({ model: _this.model });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        PostFooterView.prototype.getContext = function () {
            return {
                showTags: this.model.tags.length > 0,
                tags: this.model.tags,
                tagURL: Common_1.BLOG_URL_BASE + "/" + Common_1.AvailableTaxonomies.tag + "/",
            };
        };
        return PostFooterView;
    }(Backbone_1.View));
    exports.PostFooterView = PostFooterView;
});
/// <amd-module name="SuiteCommerce.Blog.Post.Header.Image.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Header.Image.View", ["require", "exports", "Backbone", "sc_blog_post_header_image.tpl"], function (require, exports, Backbone_1, headerImageTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostHeaderImageView = /** @class */ (function (_super) {
        __extends(PostHeaderImageView, _super);
        function PostHeaderImageView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = headerImageTemplate;
            _this.model.on('change', function () {
                _this.render();
            });
            return _this;
        }
        PostHeaderImageView.prototype.getContext = function () {
            return {
                headerImageAlt: this.model.headerImageAlt,
                headerImageResizeName: this.model.headerImageResizeName,
                headerImageURL: this.model.headerImageURL,
            };
        };
        return PostHeaderImageView;
    }(Backbone_1.View));
    exports.PostHeaderImageView = PostHeaderImageView;
});
/// <amd-module name="SuiteCommerce.Blog.Post.Header.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Header.View", ["require", "exports", "Backbone", "sc_blog_post_header.tpl", "SuiteCommerce.Blog.Post.Category.View", "SuiteCommerce.Blog.Post.Author.View", "SuiteCommerce.Blog.Post.Configuration"], function (require, exports, Backbone_1, headerTemplate, Post_Category_View_1, Post_Author_View_1, Post_Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostHeaderView = /** @class */ (function (_super) {
        __extends(PostHeaderView, _super);
        function PostHeaderView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.template = headerTemplate;
            return _this;
        }
        Object.defineProperty(PostHeaderView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'Category.View': function () {
                        return new Post_Category_View_1.PostCategoryView({ model: _this.model });
                    },
                    'Author.View': function () {
                        return new Post_Author_View_1.PostAuthorView({ model: _this.model });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        PostHeaderView.prototype.getContext = function () {
            return {
                header: this.model.header,
                publishingDate: this.model.publishingDate,
                publishedDateLabel: Post_Configuration_1.PostConfiguration.publishedDateLabel,
                subHeading: this.model.subHeading,
            };
        };
        return PostHeaderView;
    }(Backbone_1.View));
    exports.PostHeaderView = PostHeaderView;
});
/// <amd-module name="SuiteCommerce.Blog.Post.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.Model", ["require", "exports", "SuiteCommerce.Blog.Common.PageTypeModel", "SuiteCommerce.Blog.Post.Configuration", "SuiteCommerce.Blog.DataProvider", "underscore", "SuiteCommerce.Blog.Common", "jQuery"], function (require, exports, PageTypeModel_1, Post_Configuration_1, DataProvider_1, _, Common_1, jQuery) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostModel = /** @class */ (function (_super) {
        __extends(PostModel, _super);
        function PostModel(options) {
            var _this = _super.call(this, options) || this;
            if (options) {
                if (DataProvider_1.DataProvider.entitiesModel.isSync) {
                    _this.updateDataFromEntitiesBootstrapping();
                }
                _this.setupDataProviderListeners();
                _this.provideURLToImages();
                _this.fetchImageWithoutURLData();
            }
            else {
                _this.isDummy = true;
            }
            return _this;
        }
        PostModel.prototype.setupDataProviderListeners = function () {
            var _this = this;
            DataProvider_1.DataProvider.entitiesModel.on('change:isSync', function () {
                if (DataProvider_1.DataProvider.entitiesModel.isSync) {
                    _this.updateDataFromEntitiesBootstrapping();
                }
            });
            DataProvider_1.DataProvider.files.on('sync', function () {
                if (_this.imagesIdsWithoutUrl.length > 0) {
                    _this.provideURLToImages();
                }
            });
        };
        PostModel.prototype.updateDataFromEntitiesBootstrapping = function () {
            var category = DataProvider_1.DataProvider.categories.getCategoryById(this.category);
            var author = DataProvider_1.DataProvider.authors.getAuthorById(this.author);
            this.set('categoryName', category ? category.name : '');
            this.set('authorName', author ? author.name : '');
            if (DataProvider_1.DataProvider.entitiesModel.isSync &&
                ((this.category && !this.categoryName) ||
                    (this.author && !this.authorName))) {
                DataProvider_1.DataProvider.fetchEntitiesData();
            }
        };
        PostModel.prototype.fetchImageWithoutURLData = function () {
            var imagesIdsWithoutUrl = this.imagesIdsWithoutUrl;
            if (imagesIdsWithoutUrl.length > 0) {
                DataProvider_1.DataProvider.fetchFilesData(imagesIdsWithoutUrl);
            }
        };
        PostModel.prototype.provideURLToImages = function () {
            if (this.headerImageId && !this.headerImageURL) {
                this.provideURLToHeaderImage();
            }
        };
        PostModel.prototype.provideURLToHeaderImage = function () {
            var file = DataProvider_1.DataProvider.getFileById(this.headerImageId);
            if (file) {
                this.headerImageURL = file.url;
            }
        };
        Object.defineProperty(PostModel.prototype, "author", {
            get: function () {
                if (this.fields && this.fields.custrecord_sc_blog_post_pt_author) {
                    return "" + this.fields.custrecord_sc_blog_post_pt_author;
                }
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "authorName", {
            get: function () {
                return this.get('authorName');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "authorUrl", {
            get: function () {
                if (this.author) {
                    var author = DataProvider_1.DataProvider.authors.getAuthorById(this.author);
                    return author
                        ? Common_1.BLOG_URL_BASE + "/" + Common_1.AvailableTaxonomies.author + "/" + author.urlComponent
                        : '';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "category", {
            get: function () {
                if (this.fields && this.fields.custrecord_sc_blog_post_pt_post_category) {
                    return "" + this.fields.custrecord_sc_blog_post_pt_post_category;
                }
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "categoryName", {
            get: function () {
                return this.get('categoryName');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "categoryURL", {
            get: function () {
                if (this.category) {
                    var category = DataProvider_1.DataProvider.categories.getCategoryById(this.category);
                    return category
                        ? Common_1.BLOG_URL_BASE + "/" + Common_1.AvailableTaxonomies.category + "/" + category.urlComponent
                        : '';
                }
                return;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "content", {
            get: function () {
                return this.fields ? this.fields.custrecord_sc_blog_post_pt_content : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "excerpt", {
            get: function () {
                if (this.fields) {
                    if (this.fields.custrecord_sc_blog_post_pt_excerpt) {
                        return this.fields.custrecord_sc_blog_post_pt_excerpt;
                    }
                    if (this.content) {
                        var htmlNodes = jQuery("<div>" + this.content + "</div>");
                        var firstParagraphWithText_1 = '';
                        htmlNodes.find('p').each(function (index, paragraph) {
                            if (!firstParagraphWithText_1 && jQuery(paragraph).text().length > 0) {
                                firstParagraphWithText_1 = jQuery(paragraph).text();
                            }
                        });
                        return firstParagraphWithText_1 || this.content.split('<br />')[0];
                    }
                }
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "headerImageAlt", {
            get: function () {
                return this.fields
                    ? this.fields.custrecord_sc_blog_post_pt_hdr_image_alt
                    : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "headerImageResizeName", {
            get: function () {
                return Post_Configuration_1.PostConfiguration.largeImageResize
                    ? Post_Configuration_1.PostConfiguration.largeImageResize.name
                    : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "headerImageId", {
            get: function () {
                if (this.fields && this.fields.custrecord_sc_blog_post_pt_header_image) {
                    return "" + this.fields.custrecord_sc_blog_post_pt_header_image;
                }
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "headerImageURL", {
            get: function () {
                if (this.fields && this.headerImageId) {
                    return this.fields.custrecord_sc_blog_post_pt_header_image_url &&
                        this.fields.custrecord_sc_blog_post_pt_header_image_url.indexOf(this.headerImageId) !== -1
                        ? this.fields.custrecord_sc_blog_post_pt_header_image_url
                        : this.get('headerImageURL');
                }
                return;
            },
            set: function (url) {
                this.set('headerImageURL', url);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "imagesIdsWithoutUrl", {
            get: function () {
                var imagesIds = [];
                if (this.headerImageId && !this.headerImageURL) {
                    imagesIds.push(this.headerImageId);
                }
                return imagesIds;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "publishingDate", {
            get: function () {
                return this.fields && this.fields.custrecord_sc_blog_post_pt_pub_date
                    ? this.formatDate(this.fields.custrecord_sc_blog_post_pt_pub_date)
                    : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "publishingDateUnformatted", {
            get: function () {
                return this.fields && this.fields.custrecord_sc_blog_post_pt_pub_date
                    ? this.fields.custrecord_sc_blog_post_pt_pub_date
                    : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "subHeading", {
            get: function () {
                return this.fields ? this.fields.custrecord_sc_blog_post_pt_subheading : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "tags", {
            get: function () {
                var tags = [];
                var unformattedTags = this.fields
                    ? this.fields.custrecord_sc_blog_post_pt_post_tags
                    : '';
                if (unformattedTags) {
                    _.each(unformattedTags.split(','), function (tag) {
                        tags.push(tag.trim());
                    });
                }
                return tags;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "thumbnailImageAlt", {
            get: function () {
                return this.fields
                    ? this.fields.custrecord_sc_blog_post_pt_timg_img_alt
                    : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "thumbnailImageResizeName", {
            get: function () {
                return Post_Configuration_1.PostConfiguration.thumbnailImageResize
                    ? Post_Configuration_1.PostConfiguration.thumbnailImageResize.name
                    : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "thumbnailImageURL", {
            get: function () {
                return this.fields
                    ? this.fields.custrecord_sc_blog_post_pt_thumbnail_img_url
                    : '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostModel.prototype, "isDummy", {
            get: function () {
                return this.get('isDummy');
            },
            set: function (isDummy) {
                this.set('isDummy', isDummy);
            },
            enumerable: true,
            configurable: true
        });
        PostModel.prototype.formatDate = function (receivedDate) {
            if (!!navigator.userAgent.match(/Trident/g) ||
                !!navigator.userAgent.match(/MSIE/g)) {
                return receivedDate;
            }
            var transformedDate = this.transformDateToSupportedFormat(receivedDate);
            if (transformedDate) {
                var dateObj = new Date(transformedDate);
                var dayOrdinal = this.getOrdinalForNumber(dateObj.getDate());
                var month = dateObj.toLocaleString('en-us', { month: 'long' });
                var day = dateObj.toLocaleString('en-us', { day: 'numeric' });
                var year = dateObj.toLocaleString('en-us', { year: 'numeric' });
                return month + " " + day + dayOrdinal + ", " + year;
            }
            return receivedDate;
        };
        PostModel.prototype.transformDateToSupportedFormat = function (stringDate) {
            switch (Post_Configuration_1.PostConfiguration.dateFormat) {
                case 'M/D/YYYY':
                case 'MM/DD/YYYY':
                case 'YYYY/MM/DD':
                case 'YYYY/M/D':
                case 'YYYY-M-D':
                    return stringDate;
                case 'D/M/YYYY':
                case 'DD/MM/YYYY':
                    return this.rearrangeDate(stringDate, '/');
                case 'D-Mon-YYYY':
                case 'D-MONTH-YYYY':
                case 'DD-Mon-YYYY':
                case 'DD-MONTH-YYYY':
                    return this.rearrangeDate(stringDate, '-');
                case 'D.M.YYYY':
                case 'DD.MM.YYYY':
                    return this.rearrangeDate(stringDate, '.');
                case 'D MONTH, YYYY':
                case 'DD MONTH, YYYY':
                    return this.rearrangeDate(stringDate, ' ');
                default:
                    return '';
            }
        };
        PostModel.prototype.rearrangeDate = function (date, separator) {
            var _a = date.split(separator), day = _a[0], month = _a[1], year = _a[2];
            return "" + month + separator + day + separator + year;
        };
        PostModel.prototype.getOrdinalForNumber = function (num) {
            return num > 0
                ? ['th', 'st', 'nd', 'rd'][(num > 3 && num < 21) || num % 10 > 3 ? 0 : num % 10]
                : '';
        };
        return PostModel;
    }(PageTypeModel_1.PageTypeModel));
    exports.PostModel = PostModel;
});
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.Post.View", ["require", "exports", "PageType.Base.View", "SuiteCommerce.Blog.Post.Model", "sc_blog_post_default_layout.tpl", "SuiteCommerce.Blog.Common", "SuiteCommerce.Blog.Post.Header.View", "SuiteCommerce.Blog.Post.Content.View", "SuiteCommerce.Blog.Post.Header.Image.View", "SuiteCommerce.Blog.Post.Footer.View", "SuiteCommerce.Blog.BlogHome.Configuration", "SuiteCommerce.Blog.Instrumentation", "Backbone", "SuiteCommerce.Blog.DataProvider", "SuiteCommerce.Blog.Common.Configuration", "underscore"], function (require, exports, PageType_Base_View_1, Post_Model_1, postTemplate, Common_1, Post_Header_View_1, Post_Content_View_1, Post_Header_Image_View_1, Post_Footer_View_1, BlogHome_Configuration_1, Instrumentation_1, Backbone_1, DataProvider_1, Configuration_1, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostView = /** @class */ (function (_super) {
        __extends(PostView, _super);
        function PostView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = postTemplate;
            _this.childViews = {
                'Header.View': function () {
                    return new Post_Header_View_1.PostHeaderView({ model: _this.model });
                },
                'Header.Image.View': function () {
                    return new Post_Header_Image_View_1.PostHeaderImageView({ model: _this.model });
                },
                'Content.View': function () {
                    return new Post_Content_View_1.PostContentView({ model: _this.model });
                },
                'Footer.View': function () {
                    return new Post_Footer_View_1.PostFooterView({ model: _this.model });
                },
            };
            _this.model =
                /* SC/SCA >= 20.2: option.pageInfo is a Backbone Model
                 * SC/SCA < 20.2: option.pageInfo is an Object */
                options.pageInfo instanceof Backbone_1.Model
                    ? new Post_Model_1.PostModel(options.pageInfo.toJSON())
                    : new Post_Model_1.PostModel(options.pageInfo);
            // Required for SC/SCA < 20.2
            _this.application = options.container;
            _this.addChildViewInstances(_this.childViews);
            _this.getBreadcrumbPages = _this.getBreadcrumbConstructor();
            _this.registerQuantityOfTagsLog();
            return _this;
        }
        PostView.prototype.beforeShowContent = function () {
            var _this = this;
            var renderPromise = jQuery.Deferred();
            if (Configuration_1.Configuration.isEnabledJSONLd) {
                this.setupJSONLdData().done(function () {
                    _this.addJSONLdData(_this.model, _this.application);
                    renderPromise.resolve();
                });
            }
            else {
                renderPromise.resolve();
            }
            return renderPromise;
        };
        PostView.prototype.setupJSONLdData = function () {
            var entitiesModelPromise = jQuery.Deferred();
            var imagesPromise = jQuery.Deferred();
            (DataProvider_1.DataProvider.entitiesModel.isSync) ?
                entitiesModelPromise.resolve() :
                DataProvider_1.DataProvider.entitiesModel.on('change:isSync', function () {
                    if (DataProvider_1.DataProvider.entitiesModel.isSync) {
                        entitiesModelPromise.resolve();
                    }
                });
            (this.model.imagesIdsWithoutUrl.length > 0) ?
                DataProvider_1.DataProvider.files.on('sync', function () {
                    imagesPromise.resolve();
                }) :
                imagesPromise.resolve();
            return jQuery.when(entitiesModelPromise, imagesPromise);
        };
        PostView.prototype.addJSONLdData = function (post, container) {
            var _this = this;
            var layout = container.getComponent('Layout');
            if (layout) {
                layout.modifyViewJsonLd('SuiteCommerce.Blog.Post.View', function (json) {
                    json = _.extend(json, _this.generateJSONLdSchema(post));
                    return jQuery.Deferred().resolve(json);
                });
            }
        };
        ;
        PostView.prototype.generateJSONLdSchema = function (post) {
            return {
                '@context': 'https://schema.org',
                '@type': 'BlogPosting',
                'mainEntityOfPage': {
                    '@type': 'WebPage',
                    '@id': location.origin + post.url,
                },
                'headline': post.header,
                'alternativeHeadline': post.title,
                'articleSection': post.categoryName,
                'image': (post.headerImageURL || post.thumbnailImageURL) ? location.origin + (post.headerImageURL || post.thumbnailImageURL) : undefined,
                'keywords': post.tags,
                'datePublished': post.publishingDateUnformatted,
                'description': post.excerpt,
                'author': {
                    '@type': 'Person',
                    'name': post.authorName || 'Anonymous',
                    'url': (post.authorUrl) ? location.origin + post.authorUrl : undefined
                },
                'publisher': {
                    '@type': 'Organization',
                    'name': Configuration_1.Configuration.get('siteSettings.displayname'),
                    'url': location.origin,
                    'logo': {
                        '@type': 'ImageObject',
                        'url': Common_1.resizeImage(Configuration_1.Configuration.get('header.logoUrl'), 'thumbnail')
                    },
                }
            };
        };
        ;
        PostView.prototype.getBreadcrumbConstructor = function () {
            var _this = this;
            return function () {
                var pages = [
                    {
                        text: BlogHome_Configuration_1.BlogHomeConfiguration.blogHomeTitle,
                        href: "" + Common_1.BLOG_URL_BASE,
                    },
                ];
                if (_this.model && _this.model.title) {
                    pages.push({
                        text: _this.model.title,
                        href: "" + _this.model.url,
                    });
                }
                return pages;
            };
        };
        PostView.prototype.registerQuantityOfTagsLog = function () {
            var log = Instrumentation_1.default.getLog('quantityOfTagsLog');
            log.setParameters({
                activity: 'Tags Usage',
                instanceCount: this.model.tags.length,
            });
            log.submit();
        };
        return PostView;
    }(PageType_Base_View_1.PageTypeBaseView));
    exports.PostView = PostView;
    //Workaround for SCA 2020.1 (JSON Ld generation)
    exports.prototype = PostView.prototype;
});
/// <amd-module name="SuiteCommerce.Blog.Post"/>
define("SuiteCommerce.Blog.Post", ["require", "exports", "SuiteCommerce.Blog.Post.View", "Utils"], function (require, exports, Post_View_1, Utils) {
    "use strict";
    return {
        mountToApp: function (container) {
            var pageTypeComponent = container.getComponent('PageType');
            this.registerPageTypes(pageTypeComponent);
        },
        registerPageTypes: function (pageTypeComponent) {
            pageTypeComponent.registerPageType({
                name: 'ext-blog-post',
                view: Post_View_1.PostView,
                defaultTemplate: {
                    name: 'sc_blog_post_default_layout.tpl',
                    displayName: 'Blog Post',
                    thumbnail: Utils.getAbsoluteUrl(getExtensionAssetsPath('img/ic_cct_sc_blog_post.svg')),
                },
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.Blog.PostCard.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.PostCard.View", ["require", "exports", "Backbone", "sc_blog_post_card.tpl", "sc_blog_post_card_dummy.tpl", "SuiteCommerce.Blog.Common", "SuiteCommerce.Blog.Common.Configuration"], function (require, exports, Backbone_1, postCardTemplate, postCardTemplateDummy, Common_1, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostCardLayout;
    (function (PostCardLayout) {
        PostCardLayout["horizontal"] = "horizontal";
        PostCardLayout["vertical"] = "vertical";
    })(PostCardLayout = exports.PostCardLayout || (exports.PostCardLayout = {}));
    var PostCardView = /** @class */ (function (_super) {
        __extends(PostCardView, _super);
        function PostCardView(options) {
            var _this = _super.call(this, options) || this;
            _this.layout = options.layout;
            _this.highlightInCard = Common_1.sanitizeString(options.highlightInCard);
            _this.template = _this.model.isDummy
                ? postCardTemplateDummy
                : postCardTemplate;
            _this.model.on('change:categoryName', function () {
                _this.$el.replaceWith(_this.render().$el.html());
            });
            _this.events = {
                'click [data-action="navigate-to-blog"]': 'navigateToBlogPost',
            };
            return _this;
        }
        PostCardView.prototype.navigateToBlogPost = function (event) {
            if (event.target.tagName === 'A') {
                return true;
            }
            Backbone_1.history.navigate(this.model.url, true);
        };
        PostCardView.prototype.getContext = function () {
            return {
                category: this.model.categoryName,
                excerpt: this.highlightText(this.model.excerpt),
                header: this.highlightText(this.model.header),
                readMoreLabel: Configuration_1.Configuration.readMoreLabel,
                thumbnailAlt: this.model.thumbnailImageAlt,
                thumbnailUrl: this.model.thumbnailImageURL,
                thumbnailResizeId: this.model.thumbnailImageResizeName,
                url: this.model.url,
                layout: this.layout,
                showThumbnailContainer: !this.model.isDummy,
                showThumbnail: !!this.model.thumbnailImageURL,
                categoryURL: this.model.categoryURL,
            };
        };
        PostCardView.prototype.highlightText = function (textToHighlight) {
            if (this.highlightInCard && textToHighlight) {
                return textToHighlight.replace(new RegExp(this.highlightInCard, 'ig'), function (replacedText) {
                    return "<mark>" + replacedText + "</mark>";
                });
            }
            return textToHighlight;
        };
        return PostCardView;
    }(Backbone_1.View));
    exports.PostCardView = PostCardView;
});
/// <amd-module name="SuiteCommerce.Blog.PostCardsCCT.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.PostCardsCCT.Model", ["require", "exports", "Backbone", "SuiteCommerce.Blog.Post.Collection", "SuiteCommerce.Blog.Common"], function (require, exports, Backbone_1, Post_Collection_1, Common_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostCardsCCTModel = /** @class */ (function (_super) {
        __extends(PostCardsCCTModel, _super);
        function PostCardsCCTModel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.filtersAvailable = [
                {
                    field: 'custrecord_blog_post_cct_card_auth_fltr',
                    taxonomy: Common_1.AvailableTaxonomies.author,
                },
                {
                    field: 'custrecord_blog_post_cct_card_terms_fltr',
                    separator: '',
                    taxonomy: Common_1.AvailableTaxonomies.term,
                },
                {
                    field: 'custrecord_blog_post_cct_card_cat_fltr',
                    taxonomy: Common_1.AvailableTaxonomies.category,
                },
                {
                    field: 'custrecord_blog_post_cct_card_tags_fltr',
                    separator: ',',
                    taxonomy: Common_1.AvailableTaxonomies.tag,
                },
            ];
            return _this;
        }
        Object.defineProperty(PostCardsCCTModel.prototype, "cctTitle", {
            get: function () {
                return this.get('custrecord_sc_blog_post_cct_card_heading') || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostCardsCCTModel.prototype, "postQuantity", {
            get: function () {
                return this.get('custrecord_sc_blog_post_cct_card_cards') || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostCardsCCTModel.prototype, "useVerticalLayout", {
            get: function () {
                return (this.get('custrecord_sc_blog_post_cct_card_align') &&
                    this.get('custrecord_sc_blog_post_cct_card_align') === 'T');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostCardsCCTModel.prototype, "posts", {
            get: function () {
                if (!this.get('posts')) {
                    this.posts = new Post_Collection_1.PostCollection();
                }
                return this.get('posts');
            },
            set: function (posts) {
                this.set('posts', posts);
            },
            enumerable: true,
            configurable: true
        });
        PostCardsCCTModel.prototype.getBlogPostSearcherOptions = function () {
            var requestOptions = {
                taxonomies: [],
                settings: {
                    pageNumber: 1,
                    pageSize: 5,
                },
            };
            if (this.searchText) {
                requestOptions.searchPhrase = Common_1.sanitizeString(this.searchText.trim());
            }
            else {
                requestOptions.taxonomies = this.filters;
            }
            return requestOptions;
        };
        Object.defineProperty(PostCardsCCTModel.prototype, "searchText", {
            get: function () {
                return this.get('custrecord_blog_post_cct_card_text_fltr') || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostCardsCCTModel.prototype, "filters", {
            get: function () {
                var _this = this;
                var filters = [];
                this.filtersAvailable.forEach(function (filter) {
                    filters = filters.concat(_this.buildFilterParam(filter));
                });
                return filters;
            },
            enumerable: true,
            configurable: true
        });
        PostCardsCCTModel.prototype.buildFilterParam = function (filter) {
            var filterEntries = this.get(filter.field);
            if (filterEntries) {
                if (filter.separator) {
                    return filterEntries
                        .split(filter.separator)
                        .map(function (entryValue) {
                        return {
                            name: filter.taxonomy,
                            value: entryValue.trim(),
                        };
                    });
                }
                return [
                    {
                        name: filter.taxonomy,
                        value: "" + filterEntries,
                    },
                ];
            }
            return [];
        };
        return PostCardsCCTModel;
    }(Backbone_1.Model));
    exports.PostCardsCCTModel = PostCardsCCTModel;
});
/// <amd-module name="SuiteCommerce.Blog.PostCardsCCT.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.PostCardsCCT.View", ["require", "exports", "sc_post_cards_cct_template.tpl", "CustomContentType.Base.View", "SuiteCommerce.Blog.PostCardsCCT.Model", "SuiteCommerce.Blog.PostCard.View", "SuiteCommerce.Blog.PostList.View", "SuiteCommerce.Blog.PostList.Model", "SuiteCommerce.Blog.Common.Searcher.Helper", "SuiteCommerce.Blog.Post.Collection"], function (require, exports, postCCTTemplate, CustomContentTypeBaseView, PostCardsCCT_Model_1, PostCard_View_1, PostList_View_1, PostList_Model_1, BlogPostSearcher_Helper_1, Post_Collection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostCardsCCTView = /** @class */ (function (_super) {
        __extends(PostCardsCCTView, _super);
        function PostCardsCCTView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = postCCTTemplate;
            _this.model = new PostCardsCCT_Model_1.PostCardsCCTModel();
            _this.postListModel = new PostList_Model_1.PostListModel({
                postCardLayout: _this.model.useVerticalLayout
                    ? PostCard_View_1.PostCardLayout.vertical
                    : PostCard_View_1.PostCardLayout.horizontal,
                posts: _this.model.posts,
                showPostCardsPlaceholders: false,
                postCardPlaceholdersQuantity: 0,
            });
            _this.postListView = new PostList_View_1.PostListView({ model: _this.postListModel });
            _this.setupListener();
            return _this;
        }
        PostCardsCCTView.prototype.setupListener = function () {
            var _this = this;
            this.postListModel.on('postListUpdated', function () {
                _this.model.posts
                    .fetch(BlogPostSearcher_Helper_1.BlogPostSearcherHelper.buildRequestBody(_this.model.getBlogPostSearcherOptions()))
                    .done(function () {
                    _this.postListModel.posts = new Post_Collection_1.PostCollection(_this.model.posts.slice(0, _this.model.postQuantity));
                    _this.postListModel.showPostCardsPlaceholders = false;
                    _this.render();
                });
            });
        };
        PostCardsCCTView.prototype.install = function (settings, contextData) {
            _super.prototype.install.call(this, settings, contextData);
            this.updateModels(settings);
            return jQuery.Deferred().resolve();
        };
        PostCardsCCTView.prototype.update = function (settings) {
            _super.prototype.update.call(this, settings);
            this.updateModels(settings);
            return jQuery.Deferred().resolve();
        };
        PostCardsCCTView.prototype.updateModels = function (settings) {
            this.model.set(settings);
            this.postListModel.set({
                postCardLayout: this.model.useVerticalLayout
                    ? PostCard_View_1.PostCardLayout.vertical
                    : PostCard_View_1.PostCardLayout.horizontal,
                posts: this.model.posts,
                showPostCardsPlaceholders: true,
                postCardPlaceholdersQuantity: this.model.postQuantity,
            });
            this.postListModel.trigger('postListUpdated');
        };
        Object.defineProperty(PostCardsCCTView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'PostList.View': function () {
                        return _this.postListView;
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        PostCardsCCTView.prototype.validateContextDataRequest = function () {
            return true;
        };
        PostCardsCCTView.prototype.getContext = function () {
            if (this.model.posts.length > 0) {
                return {
                    cctHeading: this.model.cctTitle,
                };
            }
            return;
        };
        return PostCardsCCTView;
    }(CustomContentTypeBaseView));
    exports.PostCardsCCTView = PostCardsCCTView;
});
/// <amd-module name="SuiteCommerce.Blog.PostCardsCCT"/>
define("SuiteCommerce.Blog.PostCardsCCT", ["require", "exports", "SuiteCommerce.Blog.PostCardsCCT.View"], function (require, exports, PostCardsCCT_View_1) {
    "use strict";
    return {
        mountToApp: function (container) {
            var cms = container.getComponent('CMS');
            cms.registerCustomContentType({
                id: 'cct_sc_blog_article_cards',
                view: PostCardsCCT_View_1.PostCardsCCTView,
                options: {
                    container: container,
                },
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.Blog.PostList.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.PostList.Model", ["require", "exports", "Backbone", "SuiteCommerce.Blog.Post.Collection"], function (require, exports, Backbone_1, Post_Collection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostListModel = /** @class */ (function (_super) {
        __extends(PostListModel, _super);
        function PostListModel(options) {
            var _this = _super.call(this, options) || this;
            _this.showPostCardsPlaceholders = options.showPostCardsPlaceholders;
            _this.posts = options.posts;
            _this.postCardLayout = options.postCardLayout;
            _this.postCardPlaceholdersQuantity;
            if (options.title)
                _this.title = options.title;
            return _this;
        }
        Object.defineProperty(PostListModel.prototype, "posts", {
            get: function () {
                if (!this.get('posts'))
                    this.posts = new Post_Collection_1.PostCollection();
                return this.get('posts');
            },
            set: function (posts) {
                this.set('posts', posts);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostListModel.prototype, "title", {
            get: function () {
                return this.get('title');
            },
            set: function (title) {
                this.set('title', title);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostListModel.prototype, "showPostCardsPlaceholders", {
            get: function () {
                return this.get('showPostCardsPlaceholders');
            },
            set: function (showPostCardsPlaceholders) {
                this.set('showPostCardsPlaceholders', showPostCardsPlaceholders);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostListModel.prototype, "postCardPlaceholdersQuantity", {
            get: function () {
                return this.get('postCardPlaceholdersQuantity');
            },
            set: function (postCardPlaceholdersQuantity) {
                this.set('postCardPlaceholdersQuantity', postCardPlaceholdersQuantity);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostListModel.prototype, "postCardLayout", {
            get: function () {
                return this.get('postCardLayout');
            },
            set: function (postCardLayout) {
                this.set('postCardLayout', postCardLayout);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostListModel.prototype, "highlightInCards", {
            get: function () {
                return this.get('highlightInCards');
            },
            set: function (highlightInCards) {
                this.set('highlightInCards', highlightInCards);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostListModel.prototype, "hideList", {
            get: function () {
                return this.get('hideList');
            },
            set: function (hideList) {
                this.set('hideList', hideList);
            },
            enumerable: true,
            configurable: true
        });
        PostListModel.prototype.getContainsDummyModel = function () {
            return this.posts.filter(function (model) {
                return model.isDummy;
            }).length > 0;
        };
        return PostListModel;
    }(Backbone_1.Model));
    exports.PostListModel = PostListModel;
});
/// <amd-module name="SuiteCommerce.Blog.PostList.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.PostList.View", ["require", "exports", "Backbone", "Backbone.CollectionView", "SuiteCommerce.Blog.Post.Collection", "SuiteCommerce.Blog.Post.Model", "SuiteCommerce.Blog.PostCard.View", "sc_blog_post_list.tpl"], function (require, exports, Backbone_1, BackboneCollectionView, Post_Collection_1, Post_Model_1, PostCard_View_1, postListTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostListView = /** @class */ (function (_super) {
        __extends(PostListView, _super);
        function PostListView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = postListTemplate;
            _this.setupModelListener();
            return _this;
        }
        PostListView.prototype.setupModelListener = function () {
            var _this = this;
            this.model.on('change', function () {
                _this.render();
            });
        };
        Object.defineProperty(PostListView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'PostCards.View': function () {
                        return _this.getPostCardCollectionViewConstructor();
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        PostListView.prototype.getPostCardCollectionViewConstructor = function () {
            var postCards;
            if (this.model.showPostCardsPlaceholders) {
                postCards = new Post_Collection_1.PostCollection();
                for (var i = 0; i < this.model.postCardPlaceholdersQuantity; i += 1) {
                    postCards.add(new Post_Model_1.PostModel());
                }
            }
            else {
                postCards = this.model.posts;
            }
            return new BackboneCollectionView({
                childView: PostCard_View_1.PostCardView,
                collection: postCards,
                childViewOptions: {
                    layout: this.model.postCardLayout,
                    highlightInCard: this.model.highlightInCards,
                },
            });
        };
        PostListView.prototype.getContext = function () {
            return {
                title: this.model.title,
                hideList: this.model.hideList,
            };
        };
        return PostListView;
    }(Backbone_1.View));
    exports.PostListView = PostListView;
});
/// <amd-module name="SuiteCommerce.Blog.PostSearch.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.PostSearch.Configuration", ["require", "exports", "SuiteCommerce.Blog.Common.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostSearchConfiguration = /** @class */ (function (_super) {
        __extends(PostSearchConfiguration, _super);
        function PostSearchConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PostSearchConfiguration, "searchLabel", {
            get: function () {
                return this.get('blog.searchLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostSearchConfiguration, "searchHint", {
            get: function () {
                return this.get('blog.searchHint');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostSearchConfiguration, "searchCloseButtonLabel", {
            get: function () {
                return this.get('blog.searchCloseButtonLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostSearchConfiguration, "backToTopLabel", {
            get: function () {
                return this.get('blog.backToTopLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostSearchConfiguration, "searchResultsLabel", {
            get: function () {
                return this.get('blog.searchResultsLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostSearchConfiguration, "noSearchResultsLabel", {
            get: function () {
                return this.get('blog.noSearchResultsLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PostSearchConfiguration, "noResultsArticleSuggestionMessage", {
            get: function () {
                return this.get('blog.noResultsArticleSuggestionMessage');
            },
            enumerable: true,
            configurable: true
        });
        return PostSearchConfiguration;
    }(Configuration_1.Configuration));
    exports.PostSearchConfiguration = PostSearchConfiguration;
});
/// <amd-module name="SuiteCommerce.Blog.PostSearch.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.PostSearch.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostSearchModel = /** @class */ (function (_super) {
        __extends(PostSearchModel, _super);
        function PostSearchModel(options) {
            return _super.call(this, options) || this;
        }
        Object.defineProperty(PostSearchModel.prototype, "phrase", {
            get: function () {
                return this.get('phrase').replace(/[&=\/]*/g, '');
            },
            set: function (phrase) {
                this.set('phrase', phrase);
            },
            enumerable: true,
            configurable: true
        });
        return PostSearchModel;
    }(Backbone_1.Model));
    exports.PostSearchModel = PostSearchModel;
});
/// <amd-module name="SuiteCommerce.Blog.PostSearch.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.PostSearch.View", ["require", "exports", "Backbone", "sc_blog_post_search.tpl", "SuiteCommerce.Blog.PostSearch.Configuration", "SuiteCommerce.Blog.Common", "SuiteCommerce.Blog.Common.ParameterProcessor", "SuiteCommerce.Blog.PostList.View", "SuiteCommerce.Blog.PostList.Model", "SuiteCommerce.Blog.PostCard.View", "SuiteCommerce.Blog.Common.Searcher.Helper", "SuiteCommerce.Blog.Post.Collection", "SuiteCommerce.Blog.Pagination.View", "SuiteCommerce.Blog.Pagination.Model", "SuiteCommerce.Blog.SuggestionsList.View", "SuiteCommerce.Blog.SuggestionsList.Model", "SuiteCommerce.Blog.DataProvider"], function (require, exports, Backbone_1, postSearchTemplate, PostSearch_Configuration_1, Common_1, ParameterProcessor_1, PostList_View_1, PostList_Model_1, PostCard_View_1, BlogPostSearcher_Helper_1, Post_Collection_1, Pagination_View_1, Pagination_Model_1, SuggestionsList_View_1, SuggestionsList_Model_1, DataProvider_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PostSearchView = /** @class */ (function (_super) {
        __extends(PostSearchView, _super);
        function PostSearchView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = postSearchTemplate;
            _this.isExpandedLayout = false;
            _this.pageSize = 5;
            _this.defaultPage = 1;
            _this.paginationEventName = 'triggered-pagination-mobile-search';
            _this.currentPage = _this.defaultPage;
            _this.events = {
                'keyup [data-action="search-for-phrase"]': 'searchForPhrase',
                'click [data-action="close-search"]': 'closeSearch',
                'click [data-action="scroll-to-top"]': 'scrollToTop',
            };
            _this.setupResultListView();
            _this.setupPagination();
            _this.suggestionsView = new SuggestionsList_View_1.SuggestionsListView({
                model: new SuggestionsList_Model_1.SuggestionsListModel(),
            });
            _this.paginationView.on(_this.paginationEventName, function (data) {
                _this.scrollToTop();
                if (_this.resultListView.model.posts.size() > 0)
                    _this.resetSearch();
                _this.currentPage = data.page;
                _this.fetchPostByPhrase();
            });
            return _this;
        }
        PostSearchView.prototype.setupResultListView = function () {
            this.resultListView = new PostList_View_1.PostListView({
                model: new PostList_Model_1.PostListModel({
                    postCardLayout: PostCard_View_1.PostCardLayout.horizontal,
                    posts: new Post_Collection_1.PostCollection(),
                    showPostCardsPlaceholders: true,
                    postCardPlaceholdersQuantity: 5,
                }),
            });
        };
        PostSearchView.prototype.setupPagination = function () {
            this.paginationView = new Pagination_View_1.PaginationView({
                model: new Pagination_Model_1.PaginationModel({
                    pageSize: this.pageSize,
                    total: 0,
                    currentPage: this.defaultPage,
                    isEnabledEventsHandling: true,
                    paginationEventId: this.paginationEventName,
                }),
            });
        };
        PostSearchView.prototype.searchForPhrase = function (event) {
            this.model.phrase = event.target.value ? event.target.value.trim() : '';
            if (event.key === 'Enter' && this.model.phrase.length > 0) {
                if (this.isMobileDevice()) {
                    if (!this.isExpandedLayout)
                        this.expandLayout();
                    if (this.resultListView.model.posts.size() > 0 ||
                        this.suggestionsView.model.suggestionList.size() > 0) {
                        this.resetSearch();
                    }
                    this.$el.find('.sc-blog-post-search-form-input').trigger('blur');
                    this.fetchPostByPhrase();
                }
                else {
                    var URIComponent = encodeURIComponent(this.model.phrase);
                    Backbone_1.history.navigate(Common_1.BLOG_URL_BASE + "?" + ParameterProcessor_1.SearchPhraseSettings.keywords + "=" + URIComponent, true);
                }
            }
        };
        PostSearchView.prototype.isMobileDevice = function () {
            var viewportWidth = jQuery(window).width();
            return viewportWidth < 768;
        };
        PostSearchView.prototype.expandLayout = function () {
            this.$el
                .children('.sc-blog-post-search')
                .addClass('expanded-search-layout');
            jQuery('body').addClass('expanded-search-layout');
            this.hideScrollBar();
        };
        PostSearchView.prototype.hideScrollBar = function () {
            jQuery('.sc-blog-post-list-container').css('scrollbar-width', 'none');
        };
        PostSearchView.prototype.resetSearch = function () {
            this.suggestionsView.model.searchOptions = null;
            this.suggestionsView.render();
            this.resultListView.model.highlightInCards = this.model.phrase;
            this.resultListView.model.posts = new Post_Collection_1.PostCollection();
            this.resultListView.model.showPostCardsPlaceholders = true;
            this.paginationView.model.total = 0;
            this.currentPage = this.defaultPage;
            this.paginationView.generateButtons();
            this.resultListView.render();
            var $scrollTopLink = this.$el.find('.sc-blog-post-search-footer-back-to-top-link');
            if (!$scrollTopLink.hasClass('hide')) {
                $scrollTopLink.addClass('hide');
            }
        };
        PostSearchView.prototype.scrollToTop = function () {
            this.$el.find('.sc-blog-post-search').animate({ scrollTop: '0' });
        };
        PostSearchView.prototype.fetchPostByPhrase = function () {
            var _this = this;
            this.resultListView.model.posts
                .fetch(BlogPostSearcher_Helper_1.BlogPostSearcherHelper.buildRequestBody({
                taxonomies: [],
                settings: { pageNumber: this.currentPage, pageSize: this.pageSize },
                searchPhrase: Common_1.sanitizeString(this.model.phrase),
            }))
                .done(function () {
                _this.resultListView.model.showPostCardsPlaceholders = false;
                _this.paginationView.model.total = _this.resultListView.model.posts.totalInServer;
                _this.paginationView.model.currentPage = _this.currentPage;
                _this.paginationView.generateButtons();
                _this.resultListView.render();
                if (_this.resultListView.model.posts.size() === 0) {
                    if (DataProvider_1.DataProvider.entitiesModel.isSync) {
                        _this.setupSuggestionsListView();
                    }
                    else {
                        DataProvider_1.DataProvider.entitiesModel.on('change:isSync', function () {
                            _this.setupSuggestionsListView();
                        });
                    }
                }
                _this.addScrollToTopLink();
            });
        };
        PostSearchView.prototype.setupSuggestionsListView = function () {
            var _this = this;
            var pinnedTaxonomies = [];
            var searchTerm = DataProvider_1.DataProvider.terms.getTermByURLComponent(Common_1.DefaultTaxonomies.search.defaultAlias);
            if (searchTerm && searchTerm.isUsed) {
                pinnedTaxonomies.push({
                    name: Common_1.AvailableTaxonomies.term,
                    value: searchTerm.urlComponent,
                });
            }
            (this.suggestionsView.model.title = PostSearch_Configuration_1.PostSearchConfiguration.noSearchResultsLabel.replace('[[term]]', "<span class=\"term\">" + this.model.phrase + "</span>")),
                (this.suggestionsView.model.suggestionMessage =
                    PostSearch_Configuration_1.PostSearchConfiguration.noResultsArticleSuggestionMessage);
            this.suggestionsView.model.searchOptions = {
                settings: { pageSize: 5, pageNumber: 1 },
                taxonomies: pinnedTaxonomies,
            };
            this.suggestionsView.model.quantityOfSuggestions = 2;
            this.suggestionsView
                .fetchSuggestionList()
                .done(function () { return _this.addScrollToTopLink(); });
        };
        PostSearchView.prototype.addScrollToTopLink = function () {
            var $scrollTopLink = this.$el.find('.sc-blog-post-search-footer-back-to-top-link');
            if (this.thereIsOverflowedContent() && $scrollTopLink.hasClass('hide')) {
                $scrollTopLink.removeClass('hide');
            }
            else {
                $scrollTopLink.addClass('hide');
            }
        };
        PostSearchView.prototype.thereIsOverflowedContent = function () {
            var contentHeight = this.$el.find('.sc-blog-post-search-results').height() +
                this.$el.find('.sc-blog-post-search-form').height() +
                this.$el.find('.sc-blog-post-search-title').height() +
                this.$el.find('.sc-blog-suggestions').height();
            return contentHeight > jQuery(window).height();
        };
        PostSearchView.prototype.closeSearch = function () {
            this.contractLayout();
            this.model.phrase = '';
            this.resetSearch();
            this.render();
        };
        PostSearchView.prototype.contractLayout = function () {
            this.$el
                .children('.sc-blog-post-search')
                .removeClass('expanded-search-layout');
            jQuery('body').removeClass('expanded-search-layout');
            this.showScrollBar();
        };
        PostSearchView.prototype.showScrollBar = function () {
            jQuery('.sc-blog-post-list-container').css('scrollbar-width', 'auto');
        };
        Object.defineProperty(PostSearchView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'SearchResults.View': function () {
                        return _this.resultListView;
                    },
                    'Pagination.View': function () {
                        return _this.paginationView;
                    },
                    'Suggestions.View': function () {
                        return _this.suggestionsView;
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        PostSearchView.prototype.getContext = function () {
            return {
                searchHint: PostSearch_Configuration_1.PostSearchConfiguration.searchHint,
                searchLabel: PostSearch_Configuration_1.PostSearchConfiguration.searchLabel,
                defaultText: this.model.phrase,
                closeButtonLabel: PostSearch_Configuration_1.PostSearchConfiguration.searchCloseButtonLabel,
                backToTopLabel: PostSearch_Configuration_1.PostSearchConfiguration.backToTopLabel,
            };
        };
        PostSearchView.prototype.destroy = function () {
            jQuery('body').removeClass('expanded-search-layout');
        };
        return PostSearchView;
    }(Backbone_1.View));
    exports.PostSearchView = PostSearchView;
});
/// <amd-module name="SuiteCommerce.Blog.SuggestionsList.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.SuggestionsList.Model", ["require", "exports", "Backbone", "SuiteCommerce.Blog.Post.Collection"], function (require, exports, Backbone_1, Post_Collection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SuggestionsListModel = /** @class */ (function (_super) {
        __extends(SuggestionsListModel, _super);
        function SuggestionsListModel(options) {
            return _super.call(this, options) || this;
        }
        Object.defineProperty(SuggestionsListModel.prototype, "title", {
            get: function () {
                return this.get('title');
            },
            set: function (title) {
                this.set('title', title);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SuggestionsListModel.prototype, "suggestionMessage", {
            get: function () {
                return this.get('suggestionMessage');
            },
            set: function (suggestionMessage) {
                this.set('suggestionMessage', suggestionMessage);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SuggestionsListModel.prototype, "searchOptions", {
            get: function () {
                return this.get('searchOptions');
            },
            set: function (searchOptions) {
                this.set('searchOptions', searchOptions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SuggestionsListModel.prototype, "suggestionList", {
            get: function () {
                if (!this.get('suggestionList')) {
                    this.set('suggestionList', new Post_Collection_1.PostCollection());
                }
                return this.get('suggestionList');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SuggestionsListModel.prototype, "quantityOfSuggestions", {
            get: function () {
                return this.get('quantityOfSuggestions');
            },
            set: function (quantityOfSuggestions) {
                this.set('quantityOfSuggestions', quantityOfSuggestions);
            },
            enumerable: true,
            configurable: true
        });
        return SuggestionsListModel;
    }(Backbone_1.Model));
    exports.SuggestionsListModel = SuggestionsListModel;
});
/// <amd-module name="SuiteCommerce.Blog.SuggestionsList.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.SuggestionsList.View", ["require", "exports", "Backbone", "sc_blog_suggestions_list.tpl", "SuiteCommerce.Blog.Post.Collection", "SuiteCommerce.Blog.Common.Searcher.Helper", "SuiteCommerce.Blog.PostList.View", "SuiteCommerce.Blog.PostList.Model", "SuiteCommerce.Blog.PostCard.View"], function (require, exports, Backbone_1, suggestionsListTemplate, Post_Collection_1, BlogPostSearcher_Helper_1, PostList_View_1, PostList_Model_1, PostCard_View_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SuggestionsListView = /** @class */ (function (_super) {
        __extends(SuggestionsListView, _super);
        function SuggestionsListView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = suggestionsListTemplate;
            if (options && options.model && options.model.searchOptions) {
                _this.fetchSuggestionList();
            }
            return _this;
        }
        SuggestionsListView.prototype.fetchSuggestionList = function () {
            var _this = this;
            return this.model.suggestionList.fetch(BlogPostSearcher_Helper_1.BlogPostSearcherHelper.buildRequestBody(this.model.searchOptions)).done(function () { return _this.render(); });
        };
        Object.defineProperty(SuggestionsListView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'PostList.View': function () {
                        return new PostList_View_1.PostListView({
                            model: new PostList_Model_1.PostListModel({
                                postCardLayout: PostCard_View_1.PostCardLayout.horizontal,
                                posts: new Post_Collection_1.PostCollection(_this.model.suggestionList.sample(_this.model.quantityOfSuggestions)),
                                showPostCardsPlaceholders: _this.model.suggestionList.size() === 0,
                                postCardPlaceholdersQuantity: _this.model.quantityOfSuggestions,
                            }),
                        });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        SuggestionsListView.prototype.getContext = function () {
            return (this.model.searchOptions)
                ? {
                    title: this.model.title,
                    showSuggestions: this.model.suggestionList.size() > 0,
                    suggestionMessage: this.model.suggestionMessage,
                    posts: this.model.suggestionList,
                    render: true,
                } : {
                render: false,
            };
        };
        return SuggestionsListView;
    }(Backbone_1.View));
    exports.SuggestionsListView = SuggestionsListView;
});
/// <amd-module name="SuiteCommerce.Blog.TaxonomyNavigation.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.TaxonomyNavigation.Configuration", ["require", "exports", "SuiteCommerce.Blog.Common.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaxonomyNavigationConfiguration = /** @class */ (function (_super) {
        __extends(TaxonomyNavigationConfiguration, _super);
        function TaxonomyNavigationConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TaxonomyNavigationConfiguration, "taxonomyNavigationTitle", {
            get: function () {
                return this.get('blog.taxonomyNavigationTitle');
            },
            enumerable: true,
            configurable: true
        });
        return TaxonomyNavigationConfiguration;
    }(Configuration_1.Configuration));
    exports.TaxonomyNavigationConfiguration = TaxonomyNavigationConfiguration;
});
/// <amd-module name="SuiteCommerce.Blog.TaxonomyNavigation.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.TaxonomyNavigation.Model", ["require", "exports", "Backbone", "SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Collection"], function (require, exports, Backbone_1, TaxonomyNavigation_Taxonomy_Collection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaxonomyNavigationModel = /** @class */ (function (_super) {
        __extends(TaxonomyNavigationModel, _super);
        function TaxonomyNavigationModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TaxonomyNavigationModel.prototype, "taxonomies", {
            get: function () {
                if (!this.get('taxonomies')) {
                    this.taxonomies = new TaxonomyNavigation_Taxonomy_Collection_1.TaxonomyNavigationTaxonomyCollection();
                }
                return this.get('taxonomies');
            },
            set: function (taxonomies) {
                this.set('taxonomies', taxonomies);
            },
            enumerable: true,
            configurable: true
        });
        return TaxonomyNavigationModel;
    }(Backbone_1.Model));
    exports.TaxonomyNavigationModel = TaxonomyNavigationModel;
});
/// <amd-module name="SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Collection", ["require", "exports", "SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Model", "Backbone"], function (require, exports, TaxonomyNavigation_Taxonomy_Model_1, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaxonomyNavigationTaxonomyCollection = /** @class */ (function (_super) {
        __extends(TaxonomyNavigationTaxonomyCollection, _super);
        function TaxonomyNavigationTaxonomyCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = TaxonomyNavigation_Taxonomy_Model_1.TaxonomyNavigationTaxonomyModel;
            _this.comparator = function (model) {
                return model.name;
            };
            return _this;
        }
        return TaxonomyNavigationTaxonomyCollection;
    }(Backbone_1.Collection));
    exports.TaxonomyNavigationTaxonomyCollection = TaxonomyNavigationTaxonomyCollection;
});
/// <amd-module name="SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaxonomyNavigationTaxonomyModel = /** @class */ (function (_super) {
        __extends(TaxonomyNavigationTaxonomyModel, _super);
        function TaxonomyNavigationTaxonomyModel(options) {
            return _super.call(this, options) || this;
        }
        Object.defineProperty(TaxonomyNavigationTaxonomyModel.prototype, "name", {
            get: function () {
                return this.get('name');
            },
            set: function (name) {
                this.set('name', name);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaxonomyNavigationTaxonomyModel.prototype, "urlComponent", {
            get: function () {
                return this.get('urlComponent');
            },
            set: function (urlFragment) {
                this.set('urlComponent', urlFragment);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaxonomyNavigationTaxonomyModel.prototype, "isHighlighted", {
            get: function () {
                return this.get('isHighlighted');
            },
            set: function (isHighlighted) {
                this.set('isHighlighted', isHighlighted);
            },
            enumerable: true,
            configurable: true
        });
        return TaxonomyNavigationTaxonomyModel;
    }(Backbone_1.Model));
    exports.TaxonomyNavigationTaxonomyModel = TaxonomyNavigationTaxonomyModel;
});
/// <amd-module name="SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.View", ["require", "exports", "Backbone", "sc_blog_taxonomy_navigation_taxonomy.tpl", "SuiteCommerce.Blog.Common"], function (require, exports, Backbone_1, taxonomyNavigationTaxonomyViewTemplate, Common_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaxonomyNavigationTaxonomyView = /** @class */ (function (_super) {
        __extends(TaxonomyNavigationTaxonomyView, _super);
        function TaxonomyNavigationTaxonomyView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = taxonomyNavigationTaxonomyViewTemplate;
            _this.model.on('change', function () { return _this.render(); });
            return _this;
        }
        TaxonomyNavigationTaxonomyView.prototype.getContext = function () {
            return {
                taxonomyName: this.model.name,
                urlFragment: Common_1.BLOG_URL_BASE + "/" + this.model.urlComponent,
                isHighlighted: this.model.isHighlighted,
            };
        };
        return TaxonomyNavigationTaxonomyView;
    }(Backbone_1.View));
    exports.TaxonomyNavigationTaxonomyView = TaxonomyNavigationTaxonomyView;
});
/// <amd-module name="SuiteCommerce.Blog.TaxonomyNavigation.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.Blog.TaxonomyNavigation.View", ["require", "exports", "Backbone", "sc_blog_taxonomy_navigation.tpl", "SuiteCommerce.Blog.Common", "Backbone.CollectionView", "SuiteCommerce.Blog.DataProvider", "SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.View", "SuiteCommerce.Blog.TaxonomyNavigation.Configuration", "SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Model"], function (require, exports, Backbone_1, taxonomyNavigationViewTemplate, Common_1, BackboneCollectionView, DataProvider_1, TaxonomyNavigation_Taxonomy_View_1, TaxonomyNavigation_Configuration_1, TaxonomyNavigation_Taxonomy_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TaxonomyNavigationView = /** @class */ (function (_super) {
        __extends(TaxonomyNavigationView, _super);
        function TaxonomyNavigationView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = taxonomyNavigationViewTemplate;
            _this.events = {
                'click [data-action="expand-taxonomy-list"]': 'toggleTaxonomyList',
            };
            _this.navigationData = options.navigationData;
            _this.fetchTaxonomies();
            _this.setupDataProviderListener();
            return _this;
        }
        TaxonomyNavigationView.prototype.setupDataProviderListener = function () {
            var _this = this;
            DataProvider_1.DataProvider.entitiesModel.on('change', function () {
                _this.fetchTaxonomies();
            });
        };
        TaxonomyNavigationView.prototype.fetchTaxonomies = function () {
            this.model.taxonomies.reset();
            this.includePostCategories();
            this.includeDefaultTaxonomies();
            this.highlightSelected();
            this.render();
        };
        TaxonomyNavigationView.prototype.includeDefaultTaxonomies = function () {
            this.model.taxonomies.add(new TaxonomyNavigation_Taxonomy_Model_1.TaxonomyNavigationTaxonomyModel({
                name: Common_1.DefaultTaxonomies.all.name,
                urlComponent: Common_1.AvailableTaxonomies.category + "/" + Common_1.DefaultTaxonomies.all.urlComponent,
            }), { sort: false });
            var featuredTerm = DataProvider_1.DataProvider.terms.getTermByDefaultAlias(Common_1.DefaultTaxonomies.featured.defaultAlias);
            if (DataProvider_1.DataProvider.terms.size() > 0 && featuredTerm && featuredTerm.isUsed) {
                this.model.taxonomies.unshift(new TaxonomyNavigation_Taxonomy_Model_1.TaxonomyNavigationTaxonomyModel({
                    name: featuredTerm.name,
                    urlComponent: Common_1.AvailableTaxonomies.term + "/" + featuredTerm.urlComponent,
                }));
            }
        };
        TaxonomyNavigationView.prototype.includePostCategories = function () {
            var _this = this;
            DataProvider_1.DataProvider.categories.each(function (category) {
                if (category.isUsed) {
                    _this.model.taxonomies.add(new TaxonomyNavigation_Taxonomy_Model_1.TaxonomyNavigationTaxonomyModel({
                        name: category.name,
                        urlComponent: Common_1.AvailableTaxonomies.category + "/" + category.urlComponent,
                    }));
                }
            });
        };
        TaxonomyNavigationView.prototype.highlightSelected = function () {
            var _this = this;
            if (this.navigationData && this.navigationData.taxonomies) {
                this.model.taxonomies.each(function (taxonomy) {
                    _this.navigationData.taxonomies.forEach(function (filter) {
                        if (taxonomy.urlComponent.split('/')[1] === filter.value) {
                            taxonomy.isHighlighted = true;
                        }
                    });
                });
            }
        };
        TaxonomyNavigationView.prototype.getHighlightedTaxonomy = function () {
            return this.model.taxonomies.find(function (taxonomy) { return taxonomy.isHighlighted; });
        };
        TaxonomyNavigationView.prototype.toggleTaxonomyList = function () {
            var chevronIcon = this.$el.find('.sc-blog-post-taxonomy-navigation-list-title-icon');
            var taxonomiesContainer = this.$el.find('.sc-blog-post-taxonomy-navigation-container');
            chevronIcon.toggleClass('transform');
            taxonomiesContainer.toggleClass('expanded');
        };
        Object.defineProperty(TaxonomyNavigationView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'Taxonomies.View': function () {
                        return new BackboneCollectionView({
                            childView: TaxonomyNavigation_Taxonomy_View_1.TaxonomyNavigationTaxonomyView,
                            collection: _this.model.taxonomies,
                        });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        TaxonomyNavigationView.prototype.getContext = function () {
            var taxonomy = this.getHighlightedTaxonomy();
            return {
                sectionTitle: TaxonomyNavigation_Configuration_1.TaxonomyNavigationConfiguration.taxonomyNavigationTitle,
                activeTaxonomy: taxonomy ? taxonomy.name : '',
            };
        };
        return TaxonomyNavigationView;
    }(Backbone_1.View));
    exports.TaxonomyNavigationView = TaxonomyNavigationView;
});
/// <amd-module name="SuiteCommerce.Blog.Shopping"/>
define("SuiteCommerce.Blog.Shopping", ["require", "exports", "SuiteCommerce.Blog.Post", "SuiteCommerce.Blog.BlogHome", "SuiteCommerce.Blog.DataProvider", "SuiteCommerce.Blog.Common.Configuration", "Handlebars", "SuiteCommerce.Blog.Common.Instrumentation.Helper", "SuiteCommerce.Blog.PostCardsCCT"], function (require, exports, Post, Blog, DataProvider_1, Configuration_1, Handlebars, Instrumentation_Helper_1, PostCardsCCT) {
    "use strict";
    return {
        mountToApp: function (container) {
            var environment = container.getComponent('Environment');
            this.initializeConfiguration(environment);
            this.initializeInstrumentation(environment);
            this.registerHandlebarsHelpers();
            DataProvider_1.DataProvider.fetchEntitiesData();
            Post.mountToApp(container);
            Blog.mountToApp(container);
            PostCardsCCT.mountToApp(container);
        },
        initializeConfiguration: function (environment) {
            Configuration_1.Configuration.environment = environment;
        },
        initializeInstrumentation: function (environment) {
            Instrumentation_Helper_1.InstrumentationHelper.initializeInstrumentation(environment);
        },
        registerHandlebarsHelpers: function () {
            Handlebars.registerHelper('sc_ext_when', function (value1, operator, value2, options) {
                var supportedOperations = {
                    '===': function (member1, member2) {
                        return member1 === member2;
                    },
                    '!==': function (member1, member2) {
                        return member1 !== member2;
                    },
                    '>': function (member1, member2) {
                        return Number(member1) > Number(member2);
                    },
                    '<': function (member1, member2) {
                        return Number(member1) < Number(member2);
                    },
                    '>=': function (member1, member2) {
                        return Number(member1) >= Number(member2);
                    },
                    '<=': function (member1, member2) {
                        return Number(member1) <= Number(member2);
                    },
                    '&&': function (member1, member2) {
                        return member1 && member2;
                    },
                    '||': function (member1, member2) {
                        return member1 || member2;
                    },
                };
                var result = supportedOperations[operator](value1, value2);
                return result
                    ? options.fn
                        ? options.fn(this)
                        : result
                    : options.inverse
                        ? options.inverse(this)
                        : result;
            });
        },
    };
});
};
extensions['Someoddpilot.CCT_SOP_Alternating_Feature.0.0.14'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/CCT_SOP_Alternating_Feature/0.0.14/' + asset;
};
// @module Someoddpilot.Alternating.Feature
define('Someoddpilot.Alternating.Feature.View',
    [
        'alternating_feature.tpl'
        , 'CustomContentType.Base.View'
    ],
    function (
        alternating_feature_tpl
        , CustomContentTypeBaseView
    ) {
        'use strict'
        // @class Someoddpilot.Alternating.Feature.View @extends CustomContentTypeBaseView
        return CustomContentTypeBaseView.extend({
            template: alternating_feature_tpl
            , events: {}
            , getContext: function getContext() {
                var afClass = 'af-img-on-right';
                if (this.settings.custrecord_cctaf_img_on_left === 'T') {
                    afClass = 'af-img-on-left';
                }
                var detailImageClass =
                    this.settings.custrecord_cctaf_img_fill === 'T'
                        ? ' fill' : '';
                var ctaAttributes =
                    this.settings.custrecord_cctaf_cta_new_tab === 'T'
                        ? 'target="_blank"' : '';
                var ctaClass = 'button button-link';
                if (this.settings.custrecord_cctaf_cta_button === 'T') {
                    ctaClass = 'button-primary';
                }
                return {
                    afClass: afClass,
                    detailImage: this.settings.custrecord_cctaf_img_url,
                    detailImageAlt: this.settings.custrecord_cctaf_alt,
                    detailImageClass: detailImageClass,
                    header: this.settings.custrecord_cctaf_header,
                    body: this.settings.custrecord_cctaf_body,
                    ctaText: this.settings.custrecord_cctaf_cta_text,
                    ctaURL: this.settings.custrecord_cctaf_cta_url,
                    ctaAttributes: ctaAttributes,
                    ctaClass: ctaClass
                }
            }
        });
    });
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.CCT_SOP_Alternating_Feature.SomeoddpilotAlternatingFeature.Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({});
});
define('Someoddpilot.CCT_SOP_Alternating_Feature.SomeoddpilotAlternatingFeature',
    [
        'Someoddpilot.Alternating.Feature.View'
    ],
    function (
        AlternatingFeatureView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                // Register Custom SMT Content Type
                AlternatingFeatureView.prototype.container = container;
                container.getComponent('CMS').registerCustomContentType({
                    id: 'cct_sop_af',
                    view: AlternatingFeatureView
                });
            }
        };
    });
};
extensions['Someoddpilot.CCT_SOP_Alternating_Feature_Nav.0.0.4'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/CCT_SOP_Alternating_Feature_Nav/0.0.4/' + asset;
};
// @module Someoddpilot.Alternating.Feature.Nav
define('Someoddpilot.Alternating.Feature.Nav.View',
    [
        'alternating_feature_nav.tpl', 'CustomContentType.Base.View'
    ],
    function (
        alternating_feature_nav_tpl, CustomContentTypeBaseView
    ) {
        'use strict'
        function handleNavLinkClick(event) {
            var instanceid = event.target.getAttribute('data-instanceid');
            var element = document.querySelector('[data-cms-cct-instanceid="' + instanceid + '"]');
            var scrollTop = jQuery(element).offset().top - jQuery('#site-header').height() - 5;
            jQuery('html, body').animate({
                    scrollTop: scrollTop
                },
                1000
            );
            return false;
        }
        function buildLinkCollection(view) {
            var alternatingFeatures = document.querySelectorAll('.alternating-feature');
            var linkCollection = [];
            alternatingFeatures.forEach(function (feature) {
                linkCollection.push({
                    'headline': feature.querySelector('.item-content-title').textContent,
                    'instanceid': feature.parentElement.parentElement.getAttribute('data-cms-cct-instanceid')
                });
            });
            view.linkCollection = linkCollection;
            view.render();
        }
        // @class Someoddpilot.Alternating.Feature.Nav.View @extends CustomContentTypeBaseView
        return CustomContentTypeBaseView.extend({
            template: alternating_feature_nav_tpl
                ,
            install: function install(settings, context_data) {
                    setTimeout(function () {
                        buildLinkCollection(this);
                    });
                    return this._install(settings, context_data);
                }
                ,
            update: function update(settings) {
                    setTimeout(function () {
                        buildLinkCollection(this);
                    });
                    return this._update(settings);
                }
                ,
            events: {
                'click .alternating-feature-nav a': handleNavLinkClick
            }
            ,
            getContext: function getContext() {
                var linkClass =
                    this.settings.custrecord_cctaf_nav_underline === 'T' ?
                    'underline' : '';
                return {
                    linkCollection: this.linkCollection,
                    linkClass: linkClass
                }
            }
        });
    });
define('Someoddpilot.CCT_SOP_Alternating_Feature_Nav.SomeoddpilotAlternatingFeatureNav',
    [
        'Someoddpilot.Alternating.Feature.Nav.View'
    ],
    function (
        AlternatingFeatureNavView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                // Register Custom SMT Content Type
                AlternatingFeatureNavView.prototype.container = container;
                container.getComponent('CMS').registerCustomContentType({
                    id: 'cct_sop_af_nav',
                    view: AlternatingFeatureNavView
                });
            }
        };
    });
};
extensions['Someoddpilot.CCT_SOP_Amenities.0.0.4'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/CCT_SOP_Amenities/0.0.4/' + asset;
};
// @module Someoddpilot.Amenities
define('Someoddpilot.Amenities.View',
    [
        'amenities.tpl'
        , 'CustomContentType.Base.View'
    ],
    function (
        amenities_tpl
        , CustomContentTypeBaseView
    ) {
        'use strict'
        // @class Someoddpilot.Amenities.View @extends CustomContentTypeBaseView
        return CustomContentTypeBaseView.extend({
            template: amenities_tpl
            , events: {}
            , getContext: function getContext() {
                this.amenities = this.amenities || {};
                if (this.settings.custrecord_cctam_wifi === 'T') {
                    this.amenities.wifi = {
                        'header': this.settings.custrecord_cctam_wifi_header,
                        'copy': this.settings.custrecord_cctam_wifi_copy
                    }
                }
                if (this.settings.custrecord_cctam_patio === 'T') {
                    this.amenities.patio = {
                        'header': this.settings.custrecord_cctam_patio_header,
                        'copy': this.settings.custrecord_cctam_patio_copy
                    }
                }
                if (this.settings.custrecord_cctam_lunch === 'T') {
                    this.amenities.lunch = {
                        'header': this.settings.custrecord_cctam_lunch_header,
                        'copy': this.settings.custrecord_cctam_lunch_copy
                    }
                }
                return {
                    'amenities': this.amenities
                }
            }
        });
    });
define('Someoddpilot.CCT_SOP_Amenities.SomeoddpilotAmenities',
    [
        'Someoddpilot.Amenities.View'
    ],
    function (
        AmenitiesView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                // Register Custom SMT Content Type
                AmenitiesView.prototype.container = container;
                container.getComponent('CMS').registerCustomContentType({
                    id: 'cct_sop_amenities',
                    view: AmenitiesView
                });
            }
        };
    });
};
extensions['Someoddpilot.CCT_SOP_Feature_Grid.0.0.7'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/CCT_SOP_Feature_Grid/0.0.7/' + asset;
};
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.CCT_SOP_Feature_Grid.SomeoddpilotFeatureGrid.SS2Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/SomeoddpilotFeatureGrid/SuiteScript2/SomeoddpilotFeatureGrid.Service.ss"
            ),
            true
        ),
        //@property {Function} updateUrlRoot
        updateUrlRoot: function (model, featureIds) {
            model.urlRoot = Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/SomeoddpilotFeatureGrid/SuiteScript2/SomeoddpilotFeatureGrid.Service.ss" +
                    "?feature_ids=" + featureIds
                ),
                true
            );
        }
    });
});
// @module Someoddpilot.Feature.Grid
define('Someoddpilot.Feature.Grid.View',
    [
        'feature_grid.tpl'
        , 'CustomContentType.Base.View'
        , 'Someoddpilot.CCT_SOP_Feature_Grid.SomeoddpilotFeatureGrid.SS2Model'
    ],
    function (
        feature_grid_tpl
        , CustomContentTypeBaseView
        , SomeoddpilotFeatureGridSS2Model
    ) {
        'use strict'
        function fetchFeatures(view, settings) {
            // Update the models feature IDs to request the configured feature content
            var featureIds = settings.custrecord_cctfg_features.replace(/\x05/g, ',');
            view.model.updateUrlRoot(view.model, featureIds);
            // Fetch slide content
            view.model.fetch().done(function (result) {
                if (result.message) {
                    return console.error('CCT Feature Grid:', result.message);
                }
                view.settings.features = result;
                view.render();
            });
        }
        // @class Someoddpilot.Feature.Grid.View @extends CustomContentTypeBaseView
        return CustomContentTypeBaseView.extend({
            template: feature_grid_tpl
            , initialize: function (options) {
                this.model = new SomeoddpilotFeatureGridSS2Model();
                this._initialize(options);
            }
            , install: function install(settings, context_data) {
                fetchFeatures(this, settings);
                return this._install(settings, context_data);
            }
            , update: function update(settings) {
                fetchFeatures(this, settings);
                return this._update(settings);
            }
            , events: {}
            , getContext: function getContext() {
                return {
                    features: this.settings.features
                }
            }
        });
    });
define('Someoddpilot.CCT_SOP_Feature_Grid.SomeoddpilotFeatureGrid',
    [
        'Someoddpilot.Feature.Grid.View'
    ],
    function (
        FeatureGridView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                // Register Custom SMT Content Type
                FeatureGridView.prototype.container = container;
                container.getComponent('CMS').registerCustomContentType({
                    id: 'cct_sop_feature_grid',
                    view: FeatureGridView
                });
            }
        };
    });
};
extensions['Someoddpilot.CCT_SOP_Hero_Slider.0.0.3'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/CCT_SOP_Hero_Slider/0.0.3/' + asset;
};
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.CCT_SOP_Hero_Slider.SomeoddpilotHeroSlider.SS2Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/SomeoddpilotHeroSlider/SuiteScript2/SomeoddpilotHeroSlider.Service.ss"
            ),
            true
        ),
        //@property {Function} updateUrlRoot
        updateUrlRoot: function (model, slideIds) {
            model.urlRoot = Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/SomeoddpilotHeroSlider/SuiteScript2/SomeoddpilotHeroSlider.Service.ss" +
                    "?slide_ids=" + slideIds
                ),
                true
            );
        },
        //@property {Function} initSlider
        initSlider: function (view) {
            var sliderEl = view.$el.find('[data-slider]');
            // Return if no slider found
            if (sliderEl.length < 1) {
                return;
            }
            Utils.initBxSlider(sliderEl, {
                nextText: '',
                prevText: '',
                pager: false
            });
        }
    });
});
// @module Someoddpilot.Hero.Slider
define('Someoddpilot.Hero.Slider.View',
    [
        'hero_slider.tpl', 'CustomContentType.Base.View', 'Someoddpilot.CCT_SOP_Hero_Slider.SomeoddpilotHeroSlider.SS2Model'
    ],
    function (
        hero_slider_tpl, CustomContentTypeBaseView, SomeoddpilotHeroSliderSS2Model
    ) {
        'use strict'
        function fetchSlideData(view, settings) {
            // Update the models slide IDs to request the configured slide content
            var slideIds = settings.custrecord_ccths_slides.replace(/\x05/g, ',');
            view.model.updateUrlRoot(view.model, slideIds);
            // Fetch slide content
            view.model.fetch().done(function (result) {
                if (result.message) {
                    return console.error('CCT Hero Slider:', result.message);
                }
                result.forEach(function (slide) {
                    var ctaClass = 'button button-link button-white';
                    if (slide.custrecord_ccths_slide_cta_button === 'T') {
                        ctaClass = 'button button-secondary';
                    }
                    slide.ctaClass = ctaClass;
                });
                view.settings.slides = result;
                view.render();
            });
        }
        // @class Someoddpilot.Hero.Slider.View @extends CustomContentTypeBaseView
        return CustomContentTypeBaseView.extend({
            template: hero_slider_tpl
                ,
            initialize: function (options) {
                    this.model = new SomeoddpilotHeroSliderSS2Model();
                    this.on('afterCompositeViewRender', this.model.initSlider);
                    this._initialize(options);
                }
                ,
            install: function install(settings, context_data) {
                    fetchSlideData(this, settings);
                    return this._install(settings, context_data);
                }
                ,
            update: function update(settings) {
                    fetchSlideData(this, settings);
                    return this._update(settings);
                }
                ,
            events: {}
            ,
            getContext: function getContext() {
                this.settings.slides = this.settings.slides || [];
                return {
                    slide: this.settings.slides[0],
                    slides: this.settings.slides,
                    isSlider: this.settings.slides.length > 1
                }
            }
        });
    });
define('Someoddpilot.CCT_SOP_Hero_Slider.SomeoddpilotHeroSlider',
    [
        'Someoddpilot.Hero.Slider.View'
    ],
    function (
        HeroSliderView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                // Register Custom SMT Content Type
                HeroSliderView.prototype.container = container;
                container.getComponent('CMS').registerCustomContentType({
                    id: 'cct_sop_hero_slider',
                    view: HeroSliderView
                });
            }
        };
    });
};
extensions['Someoddpilot.CCT_SOP_Page_Hero.1.0.0'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/CCT_SOP_Page_Hero/1.0.0/' + asset;
};
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.CCT_SOP_Page_Hero.SomeoddpilotPageHero.Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({});
});
// @module Someoddpilot.Page.Hero
define('Someoddpilot.Page.Hero.View',
    [
        'page_hero.tpl'
        , 'CustomContentType.Base.View'
    ],
    function (
        page_hero_tpl
        , CustomContentTypeBaseView
    ) {
        'use strict'
        // @class Someoddpilot.Page.Hero.View @extends CustomContentTypeBaseView
        return CustomContentTypeBaseView.extend({
            template: page_hero_tpl
            , events: {}
            , getContext: function getContext() {
                return {
                    heroImageURL: this.settings.custrecord_cctsph_img_url,
                    heroImageAlt: this.settings.custrecord_cctsph_alt,
                    headline: this.settings.custrecord_cctsph_headline,
                    subhead: this.settings.custrecord_cctsph_subhead
                }
            }
        });
    });
define('Someoddpilot.CCT_SOP_Page_Hero.SomeoddpilotPageHero',
    [
        'Someoddpilot.Page.Hero.View'
    ],
    function (
        PageHeroView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                // Register Custom SMT Content Type
                PageHeroView.prototype.container = container;
                container.getComponent('CMS').registerCustomContentType({
                    id: 'cct_sop_page_hero',
                    view: PageHeroView
                });
            }
        };
    });
};
extensions['Someoddpilot.CCT_SOP_Promo_Feature.0.0.5'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/CCT_SOP_Promo_Feature/0.0.5/' + asset;
};
// @module Someoddpilot.Promo.Feature
define('Someoddpilot.Promo.Feature.View',
    [
        'promo_feature.tpl',
        'CustomContentType.Base.View'
    ],
    function (
        promo_feature_tpl,
        CustomContentTypeBaseView
    ) {
        'use strict';
        function placeFeature(settings) {
            // Don't move any features if in the CMS
            if (/^\/cms/.test(window.top.location.pathname)) {
                return;
            }
            // Get reference to feature
            var feature = document.querySelector('.promo-feature');
            // Return if no feature present
            if (feature === null) {
                return;
            }
            // Get parent and inject
            var parent = document.querySelector('.facets-facet-browse-items');
            // Return if no facet items to insert into
            if (parent === null) {
                return;
            }
            // Prototype method to inject the feature
            Element.prototype.insertChildAtIndex = function (child, index) {
                if (!index) {
                    index = 0;
                }
                if (index >= this.children.length) {
                    this.appendChild(child);
                } else {
                    this.insertBefore(child, this.children[index]);
                }
            };
            var position = settings.custrecord_cctpf_position || 3;
            parent.insertChildAtIndex(feature, position);
        }
        // @class Someoddpilot.Promo.Feature.View @extends CustomContentTypeBaseView
        return CustomContentTypeBaseView.extend({
            template: promo_feature_tpl
                ,
            install: function install(settings, context_data) {
                    this.on('afterViewRender', function () {
                        setTimeout(function () {
                            placeFeature(settings);
                        })
                    });
                    return this._install(settings, context_data);
                }
                ,
            events: {}
            ,
            bindings: {}
            ,
            childViews: {}
            //@method getContext @return Someoddpilot.Promo.Feature.View.Context
            ,
            getContext: function getContext() {
                //@class Someoddpilot.Promo.Feature.View.Context
                var promoImageClass =
                    this.settings.custrecord_cctpf_img_fill === 'T' ?
                    ' fill' : '';
                var ctaAttributes =
                    this.settings.custrecord_cctpf_cta_new_tab === 'T' ?
                    'target="_blank"' : '';
                var ctaClass = 'button-secondary button-link';
                if (this.settings.custrecord_cctpf_cta_button === 'T') {
                    ctaClass = 'button-secondary';
                }
                return {
                    pfClass: 'facets-items-feature',
                    promoImage: this.settings.custrecord_cctpf_img_url,
                    promoImageAlt: this.settings.custrecord_cctpf_alt,
                    promoImageClass: promoImageClass,
                    header: this.settings.custrecord_cctpf_header,
                    body: this.settings.custrecord_cctpf_body,
                    ctaText: this.settings.custrecord_cctpf_cta_text,
                    ctaURL: this.settings.custrecord_cctpf_cta_url,
                    ctaAttributes: ctaAttributes,
                    ctaClass: ctaClass
                };
            }
        });
    });
define('Someoddpilot.CCT_SOP_Promo_Feature.SomeoddpilotPromoFeature',
    [
        'Someoddpilot.Promo.Feature.View'
    ],
    function (
        PromoFeatureView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                // Register Custom SMT Content Type
                PromoFeatureView.prototype.container = container;
                container.getComponent('CMS').registerCustomContentType({
                    id: 'cct_sop_pf',
                    view: PromoFeatureView
                });
            }
        };
    });
};
extensions['Someoddpilot.CCT_SOP_Testimonial.0.0.14'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/CCT_SOP_Testimonial/0.0.14/' + asset;
};
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.CCT_SOP_Testimonial.SomeoddpilotTestimonial.SS2Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/SomeoddpilotTestimonial/SuiteScript2/SomeoddpilotTestimonial.Service.ss"
            ),
            true
        ),
        //@property {Function} updateUrlRoot
        updateUrlRoot: function (model, slideIds) {
            model.urlRoot = Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/SomeoddpilotTestimonial/SuiteScript2/SomeoddpilotTestimonial.Service.ss" +
                    "?slide_ids=" + slideIds
                ),
                true
            );
        },
        //@property {Function} initSlider
        initSlider: function (view) {
            var sliderEl = view.$el.find('[data-slider]');
            // Return if no slider found
            if (sliderEl.length < 1) {
                return;
            }
            Utils.initBxSlider(sliderEl, {
                nextText: '',
                prevText: '',
                pager: false
            });
        }
    });
});
// @module Someoddpilot.Testimonial
define('Someoddpilot.Testimonial.View',
    [
        'testimonial.tpl'
        , 'CustomContentType.Base.View'
        , 'Someoddpilot.CCT_SOP_Testimonial.SomeoddpilotTestimonial.SS2Model'
    ],
    function (
        testimonial_tpl
        , CustomContentTypeBaseView
        , SomeoddpilotTestimonialSS2Model
    ) {
        'use strict'
        function fetchSlideData(view, settings) {
            // Update the models slide IDs to request the configured slide content
            var slideIds = settings.custrecord_cctt_slides.replace(/\x05/g, ',');
            view.model.updateUrlRoot(view.model, slideIds);
            // Fetch slide content
            view.model.fetch().done(function (result) {
                if (result.message) {
                    return console.error('CCT Testimonial:', result.message);
                }
                view.settings.slides = result;
                view.render();
            });
        }
        // @class Someoddpilot.Testimonial.View @extends CustomContentTypeBaseView
        return CustomContentTypeBaseView.extend({
            template: testimonial_tpl
            , initialize: function (options) {
                this.model = new SomeoddpilotTestimonialSS2Model();
                this.on('afterCompositeViewRender', this.model.initSlider);
                this._initialize(options);
            }
            , install: function install(settings, context_data) {
                fetchSlideData(this, settings);
                return this._install(settings, context_data);
            }
            , update: function update(settings) {
                fetchSlideData(this, settings);
                return this._update(settings);
            }
            , events: {}
            , getContext: function getContext() {
                this.settings.slides = this.settings.slides || [];
                return {
                    slide: this.settings.slides[0],
                    slides: this.settings.slides,
                    isSlider: this.settings.slides.length > 1
                }
            }
        });
    });
define('Someoddpilot.CCT_SOP_Testimonial.SomeoddpilotTestimonial',
    [
        'Someoddpilot.Testimonial.View'
    ],
    function (
        TestimonialView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                // Register Custom SMT Content Type
                TestimonialView.prototype.container = container;
                container.getComponent('CMS').registerCustomContentType({
                    id: 'cct_sop_testimonial',
                    view: TestimonialView
                });
            }
        };
    });
};
extensions['CXExtensibility.CoreContent.1.0.5'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/CXExtensibility/CoreContent/1.0.5/' + asset;
};
// Types references for VSCode Intellisense
/// <reference path="../../../../../node_modules/@types/jquery/index.d.ts"/>
/// <reference path="../../../../../node_modules/@types/underscore/index.d.ts"/>
/**
 * @typedef {import("./types").Item} Item Data for single item to display in the merchandising zone
 * @typedef {import("./types").ItemImage} ItemImage Container for image url and alt text
 * @typedef {import("./types").Settings} Settings Sidepanel settings
 */
define('CXExtensibility.CoreContent.CMSMerchzoneCCT.View', [
    'CustomContentType.Base.View',
    'cxextensibility_corecontent_cmsmerchzonecct.tpl',
    'Utils',
    'jQuery',
    'underscore',
], /**
 * @param {JQueryStatic} $
 * @param {_.UnderscoreStatic} _
 */ function (CustomContentTypeBaseView, template, Utils, $, _) {
    'use strict';
    var displayModes = {
        HORIZONTAL: '1',
        VERTICAL: '2',
        GRID: '3',
    };
    var isMobile = false;
    return CustomContentTypeBaseView.extend({
        template: template,
        /**@type {Settings}*/
        settings: null,
        initialize: function () {
            this._initialize();
            this.on('afterViewRender', function () {
                var merchRule = this.settings.custrecord_merchzone_merchrule;
                isMobile = window.matchMedia("(max-width: 767px)").matches
                if (merchRule && merchRule !== '') {
                    this.fetchMerchZoneEndpoint(merchRule);
                }
            });
        },
        /**
         * Fetch merchzone information from SMT CMS endpoint
         * @param {string | number} merchzoneId Merchzone ID to fetch
         */
        fetchMerchZoneEndpoint: function fetchMerchZoneEndpoint(merchzoneId) {
            $.ajax({
                url: '/api/cms/v2/merchzones/' + merchzoneId,
            }).done(
                function (res) {
                    this.fetchItems(res.data[0].queryString);
                }.bind(this)
            );
        },
        /**
         * Fetch items from items enddpoint returned from merchzone endpoint
         * @param {string} itemsEndpoint
         */
        fetchItems: function fetchItems(itemsEndpoint) {
            $.ajax({
                url: itemsEndpoint,
            }).done(
                function (res) {
                    var itemDetails = _.map(
                        res.items,
                        function (item) {
                            /** @type {Item} */
                            var formattedItem = {
                                name: item.storedisplayname2 || item.displayname,
                                price: item.onlinecustomerprice_formatted,
                                link: '/' + item.urlcomponent,
                                image: this.getDefaultImage(item.itemimages_detail),
                            };
                            return formattedItem;
                        }.bind(this)
                    );
                    this.renderMerchzone(itemDetails);
                }.bind(this)
            );
        },
        /**
         * Render item info to template
         * @param {Item[]} items
         */
        renderMerchzone: function renderMerchzone(items) {
            if (items.length === 0) {
                return;
            }
            var heading = this.settings.custrecord_merchzone_heading || '';
            if (heading.length === 0) {
                this.$('.cms-merchzone-heading').remove();
            } else {
                this.$('.cms-merchzone-heading').text(heading);
            }
            _.each(
                items,
                function (item) {
                    var template = this.$('#item-template').contents().clone();
                    template.find('.item-name').text(item.name);
                    template.find('.item-price').text(item.price);
                    template.find('.item-link').attr('href', item.link);
                    template.find('.item-name').attr('href', item.link);
                    template.find('.cms-merchzone-see-more').attr('href', item.link);
                    template.find('.item-image').attr('src', item.image.url);
                    template.find('.item-image').attr('alt', item.image.altimagetext);
                    this.$('.cms-merchzone-slider').append(template);
                },
                this
            );
            var sliderRendered = this.$('.cms-merchzone-slider').parent().hasClass('bx-viewport');
            var displayMode = this.settings.custrecord_merchzone_display_mode.toString();
            if (displayMode !== displayModes.GRID) {
                if (sliderRendered) {
                    return;
                }
                this.renderSlider();
            } else {
                this.renderGrid();
            }
        },
        renderSlider: function renderSlider() {
            var displayMode = this.settings.custrecord_merchzone_display_mode || displayModes.HORIZONTAL;
            var mode = displayMode.toString() === displayModes.VERTICAL ? 'vertical' : 'horizontal';
            var numItems = isMobile ? 1 : parseInt(this.settings.custrecord_merchzone_numitems) || 4;
            var merchzoneWidth = this.$('.cms-merchzone-slider').width();
            var slideWidth = Math.floor(merchzoneWidth / numItems);
            var sliderOptions = {
                mode: mode,
                minSlides: numItems,
                maxSlides: numItems,
                slideWidth: slideWidth,
                moveSlides: 1,
                pager: false,
                nextText:
                    '<a class="cms-merchzone-slider-next cms-merchzone-' +
                    mode +
                    '-control"><span class="control-text">' +
                    _('next').translate() +
                    '</span> <i class="carousel-next-arrow"></i></a>',
                prevText:
                    '<a class="cms-merchzone-slider-prev cms-merchzone-' +
                    mode +
                    '-control"><i class="carousel-prev-arrow"></i> <span class="control-text">' +
                    _('prev').translate() +
                    '</span></a>',
            };
            Utils.initBxSlider(this.$('.cms-merchzone-slider'), sliderOptions);
            this.$('.item-image-wrapper').css({ 'min-height': slideWidth + 'px' });
            if (displayMode === displayModes.VERTICAL) {
                this.$('.bx-wrapper').css({ margin: '0 auto' });
            }
            // Fix incorrect height when SCA rerenders the slider
            setTimeout(
                function () {
                    var itemHeight = this.$('.cms-merchzone-item').height();
                    this.$('.bx-viewport').css({ 'min-height': itemHeight });
                }.bind(this)
            );
        },
        renderGrid: function renderGrid() {
            var merchzoneWidth = this.$('.cms-merchzone-slider').width();
            var numItems = isMobile ? 1 : parseInt(this.settings.custrecord_merchzone_numitems) || 3;
            this.$('.cms-merchzone-slider').removeClass('cms-merchzone-slider').addClass('cms-merchzone-grid');
            this.$('.cms-merchzone-grid > li').css({
                width: Math.floor(merchzoneWidth / numItems),
            });
        },
        /**
         * Get the default image or first image found if not available
         * @param {Object} itemimages The object contained in the item's itemimages_detail key
         * @returns {ItemImage}
         */
        getDefaultImage: function getDefaultImage(itemimages) {
            /**
             * Flatten method taken from SCA Utils
             * @param {Object} images
             * @returns {ItemImage[]}
             */
            function flattenImages(images) {
                if ('url' in images && 'altimagetext' in images) {
                    return [images];
                }
                return _.flatten(
                    _.map(images, function (item) {
                        if (_.isArray(item)) {
                            return item;
                        }
                        return flattenImages(item);
                    })
                );
            }
            var imageData = flattenImages(itemimages);
            var defaultImage = _.find(imageData, function (image) {
                var match = image.url.match(/.*\.default\.[A-Za-z]*/i);
                return !!match && match[0] === image.url;
            });
            return defaultImage || imageData[0];
        },
        contextDataRequest: [],
        validateContextDataRequest: function () {
            return true;
        },
        getContext: function () {
            return {
                merchRule: this.settings.custrecord_merchzone_merchrule,
                displayMode: this.settings.custrecord_merchzone_display_mode,
                numItems: this.settings.custrecord_merchzone_numitems,
            };
        },
    });
});
// @module CXExtensibility.CoreContent.CMSMerchzoneCCT
// An example cct that shows a message with the price, using the context data from the item
// Use: Utils.getAbsoluteUrl(getExtensionAssetsPath('services/service.ss'))
// to reference services or images available in your extension assets folder
define('CXExtensibility.CoreContent.CMSMerchzoneCCT', ['CXExtensibility.CoreContent.CMSMerchzoneCCT.View'], function (
    CMSMerchzoneCCTView
) {
    'use strict';
    return {
        mountToApp: function mountToApp(container) {
            var environment = container.getComponent('Environment');
            environment.setTranslation('fr_CA', [{ key: 'See More', value: 'Voir Plus' }]);
            environment.setTranslation('es_ES', [{ key: 'See More', value: 'Ver Más' }]);
            container.getComponent('CMS').registerCustomContentType({
                // this property value MUST be lowercase
                id: 'CMS_MERCHZONETWO',
                // The view to render the CCT
                view: CMSMerchzoneCCTView,
            });
        },
    };
});
define('CXExtensibility.CoreContent.CoreContentModule', [
    'CXExtensibility.CoreContent.CMSMerchzoneCCT',
], function (CMSMerchzoneCCT) {
    'use strict';
    return {
        mountToApp: function mountToApp(container) {
            CMSMerchzoneCCT.mountToApp(container);
        },
    };
});
};
extensions['SuiteCommerce.CustomFields.1.1.4'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/SuiteCommerce/CustomFields/1.1.4/' + asset;
};
/// <amd-module name="SuiteCommerce.CustomFields.Instrumentation.Helper"/>
define("SuiteCommerce.CustomFields.Instrumentation.Helper", ["require", "exports", "SuiteCommerce.CustomFields.Instrumentation"], function (require, exports, Instrumentation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComponentArea = 'SC Custom Fields';
    exports.ExtensionVersion = '1.1.4';
    exports.QueueNameSuffix = '-CustomFields';
    var InstrumentationHelper = /** @class */ (function () {
        function InstrumentationHelper() {
        }
        InstrumentationHelper.initializeInstrumentation = function (container) {
            Instrumentation_1.default.initialize({
                environment: container.getComponent('Environment'),
                queueNameSuffix: exports.QueueNameSuffix,
            });
        };
        return InstrumentationHelper;
    }());
    exports.InstrumentationHelper = InstrumentationHelper;
});
/// <amd-module name="SuiteCommerce.CustomFields.JavaScript.Utils"/>
define("SuiteCommerce.CustomFields.JavaScript.Utils", ["require", "exports", "Utils"], function (require, exports, Utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Utils = /** @class */ (function () {
        function Utils() {
        }
        Utils.formatDate = function (receivedDate, dateFormat) {
            var newDate = dateFormat;
            var monthReplaced = false;
            var date = new Date(receivedDate);
            var replaceMonth = function (monthLength, format) {
                var matched = newDate.match(monthLength);
                if (matched && !monthReplaced) {
                    monthReplaced = true;
                    return newDate.replace(monthLength, date.toLocaleString('en-us', { month: format }));
                }
                return newDate;
            };
            var ua = navigator.userAgent;
            var isOldIe = ua.indexOf('MSIE ') > -1;
            if (isOldIe) {
                return receivedDate;
            }
            newDate = newDate.replace('yyyy', date.toLocaleString('en-us', { year: 'numeric' }));
            newDate = newDate.replace('yy', date.toLocaleString('en-us', { year: '2-digit' }));
            newDate = newDate.replace('dd', date.toLocaleString('en-us', { day: '2-digit' }));
            newDate = newDate.replace('d', date.toLocaleString('en-us', { day: 'numeric' }));
            newDate = replaceMonth('mmmm', 'long');
            newDate = replaceMonth('mmm', 'short');
            newDate = replaceMonth('mm', '2-digit');
            newDate = replaceMonth('m', 'numeric');
            return newDate;
        };
        // @method urlIsAbsolute @param {String} url @returns {Boolean}
        Utils.isUrlAbsolute = function (url) {
            return /^https?:\/\//.test(url);
        };
        // @method getAbsoluteUrl @param {String} file @returns {String}
        Utils.getAbsoluteUrl = function (file, isServices2) {
            return Utils_1.getAbsoluteUrl(file, isServices2);
        };
        Utils.translate = function (text) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            return Utils_1.translate.apply(void 0, [text].concat(params));
        };
        return Utils;
    }());
    exports.Utils = Utils;
});
/// <amd-module name="SuiteCommerce.CustomFields.Instrumentation.Log"/>
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
define("SuiteCommerce.CustomFields.Instrumentation.Log", ["require", "exports", "SuiteCommerce.CustomFields.Instrumentation.Logger", "SuiteCommerce.CustomFields.Instrumentation.Helper"], function (require, exports, Instrumentation_Logger_1, Instrumentation_Helper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogSeverity;
    (function (LogSeverity) {
        LogSeverity["INFO"] = "info";
        LogSeverity["ERROR"] = "error";
    })(LogSeverity = exports.LogSeverity || (exports.LogSeverity = {}));
    var Log = /** @class */ (function () {
        function Log(attributes) {
            if (attributes === void 0) { attributes = { label: '' }; }
            this.defaultParametersToSubmit = {
                componentArea: Instrumentation_Helper_1.ComponentArea,
                extensionVersion: Instrumentation_Helper_1.ExtensionVersion,
            };
            this.setInitialAttributes(attributes);
        }
        Log.prototype.setInitialAttributes = function (attributes) {
            var defaultAttributes = {
                label: null,
                parametersToSubmit: this.defaultParametersToSubmit || {},
                timer: {},
                severity: LogSeverity.INFO,
            };
            var _a = __assign({}, defaultAttributes, attributes), label = _a.label, parametersToSubmit = _a.parametersToSubmit, timer = _a.timer, severity = _a.severity;
            this.label = label;
            this.parametersToSubmit = parametersToSubmit;
            this.timer = timer;
            this.severity = severity;
        };
        Log.prototype.startTimer = function () {
            this.timer.startTime = this.getTimestamp();
        };
        Log.prototype.endTimer = function () {
            this.timer.endTime = this.getTimestamp();
        };
        Log.prototype.getTimestamp = function () {
            if (!this.isOldInternetExplorer()) {
                return performance.now() || Date.now();
            }
            return Date.now();
        };
        Log.prototype.getElapsedTimeForTimer = function () {
            var timer = this.timer;
            if (timer.startTime && timer.endTime) {
                if (timer.startTime > timer.endTime) {
                    console.warn('Start time should be minor that end time in timer');
                    return null;
                }
                return timer.endTime - timer.startTime;
            }
            if (!timer.startTime)
                console.warn('The Start time is not defined');
            if (!timer.endTime)
                console.warn('The End time is not defined');
            return null;
        };
        Log.prototype.setParameters = function (data) {
            var _this = this;
            Object.keys(data).forEach(function (parameter) {
                _this.setParameter(parameter, data[parameter]);
            });
        };
        Log.prototype.setParameter = function (parameter, value) {
            var logData = this.parametersToSubmit;
            logData[parameter] = value;
            this.parametersToSubmit = logData;
        };
        Log.prototype.submit = function () {
            if (!this.isOldInternetExplorer()) {
                switch (this.severity) {
                    case LogSeverity.ERROR:
                        this.submitAsError();
                        break;
                    case LogSeverity.INFO:
                    default:
                        this.submitAsInfo();
                }
            }
        };
        Log.prototype.isOldInternetExplorer = function () {
            return (!!navigator.userAgent.match(/Trident/g) ||
                !!navigator.userAgent.match(/MSIE/g));
        };
        Log.prototype.submitAsError = function () {
            Instrumentation_Logger_1.Logger.getLogger().error(this.parametersToSubmit);
        };
        Log.prototype.submitAsInfo = function () {
            Instrumentation_Logger_1.Logger.getLogger().info(this.parametersToSubmit);
        };
        return Log;
    }());
    exports.Log = Log;
});
/// <amd-module name="SuiteCommerce.CustomFields.Instrumentation.Logger"/>
define("SuiteCommerce.CustomFields.Instrumentation.Logger", ["require", "exports", "SuiteCommerce.CustomFields.Instrumentation.MockAppender"], function (require, exports, Instrumentation_MockAppender_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Logger = /** @class */ (function () {
        function Logger() {
        }
        Logger.getLogger = function () {
            this.instance = this.instance || this.buildLoggerInstance();
            return this.instance;
        };
        Logger.buildLoggerInstance = function () {
            var _a;
            try {
                // @ts-ignore
                var LoggersModule = require('Loggers').Loggers;
                // @ts-ignore
                var elasticAppender = require('Loggers.Appender.ElasticLogger')
                    .LoggersAppenderElasticLogger.getInstance();
                // Just for test purposes in local environments: the output of MockApppender is the browser console.
                var mockAppender = Instrumentation_MockAppender_1.MockAppender.getInstance();
                // @ts-ignore
                var configurationModule = require('Loggers.Configuration');
                var loggerName = "CommerceExtensions" + Logger.options.queueNameSuffix;
                LoggersModule.setConfiguration((_a = {},
                    _a[loggerName] = {
                        log: [
                            { profile: configurationModule.prod, appenders: [elasticAppender] },
                            { profile: configurationModule.dev, appenders: [mockAppender] },
                        ],
                        actions: {},
                        loggers: {},
                    },
                    _a));
                return LoggersModule.getLogger(loggerName);
            }
            catch (e) {
                return {
                    info: function (obj) { },
                    error: function (obj) { },
                };
            }
        };
        return Logger;
    }());
    exports.Logger = Logger;
});
/// <amd-module name="SuiteCommerce.CustomFields.Instrumentation.MockAppender"/>
define("SuiteCommerce.CustomFields.Instrumentation.MockAppender", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MockAppender = /** @class */ (function () {
        function MockAppender() {
        }
        MockAppender.prototype.info = function (data) {
            console.info('MockAppender - Info', data);
        };
        MockAppender.prototype.error = function (data) {
            console.error('MockAppender - Error', data);
        };
        MockAppender.prototype.ready = function () {
            return true;
        };
        MockAppender.getInstance = function () {
            if (!MockAppender.instance) {
                MockAppender.instance = new MockAppender();
            }
            return MockAppender.instance;
        };
        MockAppender.prototype.start = function (action, options) {
            return options;
        };
        MockAppender.prototype.end = function (startOptions, options) { };
        return MockAppender;
    }());
    exports.MockAppender = MockAppender;
});
/// <amd-module name="SuiteCommerce.CustomFields.Instrumentation"/>
define("SuiteCommerce.CustomFields.Instrumentation", ["require", "exports", "underscore", "SuiteCommerce.CustomFields.Instrumentation.Logger", "SuiteCommerce.CustomFields.Instrumentation.Log"], function (require, exports, _, Instrumentation_Logger_1, Instrumentation_Log_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var logs = [];
    exports.default = {
        initialize: function (options) {
            Instrumentation_Logger_1.Logger.options = options;
        },
        getLog: function (logLabel) {
            return this.getLogModelByLabel(logLabel) || this.registerNewLog(logLabel);
        },
        getLogModelByLabel: function (label) {
            return _(logs).findWhere({ label: label });
        },
        registerNewLog: function (label) {
            var log = new Instrumentation_Log_1.Log({ label: label });
            logs.push(log);
            return log;
        },
        setParameterForAllLogs: function (parameter, value) {
            logs.forEach(function (log) {
                log.setParameter(parameter, value);
            });
        },
        setParametersForAllLogs: function (data) {
            logs.forEach(function (log) {
                log.setParameters(data);
            });
        },
        submitLogs: function () {
            logs.forEach(function (log) {
                log.submit();
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.CustomFields.Utils"/>
define("SuiteCommerce.CustomFields.Utils", ["require", "exports", "underscore"], function (require, exports, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CustomFieldsUtils = /** @class */ (function () {
        function CustomFieldsUtils() {
        }
        CustomFieldsUtils.compileText = function (textInput, variables) {
            var text = textInput || '';
            _(variables || {}).each(function (value, name) {
                var regex = new RegExp("{{" + name + "}}", 'g');
                text = text.replace(regex, value);
            });
            return text;
        };
        return CustomFieldsUtils;
    }());
    exports.CustomFieldsUtils = CustomFieldsUtils;
});
/// <amd-module name="SuiteCommerce.CustomFields.PDP.Configuration"/>
define("SuiteCommerce.CustomFields.PDP.Configuration", ["require", "exports", "underscore"], function (require, exports, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var environment = null;
    var DataMarkupTypes;
    (function (DataMarkupTypes) {
        DataMarkupTypes["JsonLd"] = "JSON-LD";
    })(DataMarkupTypes = exports.DataMarkupTypes || (exports.DataMarkupTypes = {}));
    var Configuration = /** @class */ (function () {
        function Configuration() {
        }
        Configuration.setEnvironment = function (environmentComponent) {
            environment = environmentComponent;
        };
        Configuration.getFieldsFromConfiguration = function () {
            var _this = this;
            var fieldsArray = [];
            var fieldsArrayUnparsed = Configuration.get('customFields.pdp.fields', []);
            fieldsArrayUnparsed.forEach(function (unparsedField) {
                fieldsArray.push({
                    nameInConfiguration: unparsedField.fieldid,
                    fieldText: unparsedField.fieldid,
                    fieldsToParse: [],
                    schema: unparsedField.schema,
                    show: unparsedField.show,
                    hideFromQuickView: unparsedField.hideFromQuickView,
                    parsedText: '',
                    visible: false,
                });
            });
            fieldsArray.forEach(function (fieldObject) {
                var fieldsToParse = _this.parseField(fieldObject.fieldText);
                fieldObject.fieldsToParse = fieldsToParse;
            });
            return fieldsArray;
        };
        Configuration.get = function (key, defaultValue) {
            if (environment) {
                var configValue = environment.getConfig(key);
                if (_.isUndefined(configValue) && !_.isUndefined(defaultValue)) {
                    return defaultValue;
                }
                return configValue;
            }
            console.error('Please set the Environment Component in the Configuration.');
            return null;
        };
        Configuration.parseField = function (fieldText) {
            var regexForParse = /\[\[(.+?)\]\]/g;
            var matches = fieldText.match(regexForParse);
            matches = matches ? matches : [];
            matches = matches.map(function (field) {
                return field.replace(']]', '').replace('[[', '');
            });
            return matches;
        };
        Object.defineProperty(Configuration, "structuredDataMarkupType", {
            get: function () {
                return this.get('structureddatamarkup.type');
            },
            enumerable: true,
            configurable: true
        });
        return Configuration;
    }());
    exports.Configuration = Configuration;
});
/// <amd-module name="SuiteCommerce.CustomFields.PDP.Main.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.CustomFields.PDP.Main.View", ["require", "exports", "Backbone", "suitecommerce_customfields_pdp_field.tpl", "SuiteCommerce.CustomFields.Instrumentation"], function (require, exports, Backbone_1, pdpFieldsTpl, Instrumentation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PDPFieldsView = /** @class */ (function (_super) {
        __extends(PDPFieldsView, _super);
        function PDPFieldsView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = pdpFieldsTpl;
            _this.isQuickView = !!options.isQuickView;
            _this.model.on('childSelected', function () {
                _this.render();
            });
            return _this;
        }
        PDPFieldsView.prototype.logFieldsQuantity = function (quantity) {
            var log = Instrumentation_1.default.getLog('usage');
            var SECTION = this.isQuickView ? 'Quick View' : 'PDP';
            log.setParameters({
                activity: "Show custom " + SECTION + " fields.",
                instanceCount: quantity,
            });
            log.submit();
        };
        PDPFieldsView.prototype.getContext = function () {
            var model = this.model;
            var fieldList = model.get('fieldsList');
            var fieldsToShow = fieldList.filter(function (field) {
                return field.show;
            });
            var fieldQuantityToShow = fieldsToShow.length;
            this.logFieldsQuantity(fieldQuantityToShow);
            return {
                field: fieldsToShow,
                showContainer: fieldQuantityToShow > 0,
            };
        };
        return PDPFieldsView;
    }(Backbone_1.View));
    exports.PDPFieldsView = PDPFieldsView;
});
/// <amd-module name="SuiteCommerce.CustomFields.PDP.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.CustomFields.PDP.Model", ["require", "exports", "Backbone", "SuiteCommerce.CustomFields.PDP.Configuration", "underscore"], function (require, exports, Backbone_1, PDP_Configuration_1, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PDPModel = /** @class */ (function (_super) {
        __extends(PDPModel, _super);
        function PDPModel(modelAttributes) {
            var _this = _super.call(this, modelAttributes) || this;
            _this.isQuickView = !!modelAttributes.isQuickView;
            _this.fieldsList = PDP_Configuration_1.Configuration.getFieldsFromConfiguration();
            _this.itemInfo = _this.pdp.getItemInfo().item;
            _this.fieldsForJsonLd = {};
            _this.updateFields();
            if (PDP_Configuration_1.Configuration.structuredDataMarkupType === PDP_Configuration_1.DataMarkupTypes.JsonLd) {
                _this.addJsonLdValues();
            }
            _this.pdp.on('afterOptionSelection', function () {
                _this.updateFields();
                _this.trigger('childSelected');
            });
            return _this;
        }
        Object.defineProperty(PDPModel.prototype, "pdp", {
            get: function () {
                return this.get('pdp');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PDPModel.prototype, "fieldsList", {
            get: function () {
                return this.get('fieldsList');
            },
            set: function (fieldsList) {
                this.set('fieldsList', fieldsList);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PDPModel.prototype, "itemInfo", {
            get: function () {
                return this.get('itemInfo');
            },
            set: function (itemInfo) {
                this.set('itemInfo', itemInfo);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PDPModel.prototype, "childItemInfo", {
            get: function () {
                return this.pdp.getSelectedMatrixChilds();
            },
            enumerable: true,
            configurable: true
        });
        PDPModel.prototype.updateFields = function () {
            var _this = this;
            var fieldList = this.fieldsList;
            fieldList.forEach(function (fieldObject) {
                var show = fieldObject.show, hideFromQuickView = fieldObject.hideFromQuickView, fieldText = fieldObject.fieldText, fieldsToParse = fieldObject.fieldsToParse;
                fieldObject.show = !!(show && (!_this.isQuickView || !hideFromQuickView));
                if (fieldObject.show) {
                    fieldObject.parsedText = _this.replaceFromFieldList(fieldText, fieldsToParse);
                    if (fieldObject.schema) {
                        _this.populateJsonLdValues(fieldObject);
                    }
                    fieldObject.visible = fieldObject.show && _this.updateVisibility(fieldsToParse);
                }
            });
            this.fieldsList = fieldList;
        };
        PDPModel.prototype.replaceFromFieldList = function (fieldText, stringList) {
            var _this = this;
            var resultText = fieldText;
            stringList.forEach(function (replaceValue) {
                var replaceString = _this.getItemInfoFieldValue(replaceValue);
                resultText = resultText
                    .split("[[" + replaceValue + "]]")
                    .join("" + replaceString);
            });
            return resultText;
        };
        PDPModel.prototype.updateVisibility = function (propertyList) {
            var _this = this;
            var foundProperties = false;
            propertyList.forEach(function (property) {
                var fieldValue = _this.getItemInfoFieldValue(property);
                if ((fieldValue && fieldValue !== '&nbsp;') || fieldValue === 0) {
                    foundProperties = true;
                }
            });
            return foundProperties;
        };
        PDPModel.prototype.getItemInfoFieldValue = function (fieldId) {
            var itemInfo = this.itemInfo;
            var childItemInfo = this.childItemInfo;
            if (childItemInfo.length === 1) {
                return childItemInfo[0][fieldId] || itemInfo[fieldId] || '';
            }
            return itemInfo[fieldId] || '';
        };
        PDPModel.prototype.populateJsonLdValues = function (fieldObject) {
            var _this = this;
            var fieldValue = '';
            fieldObject.fieldsToParse.forEach(function (field) {
                fieldValue += _this.getItemInfoFieldValue(field);
            });
            this.fieldsForJsonLd[fieldObject.schema] = fieldValue;
        };
        PDPModel.prototype.addJsonLdValues = function () {
            var _this = this;
            this.pdp.modifyViewJsonLd('ProductDetails.Full.View', function (json) {
                var extendedJson = _.extend(json, _this.fieldsForJsonLd);
                return jQuery.Deferred().resolve(extendedJson);
            });
        };
        return PDPModel;
    }(Backbone_1.Model));
    exports.PDPModel = PDPModel;
});
/// <amd-module name="SuiteCommerce.CustomFields.PDP"/>
define("SuiteCommerce.CustomFields.PDP", ["require", "exports", "SuiteCommerce.CustomFields.PDP.Configuration", "SuiteCommerce.CustomFields.PDP.Main.View", "SuiteCommerce.CustomFields.PDP.Model"], function (require, exports, PDP_Configuration_1, PDP_Main_View_1, PDP_Model_1) {
    "use strict";
    return {
        mountToApp: function (container) {
            PDP_Configuration_1.Configuration.setEnvironment(container.getComponent('Environment'));
            var pdp = container.getComponent('PDP');
            if (pdp) {
                this.addCustomFields(pdp);
            }
        },
        addCustomFields: function (pdp) {
            this.addCustomFieldsToPDP(pdp);
            this.addCustomFieldsToQuickViews(pdp);
        },
        addCustomFieldsToPDP: function (pdp) {
            pdp.addChildView('Product.Sku', this.pdpFieldsViewConstructor(pdp));
        },
        addCustomFieldsToQuickViews: function (pdp) {
            pdp.addChildViews(pdp.PDP_QUICK_VIEW, {
                'Product.Sku': {
                    'CustomFields.PDPFields': {
                        childViewIndex: 11,
                        childViewConstructor: this.pdpFieldsViewConstructor(pdp, true),
                    },
                },
            });
        },
        pdpFieldsViewConstructor: function (pdp, isQuickView) {
            if (isQuickView === void 0) { isQuickView = false; }
            return function () {
                var model = new PDP_Model_1.PDPModel({
                    pdp: pdp,
                    isQuickView: isQuickView,
                });
                return new PDP_Main_View_1.PDPFieldsView({
                    model: model,
                    isQuickView: isQuickView,
                });
            };
        },
    };
});
/// <amd-module name="SuiteCommerce.CustomFields.PDP.Main"/>
define("SuiteCommerce.CustomFields.PDP.Main", ["require", "exports", "SuiteCommerce.CustomFields.PDP", "SuiteCommerce.CustomFields.Instrumentation.Helper"], function (require, exports, PDPFields, Instrumentation_Helper_1) {
    "use strict";
    var Module = {
        mountToApp: function (container) {
            Instrumentation_Helper_1.InstrumentationHelper.initializeInstrumentation(container);
            PDPFields.mountToApp(container);
        },
    };
    return Module;
});
};
extensions['SuiteCommerce.GiftCertificateValueCheck.1.2.4'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/SuiteCommerce/GiftCertificateValueCheck/1.2.4/' + asset;
};
/// <amd-module name="SuiteCommerce.GiftCertificate.Utils.Configuration"/>
define("SuiteCommerce.GiftCertificate.Utils.Configuration", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var environment = null;
    var Configuration = /** @class */ (function () {
        function Configuration() {
        }
        Object.defineProperty(Configuration, "environment", {
            set: function (environmentComponent) {
                environment = environmentComponent;
            },
            enumerable: true,
            configurable: true
        });
        Configuration.get = function (key) {
            if (environment) {
                return environment.getConfig(key);
            }
            console.error('Please set the Environment Component in the Configuration.');
            return null;
        };
        Configuration.getSearchApiMasterOptions = function () {
            if (environment) {
                var config = environment.application.getConfig();
                if (config)
                    return config.searchApiMasterOptions;
            }
            console.error('Please set the Environment Component in the Configuration.');
            return null;
        };
        return Configuration;
    }());
    exports.Configuration = Configuration;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Currency.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.Currency.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CurrencyModel = /** @class */ (function (_super) {
        __extends(CurrencyModel, _super);
        function CurrencyModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CurrencyModel.prototype, "id", {
            get: function () {
                return this.get('id');
            },
            set: function (id) {
                this.set('id', id);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CurrencyModel.prototype, "name", {
            get: function () {
                return this.get('name');
            },
            set: function (name) {
                this.set('name', name);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CurrencyModel.prototype, "symbol", {
            get: function () {
                return this.get('symbol');
            },
            set: function (symbol) {
                this.set('symbol', symbol);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CurrencyModel.prototype, "symbolPlacement", {
            get: function () {
                return this.get('symbolPlacement');
            },
            set: function (symbolPlacement) {
                this.set('symbolPlacement', symbolPlacement);
            },
            enumerable: true,
            configurable: true
        });
        return CurrencyModel;
    }(Backbone_1.Model));
    exports.CurrencyModel = CurrencyModel;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Customer.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.Customer.Model", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificates.Collection"], function (require, exports, Backbone_1, GiftCertificate_Collection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CustomerModel = /** @class */ (function (_super) {
        __extends(CustomerModel, _super);
        function CustomerModel(attributes) {
            var _this = _super.call(this, attributes) || this;
            _this.giftCertificatesCollection = new GiftCertificate_Collection_1.GiftCertificateCollection();
            if (attributes.customerId) {
                _this.customerId = attributes.customerId;
            }
            return _this;
        }
        Object.defineProperty(CustomerModel.prototype, "customerId", {
            get: function () {
                return this.get('customerId');
            },
            set: function (customerId) {
                this.set('customerId', customerId);
            },
            enumerable: true,
            configurable: true
        });
        CustomerModel.prototype.fetchGiftCertificateList = function () {
            return this.giftCertificatesCollection.fetch();
        };
        return CustomerModel;
    }(Backbone_1.Model));
    exports.CustomerModel = CustomerModel;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Common.DependencyProvider"/>
define("SuiteCommerce.GiftCertificate.Common.DependencyProvider", ["require", "exports", "underscore", "Profile.Model", "Utils", "GlobalViews.Message.View", "GlobalViews.Breadcrumb.View", "Backbone.CachedCollection", "Backbone.CachedModel"], function (require, exports, _, ProfileModelModule, UtilsModuleSC, GlobalVMessageView, GlobalVBreadcrumbView, BackboneCCollection, BackboneCModel) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BackboneCachedModel = getDependency(BackboneCModel);
    exports.BackboneCachedCollection = getDependency(BackboneCCollection);
    exports.GlobalViewsBreadcrumbView = getDependency(GlobalVBreadcrumbView);
    exports.GlobalViewsMessageView = getDependency(GlobalVMessageView);
    exports.ProfileModel = getDependency(ProfileModelModule);
    exports.UtilsModule = getDependency(UtilsModuleSC);
    function getDependency(module) {
        if (isTranspiledModule(module)) {
            return module[Object.keys(module)[0]];
        }
        return module;
    }
    function isTranspiledModule(module) {
        var moduleKeys = Object.keys(module);
        return !_.isFunction(module) && moduleKeys.length === 1;
    }
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Common.FeedbackMessageManager"/>
define("SuiteCommerce.GiftCertificate.Common.FeedbackMessageManager", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddFeedbackMessageEvent = 'FeedbackMessageEvent';
    exports.RemoveFeedbackMessageEvent = 'RemoveFeedbackMessageEvent';
    var FeedbackMessageType;
    (function (FeedbackMessageType) {
        FeedbackMessageType["ERROR"] = "error";
        FeedbackMessageType["WARNING"] = "warning";
        FeedbackMessageType["INFO"] = "info";
        FeedbackMessageType["SUCCESS"] = "success";
    })(FeedbackMessageType = exports.FeedbackMessageType || (exports.FeedbackMessageType = {}));
    var FeedbackMessageManager = /** @class */ (function () {
        function FeedbackMessageManager() {
        }
        FeedbackMessageManager.triggerMessageEvent = function (eventBuilder) {
            eventBuilder.context.trigger(exports.AddFeedbackMessageEvent, {
                message: eventBuilder.message,
                type: eventBuilder.type,
            });
        };
        FeedbackMessageManager.triggerRemoveMessageEvent = function (context) {
            context.trigger(exports.RemoveFeedbackMessageEvent, undefined);
        };
        return FeedbackMessageManager;
    }());
    exports.FeedbackMessageManager = FeedbackMessageManager;
});
/// <amd-module name="SuiteCommerce.GiftCertificates.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificates.Collection", ["require", "exports", "underscore", "SuiteCommerce.GiftCertificate.Common.Utils", "Backbone", "SuiteCommerce.GiftCertificate.Model"], function (require, exports, _, Utils_1, Backbone_1, GiftCertificate_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GiftCertificateCollection = /** @class */ (function (_super) {
        __extends(GiftCertificateCollection, _super);
        function GiftCertificateCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.url = '/app/site/hosting/scriptlet.nl?script=customscript_ns_sc_sl_gift_cert_mgmt' +
                '&deploy=customdeploy_ns_sc_sl_gift_cert_mgmt';
            return _this;
        }
        Object.defineProperty(GiftCertificateCollection.prototype, "model", {
            get: function () {
                return GiftCertificate_Model_1.GiftCertificateModel;
            },
            enumerable: true,
            configurable: true
        });
        GiftCertificateCollection.prototype.parse = function (response) {
            response.forEach(GiftCertificate_Model_1.GiftCertificateModel.formatGCCurrency);
            return response;
        };
        GiftCertificateCollection.prototype.getBalance = function () {
            var _this = this;
            var giftCertificateBalance = [];
            var activeGiftCertificates = this.getActiveGiftCertificates();
            var balanceByCurrency = _.groupBy(activeGiftCertificates, function (giftCertificateModel) {
                return giftCertificateModel.currency.get('id');
            });
            _.each(balanceByCurrency, function (giftCertificateModels, currencyId) {
                // @ts-ignore
                var balanceAmount = _.reduce(giftCertificateModels, function (memo, giftCertificateModel) {
                    return memo + parseFloat(giftCertificateModel.amountRemaining);
                }, 0);
                var balanceAmountFormatted;
                var currency = giftCertificateModels[0].currency;
                if (currency && currency.symbol) {
                    var currencySymbol = currency.symbol;
                    balanceAmountFormatted = Utils_1.Utils.formatCurrency(balanceAmount.toFixed(2), currencySymbol);
                    balanceAmountFormatted = _this.fixSymbolPosition(balanceAmountFormatted, currency);
                }
                else {
                    balanceAmountFormatted = Utils_1.Utils.formatCurrency(balanceAmount.toFixed(2));
                }
                giftCertificateBalance.push({
                    balanceAmount: balanceAmount,
                    balanceAmountFormatted: balanceAmountFormatted,
                    currency: giftCertificateModels[0].currency,
                });
            });
            return giftCertificateBalance;
        };
        GiftCertificateCollection.prototype.fixSymbolPosition = function (amount, currency) {
            var symbol = currency.symbol;
            var symbolBefore = currency.symbolPlacement === 1;
            var amountWithoutSymbol = amount.replace(/^\D*|\D*$/g, "");
            if (symbolBefore) {
                return symbol + amountWithoutSymbol;
            }
            return amountWithoutSymbol + symbol;
        };
        GiftCertificateCollection.prototype.getActiveGiftCertificates = function () {
            return _.filter(this.models, function (giftCertificateModel) {
                return giftCertificateModel.isActive();
            });
        };
        return GiftCertificateCollection;
    }(Backbone_1.Collection));
    exports.GiftCertificateCollection = GiftCertificateCollection;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.Model", ["require", "exports", "SuiteCommerce.GiftCertificate.Item.Model", "SuiteCommerce.GiftCertificate.Currency.Model", "SuiteCommerce.GiftCertificate.Common.Utils"], function (require, exports, Item_Model_1, Currency_Model_1, Utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GiftCertificateStatus;
    (function (GiftCertificateStatus) {
        GiftCertificateStatus["active"] = "ACTIVE";
        GiftCertificateStatus["expired"] = "EXPIRED";
        GiftCertificateStatus["inactive"] = "INACTIVE";
        GiftCertificateStatus["invalid"] = "INVALID";
    })(GiftCertificateStatus = exports.GiftCertificateStatus || (exports.GiftCertificateStatus = {}));
    var GiftCertificateModel = /** @class */ (function (_super) {
        __extends(GiftCertificateModel, _super);
        function GiftCertificateModel(attributes) {
            var _this = _super.call(this, attributes) || this;
            _this.urlRoot = '/app/site/hosting/scriptlet.nl?script=customscript_ns_sc_sl_gift_cert_mgmt' +
                '&deploy=customdeploy_ns_sc_sl_gift_cert_mgmt';
            _this.giftcertcode = attributes.giftcertcode || '';
            _this.status = attributes.status || '';
            _this.expirationDate = attributes.expirationDate || '';
            _this.sentOnDate = attributes.sentOnDate || '';
            _this.amountRemaining = attributes.amountRemaining || '';
            _this.amountRemainingFormatted = attributes.amountRemainingFormatted || '';
            _this.originalAmount = attributes.originalAmount || '';
            _this.originalAmountFormatted = attributes.originalAmountFormatted || '';
            _this.sender = attributes.sender || '';
            _this.currency = new Currency_Model_1.CurrencyModel(attributes.currency);
            return _this;
        }
        GiftCertificateModel.prototype.parse = function (data) {
            return GiftCertificateModel.formatGCCurrency(data);
        };
        GiftCertificateModel.formatGCCurrency = function (data) {
            if (!data.currency) {
                data.amountRemainingFormatted = Utils_1.Utils.formatCurrency(data.amountRemaining);
                data.originalAmountFormatted = Utils_1.Utils.formatCurrency(data.originalAmount);
            }
            return data;
        };
        Object.defineProperty(GiftCertificateModel.prototype, "giftcertcode", {
            get: function () {
                return this.get('giftcertcode');
            },
            set: function (giftcertcode) {
                this.set('giftcertcode', giftcertcode);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "status", {
            get: function () {
                return this.get('status');
            },
            set: function (status) {
                this.set('status', status);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "expirationDate", {
            get: function () {
                return this.get('expirationDate');
            },
            set: function (expirationDate) {
                this.set('expirationDate', expirationDate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "sentOnDate", {
            get: function () {
                return this.get('sentOnDate');
            },
            set: function (sentOnDate) {
                this.set('sentOnDate', sentOnDate);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "amountRemaining", {
            get: function () {
                return this.get('amountRemaining');
            },
            set: function (amountRemaining) {
                this.set('amountRemaining', amountRemaining);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "amountRemainingFormatted", {
            get: function () {
                return this.get('amountRemainingFormatted');
            },
            set: function (amountRemainingFormatted) {
                this.set('amountRemainingFormatted', amountRemainingFormatted);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "originalAmount", {
            get: function () {
                return this.get('originalAmount');
            },
            set: function (originalAmount) {
                this.set('originalAmount', originalAmount);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "originalAmountFormatted", {
            get: function () {
                return this.get('originalAmountFormatted');
            },
            set: function (originalAmountFormatted) {
                this.set('originalAmountFormatted', originalAmountFormatted);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "sender", {
            get: function () {
                return this.get('sender');
            },
            set: function (sender) {
                this.set('sender', sender);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GiftCertificateModel.prototype, "currency", {
            get: function () {
                return this.get('currency');
            },
            set: function (currency) {
                this.set('currency', currency);
            },
            enumerable: true,
            configurable: true
        });
        GiftCertificateModel.prototype.isRemainingAmountGreaterThanZero = function () {
            return parseInt(this.get('amountRemaining'), 10) > 0;
        };
        GiftCertificateModel.prototype.isActive = function () {
            return this.get('status') === GiftCertificateStatus.active;
        };
        GiftCertificateModel.prototype.isExpired = function () {
            return this.get('status') === GiftCertificateStatus.expired;
        };
        return GiftCertificateModel;
    }(Item_Model_1.ItemModel));
    exports.GiftCertificateModel = GiftCertificateModel;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Common.InstrumentationHelper"/>
define("SuiteCommerce.GiftCertificate.Common.InstrumentationHelper", ["require", "exports", "SuiteCommerce.GiftCertificate.Instrumentation", "SuiteCommerce.GiftCertificate.OptionTiles.Configuration", "SuiteCommerce.GiftCertificate.Main.Configuration"], function (require, exports, Instrumentation_1, OptionTiles_Configuration_1, Main_Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var QueueNameSuffix = '-GiftCertificate';
    var ExtensionVersion = '1.2.4';
    var ComponentArea = 'SC Gift Certificate';
    var InstrumentationHelper = /** @class */ (function () {
        function InstrumentationHelper() {
        }
        InstrumentationHelper.initializeInstrumentation = function (environment) {
            Instrumentation_1.default.initialize({
                environment: environment,
                queueNameSuffix: QueueNameSuffix,
                defaultParameters: {
                    componentArea: ComponentArea,
                    extensionVersion: ExtensionVersion,
                },
            });
        };
        InstrumentationHelper.sendLogForDomainConfiguration = function () {
            InstrumentationHelper.sendLogForMyAccountEnablement();
            InstrumentationHelper.sendLogForShoppingEnablement();
            InstrumentationHelper.sendLogForGiftCertificatesGroupEnablement();
            InstrumentationHelper.sendLogForHideInventoryTypesFromFacetsEnablement();
            InstrumentationHelper.sendLogForShowImageOptionsSwatchEnablement();
        };
        InstrumentationHelper.sendLogForMyAccountEnablement = function () {
            var requestLog = Instrumentation_1.default.getLog('giftCertificateRequestLog');
            var message = Main_Configuration_1.MainConfiguration.enableGiftCertMyAccount
                ? 'Gift Certificate Management enabled on My Account'
                : 'Gift Certificate Management disabled on My Account';
            requestLog.setParameters({
                activity: message,
            });
            requestLog.submit();
        };
        InstrumentationHelper.sendLogForShoppingEnablement = function () {
            var requestLog = Instrumentation_1.default.getLog('giftCertificateRequestLog');
            var message = Main_Configuration_1.MainConfiguration.enableGiftCertShopping
                ? 'Gift Certificate Management enabled on Shopping'
                : 'Gift Certificate Management disabled on Shopping';
            requestLog.setParameters({
                activity: message,
            });
            requestLog.submit();
        };
        InstrumentationHelper.sendLogForGiftCertificatesGroupEnablement = function () {
            var requestLog = Instrumentation_1.default.getLog('giftCertificateRequestLog');
            var message = OptionTiles_Configuration_1.OptionTilesConfiguration.groupCertificatesAsItemOptions
                ? 'Gift Certificate groups enabled'
                : 'Gift Certificate groups disabled';
            requestLog.setParameters({
                activity: message,
            });
            requestLog.submit();
        };
        InstrumentationHelper.sendLogForHideInventoryTypesFromFacetsEnablement = function () {
            var requestLog = Instrumentation_1.default.getLog('hideInventoryTypesFromFacetsEnablementLog');
            var message = Main_Configuration_1.MainConfiguration.hideInventoryTypesFromFacets
                ? 'Hide Inventory Types from Facets enabled'
                : 'Hide Inventory Types from Facets disabled';
            requestLog.setParameters({
                activity: message,
            });
            requestLog.submit();
        };
        InstrumentationHelper.sendLogForShowImageOptionsSwatchEnablement = function () {
            var requestLog = Instrumentation_1.default.getLog('showImageOptionsSwatchSettingEnablement');
            var message = OptionTiles_Configuration_1.OptionTilesConfiguration.useThumbnailInButtonLabel
                ? 'Show image options swatch enabled'
                : 'Show image options swatch disabled';
            requestLog.setParameters({
                activity: message,
            });
            requestLog.submit();
        };
        return InstrumentationHelper;
    }());
    exports.InstrumentationHelper = InstrumentationHelper;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Common.Utils"/>
define("SuiteCommerce.GiftCertificate.Common.Utils", ["require", "exports", "underscore", "SuiteCommerce.GiftCertificate.Common.DependencyProvider"], function (require, exports, _, DependencyProvider_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Utils = /** @class */ (function () {
        function Utils() {
        }
        Utils.translate = function (text) {
            var continuationText = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                continuationText[_i - 1] = arguments[_i];
            }
            return DependencyProvider_1.UtilsModule.translate(text, continuationText);
        };
        Utils.formatCurrency = function (value, symbol, noDecimalPosition) {
            return DependencyProvider_1.UtilsModule.formatCurrency(value, symbol, noDecimalPosition);
        };
        Utils.addParamsToUrl = function (baseUrl, params, avoidDoubleRedirect) {
            if (avoidDoubleRedirect) {
                var newParams_1 = {};
                _.each(params, function (paramValue, paramKey) {
                    newParams_1["__" + paramKey] = paramValue;
                });
                params = newParams_1;
            }
            if (baseUrl && !_.isEmpty(params)) {
                var paramString = jQuery.param(params);
                var joinString = baseUrl.indexOf('?') !== -1 ? '&' : '?';
                return baseUrl + joinString + paramString;
            }
            return baseUrl;
        };
        Utils.parseUrlOptions = function (optionsString) {
            var urlOption = optionsString || '';
            if (urlOption && urlOption.indexOf('?') !== -1) {
                urlOption = _.last(urlOption.split('?'));
            }
            if (urlOption && urlOption.indexOf('#') !== -1) {
                urlOption = _.first(urlOption.split('#'));
            }
            var options = {};
            if (urlOption && urlOption.length > 0) {
                var tokens = urlOption.split(/&/g);
                var currentToken = [];
                while (tokens.length > 0) {
                    var firstElement = tokens.shift();
                    if (firstElement) {
                        currentToken = firstElement.split(/=/g);
                    }
                    if (currentToken && currentToken[0].length !== 0) {
                        options[currentToken[0]] = this.getDecodedURLParameter(currentToken[1]);
                    }
                }
            }
            return options;
        };
        Utils.getDecodedURLParameter = function (urlParameter) {
            if (urlParameter === void 0) { urlParameter = ''; }
            var position;
            var temporal;
            for (temporal = ''; (position = urlParameter.indexOf('%')) >= 0; urlParameter = urlParameter.substring(position + 3)) {
                temporal += urlParameter.substring(0, position);
                var extract = urlParameter.substring(position, position + 3);
                try {
                    temporal += decodeURIComponent(extract);
                }
                catch (e) {
                    temporal += extract;
                }
            }
            return temporal + urlParameter;
        };
        Utils.imageFlatten = function (images) {
            var _this = this;
            var result = [];
            if ('url' in images && 'altimagetext' in images) {
                return [images];
            }
            Object.getOwnPropertyNames(images).forEach(function (key) {
                if (_.isArray(images[key])) {
                    result.push(images[key]);
                }
                else {
                    result.push(_this.imageFlatten(images[key]));
                }
            });
            return _.flatten(result);
        };
        return Utils;
    }());
    exports.Utils = Utils;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.GiftCertificatesList.Button.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.GiftCertificatesList.Button.View", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificate.GiftCertificatesList.Configuration", "SuiteCommerce.GiftCertificate.Common.FeedbackMessageManager", "gift_certificates_list_row_button.tpl"], function (require, exports, Backbone_1, GiftCertificatesList_Configuration_1, FeedbackMessageManager_1, giftCertificatesButtonTpl) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GiftCertificateButtonView = /** @class */ (function (_super) {
        __extends(GiftCertificateButtonView, _super);
        function GiftCertificateButtonView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = giftCertificatesButtonTpl;
            _this.isRemoved = false;
            _this.events = {
                'click [data-action="remove-gift-certificate"]': 'removeGiftCertificate',
            };
            _this.parentCollection = options.parentCollection;
            return _this;
        }
        GiftCertificateButtonView.prototype.removeGiftCertificate = function () {
            var _this = this;
            this.isRemoved = !this.isRemoved;
            var requestObj;
            if (this.isRemoved) {
                requestObj = this.model.destroy({}).done(function () {
                    FeedbackMessageManager_1.FeedbackMessageManager.triggerMessageEvent({
                        context: _this,
                        type: FeedbackMessageManager_1.FeedbackMessageType.SUCCESS,
                        message: GiftCertificatesList_Configuration_1.GiftCertificatesListConfiguration.codeRemovedMessage,
                    });
                });
            }
            else {
                requestObj = this.model.save({}).done(function () {
                    FeedbackMessageManager_1.FeedbackMessageManager.triggerRemoveMessageEvent(_this);
                    _this.parentCollection.add(requestObj.responseJSON, { silent: true });
                });
            }
            this.render();
        };
        GiftCertificateButtonView.prototype.getContext = function () {
            return {
                isRemoved: this.isRemoved,
                removeLabel: GiftCertificatesList_Configuration_1.GiftCertificatesListConfiguration.tableRemoveLabel,
                undoLabel: GiftCertificatesList_Configuration_1.GiftCertificatesListConfiguration.tableUndoLabel,
            };
        };
        return GiftCertificateButtonView;
    }(Backbone_1.View));
    exports.GiftCertificateButtonView = GiftCertificateButtonView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Group.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.Group.Collection", ["require", "exports", "SuiteCommerce.GiftCertificate.Common.DependencyProvider", "SuiteCommerce.GiftCertificate.Group.Model", "SuiteCommerce.GiftCertificates.Collection", "SuiteCommerce.GiftCertificate.Model"], function (require, exports, DependencyProvider_1, Group_Model_1, GiftCertificate_Collection_1, GiftCertificate_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GroupCollection = /** @class */ (function (_super) {
        __extends(GroupCollection, _super);
        function GroupCollection(models, options) {
            var _this = _super.call(this, models, options) || this;
            _this.url = '/app/site/hosting/scriptlet.nl?script=customscript_ns_sc_sl_gift_cert_groups' +
                '&deploy=customdeploy_ns_sc_sl_gift_cert_groups';
            _this.itemToGroupMap = {};
            if (models) {
                _this.generateItemToGroupMap(models);
            }
            return _this;
        }
        GroupCollection.prototype.getGroupById = function (id) {
            return this.findWhere({ recordid: id });
        };
        GroupCollection.prototype.parse = function (rawData) {
            var models = [];
            rawData.forEach(function (rawGroup) {
                var giftCertificates = [];
                rawGroup.giftCertificates.forEach(function (giftCertificateData) {
                    var giftCertificate = new GiftCertificate_Model_1.GiftCertificateModel(giftCertificateData);
                    giftCertificates.push(giftCertificate);
                });
                var groupModel = new Group_Model_1.GroupModel({
                    giftCertificates: new GiftCertificate_Collection_1.GiftCertificateCollection(giftCertificates),
                    isinactive: rawGroup.isinactive,
                    name: rawGroup.name,
                    recordid: rawGroup.recordid,
                });
                models.push(groupModel);
            });
            this.generateItemToGroupMap(models);
            return models;
        };
        GroupCollection.prototype.generateItemToGroupMap = function (models) {
            var _this = this;
            models.forEach(function (group) {
                group.giftCertificates.forEach(function (giftCertificate) {
                    _this.itemToGroupMap[giftCertificate.id] = group.id;
                });
            });
        };
        return GroupCollection;
    }(DependencyProvider_1.BackboneCachedCollection));
    exports.GroupCollection = GroupCollection;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Group.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.Group.Model", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificates.Collection"], function (require, exports, Backbone_1, GiftCertificate_Collection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GroupModel = /** @class */ (function (_super) {
        __extends(GroupModel, _super);
        function GroupModel(attributes, options) {
            var _this = _super.call(this, attributes, options) || this;
            if (attributes) {
                attributes.giftCertificates.forEach(function (giftCertificate) {
                    if (!_this.maxPrice || giftCertificate.price > _this.maxPrice) {
                        _this.maxPrice = giftCertificate.price;
                        _this.maxPriceStr = giftCertificate.priceStr;
                    }
                    if (!_this.minPrice || giftCertificate.price < _this.minPrice) {
                        _this.minPrice = giftCertificate.price;
                        _this.minPriceStr = giftCertificate.priceStr;
                    }
                });
            }
            return _this;
        }
        Object.defineProperty(GroupModel.prototype, "giftCertificates", {
            get: function () {
                return this.get('giftCertificates');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupModel.prototype, "id", {
            get: function () {
                return this.get('recordid');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupModel.prototype, "isInactive", {
            get: function () {
                return this.get('isinactive');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GroupModel.prototype, "name", {
            get: function () {
                return this.get('name');
            },
            enumerable: true,
            configurable: true
        });
        GroupModel.prototype.parse = function (rawData) {
            var parsedData = {
                recordid: rawData.recordid,
                name: rawData.name,
                isinactive: rawData.isinactive,
                giftCertificates: null,
            };
            parsedData.giftCertificates = new GiftCertificate_Collection_1.GiftCertificateCollection(rawData.giftCertificates);
            return parsedData;
        };
        return GroupModel;
    }(Backbone_1.Model));
    exports.GroupModel = GroupModel;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Instrumentation.FallbackLogger"/>
define("SuiteCommerce.GiftCertificate.Instrumentation.FallbackLogger", ["require", "exports", "jQuery", "Url"], function (require, exports, jQuery, Url) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var queueErrorTemp = [];
    var queueInfoTemp = [];
    var FallbackLogger = /** @class */ (function () {
        function FallbackLogger(options) {
            var _this = this;
            this.options = options;
            if (!this.isEnabled()) {
                return;
            }
            this.isWaiting = false;
            setInterval(function () {
                _this.processQueues(true);
            }, 60000);
            window.addEventListener('beforeunload', function () {
                _this.processQueues(false);
            });
        }
        Object.defineProperty(FallbackLogger.prototype, "environment", {
            get: function () {
                if (this.options.environment) {
                    return this.options.environment;
                }
                console.error('Please initialize instrumentation with the Environment Component.');
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FallbackLogger.prototype, "queueErrorName", {
            get: function () {
                return "queueError" + this.options.queueNameSuffix;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FallbackLogger.prototype, "queueInfoName", {
            get: function () {
                return "queueInfo" + this.options.queueNameSuffix;
            },
            enumerable: true,
            configurable: true
        });
        FallbackLogger.prototype.info = function (obj) {
            if (!this.isEnabled()) {
                return;
            }
            var objWrapper = obj;
            objWrapper.suiteScriptAppVersion = SC.ENVIRONMENT.RELEASE_METADATA.version;
            objWrapper.message = "clientSideLogDateTime: " + (new Date()).toISOString();
            if (this.isWaiting) {
                queueInfoTemp.push(objWrapper);
            }
            else {
                var queueInfo = JSON.parse(localStorage.getItem(this.queueInfoName)) || [];
                queueInfo.push(objWrapper);
                localStorage.setItem(this.queueInfoName, JSON.stringify(queueInfo));
            }
        };
        FallbackLogger.prototype.error = function (obj) {
            if (!this.isEnabled()) {
                return;
            }
            var objWrapper = obj;
            objWrapper.suiteScriptAppVersion = SC.ENVIRONMENT.RELEASE_METADATA.version;
            objWrapper.message = "clientSideLogDateTime: " + (new Date()).toISOString();
            if (this.isWaiting) {
                queueErrorTemp.push(objWrapper);
            }
            else {
                var queueError = JSON.parse(localStorage.getItem(this.queueErrorName)) || [];
                queueError.push(objWrapper);
                localStorage.setItem(this.queueErrorName, JSON.stringify(queueError));
            }
        };
        FallbackLogger.prototype.processQueues = function (isAsync) {
            if (!this.isEnabled()) {
                return;
            }
            var parsedURL = new Url().parse(SC.ENVIRONMENT.baseUrl);
            var product = SC.ENVIRONMENT.BuildTimeInf.product;
            var url = parsedURL.schema + "://" + parsedURL.netLoc + "/app/site/hosting/scriptlet.nl"
                + ("?script=customscript_" + product.toLowerCase() + "_loggerendpoint")
                + ("&deploy=customdeploy_" + product.toLowerCase() + "_loggerendpoint");
            var queueError = JSON.parse(localStorage.getItem(this.queueErrorName));
            var queueInfo = JSON.parse(localStorage.getItem(this.queueInfoName));
            if ((queueInfo && queueInfo.length > 0) || (queueError && queueError.length > 0)) {
                this.isWaiting = true;
                var data = { type: product, info: queueInfo, error: queueError };
                if (navigator.sendBeacon) {
                    this.sendDataThroughUserAgent(url, data);
                }
                else {
                    this.sendDataThroughAjaxRequest(url, data, isAsync);
                }
            }
        };
        FallbackLogger.prototype.isEnabled = function () {
            return !this.environment.isPageGenerator();
        };
        FallbackLogger.prototype.sendDataThroughUserAgent = function (url, data) {
            var successfullyTransfer = navigator.sendBeacon(url, JSON.stringify(data));
            if (successfullyTransfer) {
                this.clearQueues();
            }
            else {
                this.appendTemp();
            }
        };
        FallbackLogger.prototype.sendDataThroughAjaxRequest = function (url, data, isAsync) {
            var _this = this;
            jQuery.ajax({
                url: url,
                data: JSON.stringify(data),
                type: 'POST',
                async: isAsync,
            }).done(function () { return _this.clearQueues(); })
                .fail(function () { return _this.appendTemp(); });
        };
        FallbackLogger.prototype.clearQueues = function () {
            localStorage.setItem(this.queueErrorName, JSON.stringify(queueErrorTemp));
            localStorage.setItem(this.queueInfoName, JSON.stringify(queueInfoTemp));
            queueErrorTemp.length = 0;
            queueInfoTemp.length = 0;
            this.isWaiting = false;
        };
        FallbackLogger.prototype.appendTemp = function () {
            var queueErrorStr = localStorage.getItem(this.queueErrorName);
            var queueInfoStr = localStorage.getItem(this.queueInfoName);
            if (queueErrorTemp.length > 0) {
                var queueError = queueErrorStr == null ? [] : JSON.parse(queueErrorStr);
                localStorage.setItem(this.queueErrorName, JSON.stringify(queueError.concat(queueErrorTemp)));
            }
            if (queueInfoTemp.length > 0) {
                var queueInfo = queueInfoStr == null ? [] : JSON.parse(queueInfoStr);
                localStorage.setItem(this.queueInfoName, JSON.stringify(queueInfo.concat(queueInfoTemp)));
            }
            this.isWaiting = false;
        };
        return FallbackLogger;
    }());
    exports.FallbackLogger = FallbackLogger;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Instrumentation.Log"/>
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
define("SuiteCommerce.GiftCertificate.Instrumentation.Log", ["require", "exports", "SuiteCommerce.GiftCertificate.Instrumentation.Logger"], function (require, exports, Instrumentation_Logger_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogSeverity;
    (function (LogSeverity) {
        LogSeverity["INFO"] = "info";
        LogSeverity["ERROR"] = "error";
    })(LogSeverity = exports.LogSeverity || (exports.LogSeverity = {}));
    var Log = /** @class */ (function () {
        function Log(attributes) {
            if (attributes === void 0) { attributes = { label: '' }; }
            this.setInitialAttributes(attributes);
        }
        Log.prototype.setInitialAttributes = function (attributes) {
            var defaultAttributes = {
                label: null,
                timer: {},
                severity: LogSeverity.INFO,
            };
            var _a = __assign(__assign({}, defaultAttributes), attributes), label = _a.label, parametersToSubmit = _a.parametersToSubmit, timer = _a.timer, severity = _a.severity;
            this.label = label;
            this.parametersToSubmit = parametersToSubmit;
            this.timer = timer;
            this.severity = severity;
        };
        Log.prototype.startTimer = function () {
            this.timer.startTime = this.getTimestamp();
        };
        Log.prototype.endTimer = function () {
            this.timer.endTime = this.getTimestamp();
        };
        Log.prototype.getTimestamp = function () {
            if (!this.isOldInternetExplorer()) {
                return performance.now() || Date.now();
            }
            return Date.now();
        };
        Log.prototype.getElapsedTimeForTimer = function () {
            var timer = this.timer;
            if (timer.startTime && timer.endTime) {
                if (timer.startTime > timer.endTime) {
                    console.warn('Start time should be minor that end time in timer');
                    return null;
                }
                return timer.endTime - timer.startTime;
            }
            if (!timer.startTime)
                console.warn('The Start time is not defined');
            if (!timer.endTime)
                console.warn('The End time is not defined');
            return null;
        };
        Log.prototype.setParameters = function (data) {
            var _this = this;
            Object.keys(data).forEach(function (parameter) {
                _this.setParameter(parameter, data[parameter]);
            });
        };
        Log.prototype.setParameter = function (parameter, value) {
            var logData = this.parametersToSubmit;
            logData[parameter] = value;
            this.parametersToSubmit = logData;
        };
        Log.prototype.submit = function () {
            if (!this.isOldInternetExplorer()) {
                switch (this.severity) {
                    case LogSeverity.ERROR:
                        this.submitAsError();
                        break;
                    case LogSeverity.INFO:
                    default:
                        this.submitAsInfo();
                }
            }
        };
        Log.prototype.isOldInternetExplorer = function () {
            return !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g);
        };
        Log.prototype.submitAsError = function () {
            Instrumentation_Logger_1.Logger.getLogger().error(this.parametersToSubmit);
        };
        Log.prototype.submitAsInfo = function () {
            Instrumentation_Logger_1.Logger.getLogger().info(this.parametersToSubmit);
        };
        return Log;
    }());
    exports.Log = Log;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Instrumentation.Logger"/>
define("SuiteCommerce.GiftCertificate.Instrumentation.Logger", ["require", "exports", "SuiteCommerce.GiftCertificate.Instrumentation.FallbackLogger", "SuiteCommerce.GiftCertificate.Instrumentation.MockAppender"], function (require, exports, Instrumentation_FallbackLogger_1, Instrumentation_MockAppender_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Logger = /** @class */ (function () {
        function Logger() {
        }
        Logger.getLogger = function () {
            this.instance = this.instance || this.buildLoggerInstance();
            return this.instance;
        };
        Logger.buildLoggerInstance = function () {
            var _a;
            try {
                // @ts-ignore
                var LoggersModule = require('Loggers').Loggers;
                // @ts-ignore
                var elasticAppender = require('Loggers.Appender.ElasticLogger')
                    .LoggersAppenderElasticLogger.getInstance();
                // Just for test purposes in local environments: the output of MockApppender is the browser console.
                var mockAppender = Instrumentation_MockAppender_1.MockAppender.getInstance();
                // @ts-ignore
                var configurationModule = require('Loggers.Configuration');
                var loggerName = "CommerceExtensions" + Logger.options.queueNameSuffix;
                LoggersModule.setConfiguration((_a = {},
                    _a[loggerName] = {
                        log: [
                            { profile: configurationModule.prod, appenders: [elasticAppender] },
                            { profile: configurationModule.dev, appenders: [mockAppender] }
                        ],
                        actions: {},
                        loggers: {},
                    },
                    _a));
                return LoggersModule.getLogger(loggerName);
            }
            catch (e) {
                return new Instrumentation_FallbackLogger_1.FallbackLogger(this.options);
            }
        };
        return Logger;
    }());
    exports.Logger = Logger;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Instrumentation.MockAppender"/>
define("SuiteCommerce.GiftCertificate.Instrumentation.MockAppender", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MockAppender = /** @class */ (function () {
        function MockAppender() {
        }
        MockAppender.prototype.info = function (data) {
            console.info('MockAppender - Info', data);
        };
        MockAppender.prototype.error = function (data) {
            console.error('MockAppender - Error', data);
        };
        MockAppender.prototype.ready = function () {
            return true;
        };
        MockAppender.getInstance = function () {
            if (!MockAppender.instance) {
                MockAppender.instance = new MockAppender();
            }
            return MockAppender.instance;
        };
        MockAppender.prototype.start = function (action, options) {
            return options;
        };
        MockAppender.prototype.end = function (startOptions, options) { };
        return MockAppender;
    }());
    exports.MockAppender = MockAppender;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Instrumentation"/>
define("SuiteCommerce.GiftCertificate.Instrumentation", ["require", "exports", "underscore", "SuiteCommerce.GiftCertificate.Instrumentation.Logger", "SuiteCommerce.GiftCertificate.Instrumentation.Log"], function (require, exports, _, Instrumentation_Logger_1, Instrumentation_Log_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var logs = [];
    exports.default = {
        initialize: function (options) {
            Instrumentation_Logger_1.Logger.options = options;
        },
        getLog: function (logLabel) {
            return this.getLogModelByLabel(logLabel) || this.registerNewLog(logLabel);
        },
        getLogModelByLabel: function (label) {
            return _(logs).findWhere({ label: label });
        },
        registerNewLog: function (label) {
            var defaultParameters = _.clone(Instrumentation_Logger_1.Logger.options.defaultParameters);
            var log = new Instrumentation_Log_1.Log({ label: label, parametersToSubmit: defaultParameters });
            logs.push(log);
            return log;
        },
        setParameterForAllLogs: function (parameter, value) {
            logs.forEach(function (log) {
                log.setParameter(parameter, value);
            });
        },
        setParametersForAllLogs: function (data) {
            logs.forEach(function (log) {
                log.setParameters(data);
            });
        },
        submitLogs: function () {
            logs.forEach(function (log) {
                log.submit();
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Item.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.Item.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ItemModel = /** @class */ (function (_super) {
        __extends(ItemModel, _super);
        function ItemModel(attributes, options) {
            var _this = _super.call(this, attributes, options) || this;
            if (attributes.id) {
                _this.set('internalid', attributes.id);
            }
            return _this;
        }
        Object.defineProperty(ItemModel.prototype, "id", {
            get: function () {
                return this.get('internalid');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemModel.prototype, "price", {
            get: function () {
                return parseInt(this.get('onlinecustomerprice'), 10);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemModel.prototype, "priceStr", {
            get: function () {
                return this.get('onlinecustomerprice');
            },
            enumerable: true,
            configurable: true
        });
        return ItemModel;
    }(Backbone_1.Model));
    exports.ItemModel = ItemModel;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.LandingPage.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.LandingPage.Configuration", ["require", "exports", "SuiteCommerce.GiftCertificate.Utils.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LandingPageConfiguration = /** @class */ (function (_super) {
        __extends(LandingPageConfiguration, _super);
        function LandingPageConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LandingPageConfiguration, "landingPageTitle", {
            get: function () {
                return this.get('giftcertbalance.title');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LandingPageConfiguration, "landingPageRoute", {
            get: function () {
                return this.get('giftcertbalance.route');
            },
            enumerable: true,
            configurable: true
        });
        return LandingPageConfiguration;
    }(Configuration_1.Configuration));
    exports.LandingPageConfiguration = LandingPageConfiguration;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.LandingPage.Router"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.LandingPage.Router", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificate.ValueCheck.Model", "SuiteCommerce.GiftCertificate.LandingPage.Configuration", "SuiteCommerce.GiftCertificate.LandingPage.View"], function (require, exports, Backbone_1, ValueCheck_Model_1, LandingPage_Configuration_1, LandingPage_View_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LandingPageRouter = /** @class */ (function (_super) {
        __extends(LandingPageRouter, _super);
        function LandingPageRouter(options) {
            var _this = _super.call(this, options) || this;
            _this.application = options.application;
            _this.model = new ValueCheck_Model_1.ValueCheckModel({});
            return _this;
        }
        Object.defineProperty(LandingPageRouter.prototype, "routes", {
            get: function () {
                var dynamicRouteObj = {};
                dynamicRouteObj[this.getFormUrl()] = 'showGiftCertificateMain';
                return dynamicRouteObj;
            },
            enumerable: true,
            configurable: true
        });
        LandingPageRouter.prototype.getFormUrl = function () {
            return LandingPage_Configuration_1.LandingPageConfiguration.landingPageRoute;
        };
        LandingPageRouter.prototype.getResultUrl = function () {
            return this.getFormUrl() + "/result";
        };
        LandingPageRouter.prototype.showGiftCertificateMain = function () {
            var view = new LandingPage_View_1.LandingPageView({
                application: this.application,
                container: this.application,
                model: this.model,
            });
            view.showContent();
        };
        return LandingPageRouter;
    }(Backbone_1.Router));
    exports.LandingPageRouter = LandingPageRouter;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.LandingPage.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.LandingPage.View", ["require", "exports", "SuiteCommerce.GiftCertificate.Common.Utils", "Backbone", "SuiteCommerce.GiftCertificate.Common.DependencyProvider", "SuiteCommerce.GiftCertificate.LandingPage.Configuration", "SuiteCommerce.GiftCertificate.ValueCheck.Model", "SuiteCommerce.GiftCertificate.ValueCheck.View", "SuiteCommerce.GiftCertificate.Common.FeedbackMessageManager", "giftcertificate_landing_page.tpl"], function (require, exports, Utils_1, Backbone_1, DependencyProvider_1, LandingPage_Configuration_1, ValueCheck_Model_1, ValueCheck_View_1, FeedbackMessageManager_1, template) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LandingPageView = /** @class */ (function (_super) {
        __extends(LandingPageView, _super);
        function LandingPageView(options) {
            var _this = _super.call(this, options) || this;
            _this.type = options.type;
            _this.container = options.container;
            _this.template = template;
            _this.title = LandingPage_Configuration_1.LandingPageConfiguration.landingPageTitle;
            return _this;
        }
        Object.defineProperty(LandingPageView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'Breadcrumb.View': function () {
                        var pages = [
                            {
                                text: Utils_1.Utils.translate('Home'),
                                href: '/',
                            },
                            {
                                text: LandingPage_Configuration_1.LandingPageConfiguration.landingPageTitle,
                                href: LandingPage_Configuration_1.LandingPageConfiguration.landingPageRoute,
                            },
                        ];
                        return new DependencyProvider_1.GlobalViewsBreadcrumbView({ pages: pages });
                    },
                    ValueCheckView: function () {
                        var valueCheckView = new ValueCheck_View_1.ValueCheckView({
                            model: new ValueCheck_Model_1.ValueCheckModel({}),
                            container: _this.container,
                            environment: ValueCheck_View_1.ExternalEnvironment.SHOPPING,
                            title: _this.title,
                        });
                        valueCheckView.on(FeedbackMessageManager_1.AddFeedbackMessageEvent, function (messageEvent) {
                            _this.showFeedbackMessage(messageEvent.type, messageEvent.message);
                        });
                        valueCheckView.on(FeedbackMessageManager_1.RemoveFeedbackMessageEvent, function () {
                            _this.clearFeedbackMessage();
                        });
                        return valueCheckView;
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        LandingPageView.prototype.getContext = function () {
            return {
                title: this.title,
            };
        };
        LandingPageView.prototype.showFeedbackMessage = function (type, message) {
            var placeholder = this.$('[data-view="GlobalMessagesView"]');
            var feedbackMessage = new DependencyProvider_1.GlobalViewsMessageView({
                message: message,
                type: type,
                closable: true,
            });
            placeholder.empty();
            placeholder.append(feedbackMessage.render().$el.html());
        };
        LandingPageView.prototype.clearFeedbackMessage = function () {
            var placeholder = this.$('[data-view="GlobalMessagesView"]');
            placeholder.empty();
        };
        return LandingPageView;
    }(Backbone_1.View));
    exports.LandingPageView = LandingPageView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Main.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.Main.Configuration", ["require", "exports", "SuiteCommerce.GiftCertificate.Utils.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MainConfiguration = /** @class */ (function (_super) {
        __extends(MainConfiguration, _super);
        function MainConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(MainConfiguration, "hideInventoryTypesFromFacets", {
            get: function () {
                return this.get('giftcertadvanced.hideInventoryTypesFromFacets');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainConfiguration, "enableGiftCertShopping", {
            get: function () {
                return this.get('giftcertbalance.enableGiftCertShopping');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainConfiguration, "enableGiftCertMyAccount", {
            get: function () {
                return this.get('giftcertadvanced.enableGiftCertMyAccount');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainConfiguration, "dateFormat", {
            get: function () {
                return this.get('giftcertadvanced.dateFormat');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MainConfiguration, "priceRange", {
            get: function () {
                return this.get('giftcertadvanced.priceRange');
            },
            enumerable: true,
            configurable: true
        });
        return MainConfiguration;
    }(Configuration_1.Configuration));
    exports.MainConfiguration = MainConfiguration;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Utils"/>
define("SuiteCommerce.GiftCertificate.Utils", ["require", "exports", "SuiteCommerce.GiftCertificate.Main.Configuration"], function (require, exports, Main_Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Utils = /** @class */ (function () {
        function Utils() {
        }
        Utils.formatDate = function (receivedDate) {
            var newDate = Main_Configuration_1.MainConfiguration.dateFormat;
            var monthReplaced = false;
            var date = new Date(receivedDate);
            var replaceMonth = function (monthLength, format) {
                var matched = newDate.match(monthLength);
                if (matched && !monthReplaced) {
                    monthReplaced = true;
                    return newDate.replace(monthLength, date.toLocaleString('en-us', { month: format }));
                }
                return newDate;
            };
            var ua = navigator.userAgent;
            var isOldIe = ua.indexOf('MSIE ') > -1;
            if (isOldIe) {
                return receivedDate;
            }
            newDate = newDate.replace('yyyy', date.toLocaleString('en-us', { year: 'numeric' }));
            newDate = newDate.replace('yy', date.toLocaleString('en-us', { year: '2-digit' }));
            newDate = newDate.replace('dd', date.toLocaleString('en-us', { day: '2-digit' }));
            newDate = newDate.replace('d', date.toLocaleString('en-us', { day: 'numeric' }));
            newDate = replaceMonth('mmmm', 'long');
            newDate = replaceMonth('mmm', 'short');
            newDate = replaceMonth('mm', '2-digit');
            newDate = replaceMonth('m', 'numeric');
            return newDate;
        };
        return Utils;
    }());
    exports.Utils = Utils;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.OptionTiles.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.OptionTiles.Configuration", ["require", "exports", "SuiteCommerce.GiftCertificate.Utils.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OptionTilesConfiguration = /** @class */ (function (_super) {
        __extends(OptionTilesConfiguration, _super);
        function OptionTilesConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(OptionTilesConfiguration, "itemOptionsLabel", {
            get: function () {
                return this.get('giftcertadvanced.itemOptionsLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OptionTilesConfiguration, "giftOptionButtonLabel", {
            get: function () {
                return this.get('giftcertadvanced.giftOptionButtonLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OptionTilesConfiguration, "useThumbnailInButtonLabel", {
            get: function () {
                return this.get('giftcertadvanced.useThumbnailInButtonLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OptionTilesConfiguration, "searchApiMasterOptions", {
            get: function () {
                return this.get('searchApiMasterOptions');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OptionTilesConfiguration, "groupCertificatesAsItemOptions", {
            get: function () {
                return this.get('giftcertadvanced.groupCertificatesAsItemOptions');
            },
            enumerable: true,
            configurable: true
        });
        return OptionTilesConfiguration;
    }(Configuration_1.Configuration));
    exports.OptionTilesConfiguration = OptionTilesConfiguration;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.OptionTiles.Tile.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.OptionTiles.Tile.Collection", ["require", "exports", "underscore", "SuiteCommerce.GiftCertificate.Common.Utils", "SuiteCommerce.GiftCertificate.Common.DependencyProvider", "SuiteCommerce.GiftCertificate.OptionTiles.Configuration", "SuiteCommerce.GiftCertificate.OptionTiles.Tile.Model"], function (require, exports, _, Utils_1, DependencyProvider_1, OptionTiles_Configuration_1, OptionTiles_Tile_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TileCollection = /** @class */ (function (_super) {
        __extends(TileCollection, _super);
        function TileCollection(options) {
            var _this = _super.call(this) || this;
            _this.environment = options.environment;
            _this.filters = options.filters;
            _this.url = _this.getUrl();
            _this.model = OptionTiles_Tile_Model_1.TileModel;
            _this.comparator = function (model) {
                return model.price;
            };
            return _this;
        }
        TileCollection.prototype.getUrl = function () {
            return Utils_1.Utils.addParamsToUrl('/api/items', this.getSearchApiParams());
        };
        TileCollection.prototype.getSearchApiParams = function () {
            return _({}).extend(OptionTiles_Configuration_1.OptionTilesConfiguration.searchApiMasterOptions.itemDetails, this.getSessionSearchApiParams(), this.getItemsParams());
        };
        TileCollection.prototype.getSessionSearchApiParams = function () {
            var searchApiParams = {};
            var sessionInfo = this.environment
                ? this.environment.getSession()
                : null;
            var locale = '';
            var currency = '';
            var priceLevel = '';
            if (sessionInfo) {
                locale = sessionInfo.language && sessionInfo.language.locale;
                currency = sessionInfo.currency && sessionInfo.currency.code;
                priceLevel = sessionInfo.priceLevel;
            }
            var localeTokens;
            var language;
            var country;
            if (locale.indexOf('_') >= 0) {
                localeTokens = locale.split('_');
                language = localeTokens[0];
                country = localeTokens[1];
            }
            else {
                language = locale;
            }
            // SET API PARAMS
            if (language) {
                searchApiParams.language = language;
            }
            if (country) {
                searchApiParams.country = country;
            }
            if (currency) {
                searchApiParams.currency = currency;
            }
            searchApiParams.pricelevel = priceLevel;
            // No cache
            if (Utils_1.Utils.parseUrlOptions(window.location.search).nocache === 'T') {
                searchApiParams.nocache = 'T';
            }
            searchApiParams.limit = 100;
            return searchApiParams;
        };
        TileCollection.prototype.getItemsParams = function () {
            return this.filters;
        };
        TileCollection.prototype.parse = function (response) {
            return _(response.items).compact() || null;
        };
        return TileCollection;
    }(DependencyProvider_1.BackboneCachedCollection));
    exports.TileCollection = TileCollection;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.OptionTiles.Tile.CollectionView"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.OptionTiles.Tile.CollectionView", ["require", "exports", "Backbone.CollectionView", "SuiteCommerce.GiftCertificate.OptionTiles.Tile.View"], function (require, exports, BackboneCollectionView, OptionTiles_Tile_View_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TileCollectionView = /** @class */ (function (_super) {
        __extends(TileCollectionView, _super);
        function TileCollectionView(options) {
            var _this = _super.call(this, options) || this;
            _this.childView = OptionTiles_Tile_View_1.TileView;
            return _this;
        }
        return TileCollectionView;
    }(BackboneCollectionView));
    exports.TileCollectionView = TileCollectionView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.OptionTiles.Tile.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.OptionTiles.Tile.Model", ["require", "exports", "SuiteCommerce.GiftCertificate.Common.Utils", "SuiteCommerce.GiftCertificate.Common.DependencyProvider", "SuiteCommerce.GiftCertificate.OptionTiles.Configuration"], function (require, exports, Utils_1, DependencyProvider_1, OptionTiles_Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TileModel = /** @class */ (function (_super) {
        __extends(TileModel, _super);
        function TileModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TileModel.prototype, "giftCertificateGroupId", {
            get: function () {
                return this.get('custitem_ns_sc_ext_gift_cert_group_id');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileModel.prototype, "url", {
            get: function () {
                return this.get('urlcomponent') || "/product/" + this.internalId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileModel.prototype, "internalId", {
            get: function () {
                return this.get('internalid');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileModel.prototype, "name", {
            get: function () {
                return (this.get('storedisplayname2') ||
                    this.get('displayname') ||
                    this.get('itemid') ||
                    '');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileModel.prototype, "price", {
            get: function () {
                var onlinePriceDetails = this.get('onlinecustomerprice_detail');
                return onlinePriceDetails.onlinecustomerprice;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileModel.prototype, "formattedPrice", {
            get: function () {
                var onlinePriceDetails = this.get('onlinecustomerprice_detail');
                return onlinePriceDetails.onlinecustomerprice_formatted;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileModel.prototype, "label", {
            get: function () {
                var label = this.get('custitem_ns_sc_ext_options_button_lbl') ||
                    OptionTiles_Configuration_1.OptionTilesConfiguration.giftOptionButtonLabel;
                if (label) {
                    label = label.replace('[[name]]', this.name);
                    if (this.isLoginToSeePriceEnabled()) {
                        label = label.replace('[[price]]', '');
                        label.trim();
                        if (label.length === 0) {
                            label = this.name;
                        }
                    }
                    else {
                        label = label.replace('[[price]]', this.formattedPrice);
                    }
                }
                return label;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileModel.prototype, "thumbnail", {
            get: function () {
                if (this.get('itemimages_detail').thumbnail) {
                    return this.get('itemimages_detail').thumbnail;
                }
                return this.thumbnailFromAll();
            },
            enumerable: true,
            configurable: true
        });
        TileModel.prototype.isGiftCertificateItem = function () {
            return this.get('itemtype') === 'GiftCert';
        };
        TileModel.prototype.thumbnailFromAll = function () {
            var flattenedImages;
            var itemImagesDetail = this.get('itemimages_detail');
            itemImagesDetail = itemImagesDetail.media || itemImagesDetail;
            flattenedImages = Utils_1.Utils.imageFlatten(itemImagesDetail);
            if (flattenedImages.length) {
                return flattenedImages[0];
            }
            return;
        };
        TileModel.prototype.isLoginToSeePriceEnabled = function () {
            return DependencyProvider_1.ProfileModel.getInstance().hidePrices();
        };
        return TileModel;
    }(DependencyProvider_1.BackboneCachedModel));
    exports.TileModel = TileModel;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.OptionTiles.Tile.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.OptionTiles.Tile.View", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificate.OptionTiles.Configuration", "option_tile_label.tpl", "option_tile_thumbnail.tpl"], function (require, exports, Backbone_1, OptionTiles_Configuration_1, tileLabelTemplate, tileThumbnailTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TileView = /** @class */ (function (_super) {
        __extends(TileView, _super);
        function TileView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = _this.isEnabledThumbnailUsage() ? tileThumbnailTemplate : tileLabelTemplate;
            _this.isSelectedTile = options.currentGiftCertificate.internalId === _this.model.internalId;
            return _this;
        }
        TileView.prototype.getContext = function () {
            return {
                itemId: this.model.internalId,
                itemURL: this.model.url,
                isSelectedTile: this.isSelectedTile,
                tileLabel: this.model.label,
                thumbnail: this.model.thumbnail,
            };
        };
        TileView.prototype.isEnabledThumbnailUsage = function () {
            return OptionTiles_Configuration_1.OptionTilesConfiguration.useThumbnailInButtonLabel;
        };
        return TileView;
    }(Backbone_1.View));
    exports.TileView = TileView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.OptionTiles.TilesContainer.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.OptionTiles.TilesContainer.View", ["require", "exports", "underscore", "Backbone", "SuiteCommerce.GiftCertificate.Common.Utils", "SuiteCommerce.GiftCertificate.OptionTiles.Configuration", "SuiteCommerce.GiftCertificate.OptionTiles.Tile.CollectionView", "option_tiles_container.tpl", "SuiteCommerce.GiftCertificate.Instrumentation"], function (require, exports, _, Backbone_1, Utils_1, OptionTiles_Configuration_1, OptionTiles_Tile_CollectionView_1, template, Instrumentation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TilesContainerView = /** @class */ (function (_super) {
        __extends(TilesContainerView, _super);
        function TilesContainerView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = template;
            if (_this.model.isGiftCertificateItem()) {
                _this.collection.fetch().done(function () {
                    _this.collection.sort();
                    _this.render();
                });
            }
            _this.events = {
                'click [data-action="open-gift-certificate"]': 'openGiftCertificate',
            };
            return _this;
        }
        Object.defineProperty(TilesContainerView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    GiftCertificateTiles: function () {
                        return new OptionTiles_Tile_CollectionView_1.TileCollectionView({
                            collection: _this.collection,
                            childViewOptions: {
                                currentGiftCertificate: _this.model,
                            },
                        });
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        TilesContainerView.prototype.openGiftCertificate = function (event) {
            var itemUrl = this.$el.find(event.target).data('itemurl')
                || this.$el.find(event.target).parent('button').data('itemurl');
            if (itemUrl) {
                itemUrl = this.getItemUrlWithCurrentUrlParams(itemUrl);
                Backbone_1.history.navigate(itemUrl, { trigger: true });
            }
            this.logClickOnTile();
        };
        TilesContainerView.prototype.logClickOnTile = function () {
            var clickOnTailLog = Instrumentation_1.default.getLog('clickOnTailLog');
            clickOnTailLog.setParameters({
                activity: 'Click on Option Tile button',
            });
            clickOnTailLog.submit();
        };
        TilesContainerView.prototype.getItemUrlWithCurrentUrlParams = function (itemUrl) {
            var giftCertificateFormFieldsSelected = _.pick(Utils_1.Utils.parseUrlOptions(location.href), 'from', 'to', 'to-email', 'message');
            return Utils_1.Utils.addParamsToUrl(itemUrl, giftCertificateFormFieldsSelected);
        };
        TilesContainerView.prototype.getContext = function () {
            return {
                giftCertificateOptionsLabel: OptionTiles_Configuration_1.OptionTilesConfiguration.itemOptionsLabel,
            };
        };
        return TilesContainerView;
    }(Backbone_1.View));
    exports.TilesContainerView = TilesContainerView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.OptionTiles"/>
define("SuiteCommerce.GiftCertificate.OptionTiles", ["require", "exports", "underscore", "SuiteCommerce.GiftCertificate.Utils.Configuration"], function (require, exports, _, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var OptionTiles = /** @class */ (function () {
        function OptionTiles() {
        }
        OptionTiles.excludeGiftCertificatesFromSearch = function () {
            var searchApiMasterOptions = Configuration_1.Configuration.getSearchApiMasterOptions();
            searchApiMasterOptions.CmsAdapterSearch.custitem_ns_sc_ext_only_pdp = false;
            searchApiMasterOptions.Facets.custitem_ns_sc_ext_only_pdp = false;
            searchApiMasterOptions.itemsSearcher.custitem_ns_sc_ext_only_pdp = false;
            searchApiMasterOptions.merchandisingZone.custitem_ns_sc_ext_only_pdp = false;
            searchApiMasterOptions.relatedItems.custitem_ns_sc_ext_only_pdp = false;
            searchApiMasterOptions.typeAhead.custitem_ns_sc_ext_only_pdp = false;
        };
        OptionTiles.injectInVisualComponent = function (visualComponent, options) {
            _.each(options.viewsToInject, function (viewName) {
                visualComponent.addChildViews(viewName, options.childViewConstructor);
            });
        };
        return OptionTiles;
    }());
    exports.OptionTiles = OptionTiles;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.PDP"/>
define("SuiteCommerce.GiftCertificate.PDP", ["require", "exports", "SuiteCommerce.GiftCertificate.OptionTiles.Configuration", "SuiteCommerce.GiftCertificate.OptionTiles", "SuiteCommerce.GiftCertificate.OptionTiles.Tile.Collection", "SuiteCommerce.GiftCertificate.OptionTiles.Tile.Model", "SuiteCommerce.GiftCertificate.OptionTiles.TilesContainer.View"], function (require, exports, OptionTiles_Configuration_1, OptionTiles_1, OptionTiles_Tile_Collection_1, OptionTiles_Tile_Model_1, OptionTiles_TilesContainer_View_1) {
    "use strict";
    return {
        mountToApp: function (container) {
            if (this.isEnabledGroupCertificatesAsItemOptions()) {
                OptionTiles_1.OptionTiles.excludeGiftCertificatesFromSearch();
                this.mountOptionTilesComponent(container.getComponent('PDP'), container.getComponent('Environment'));
            }
        },
        isEnabledGroupCertificatesAsItemOptions: function () {
            return OptionTiles_Configuration_1.OptionTilesConfiguration.groupCertificatesAsItemOptions;
        },
        mountOptionTilesComponent: function (pdp, environment) {
            var childViewConstructor = {
                'Product.Options': {
                    'GiftCertificate.Tiles': {
                        childViewIndex: 1,
                        childViewConstructor: function () {
                            var tileModel = new OptionTiles_Tile_Model_1.TileModel(pdp.getItemInfo().item);
                            if (tileModel.isGiftCertificateItem()) {
                                return new OptionTiles_TilesContainer_View_1.TilesContainerView({
                                    model: tileModel,
                                    collection: new OptionTiles_Tile_Collection_1.TileCollection({
                                        environment: environment,
                                        filters: {
                                            itemtype: 'GiftCert',
                                            custitem_ns_sc_ext_gift_cert_group_id: tileModel.giftCertificateGroupId,
                                        },
                                    }),
                                });
                            }
                        },
                    },
                },
            };
            var viewsToInject = [pdp.PDP_FULL_VIEW];
            OptionTiles_1.OptionTiles.injectInVisualComponent(pdp, {
                childViewConstructor: childViewConstructor,
                viewsToInject: viewsToInject,
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.GiftCertificate.PLP.Group.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.PLP.Group.View", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificate.Item.Model", "SuiteCommerce.GiftCertificate.Main.Configuration"], function (require, exports, Backbone_1, Item_Model_1, Main_Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PLPGroupView = /** @class */ (function (_super) {
        __extends(PLPGroupView, _super);
        function PLPGroupView(options) {
            var _this = _super.call(this, options) || this;
            _this.contextDataRequest = ['item'];
            _this.template = function () { return ''; };
            _this.groupsCollection = options.groupsCollection;
            _this.environment = options.environment;
            options.PLP.on('afterShowContent', function () {
                if (_this.matchingGroup) {
                    _this.modifyCellData(_this.matchingGroup);
                }
            });
            return _this;
        }
        PLPGroupView.prototype.getContext = function () {
            if (this.contextData.item) {
                var item = this.getItemData();
                this.matchingGroup = this.findMatchingGroup(item);
            }
        };
        PLPGroupView.prototype.getItemData = function () {
            var itemData = this.contextData.item();
            return new Item_Model_1.ItemModel(itemData);
        };
        PLPGroupView.prototype.findMatchingGroup = function (item) {
            var matchingGroupId = this.groupsCollection.itemToGroupMap[item.id];
            if (matchingGroupId) {
                return this.groupsCollection.getGroupById(matchingGroupId);
            }
        };
        PLPGroupView.prototype.modifyCellData = function (group) {
            var cell = this.$el.parents('.facets-item-cell-grid');
            this.removeQuickViewButton(cell);
            this.modifyTitle(cell, group.name);
            if (group.minPrice !== group.maxPrice) {
                this.modifyPrice(cell, group.minPriceStr, group.maxPriceStr);
            }
        };
        PLPGroupView.prototype.modifyTitle = function (cell, newTitle) {
            var titleElement = cell.find('.facets-item-cell-grid-title');
            titleElement.html(newTitle);
        };
        PLPGroupView.prototype.modifyPrice = function (cell, minPrice, maxPrice) {
            var priceElement = cell.find('.product-views-price-lead');
            var formattedMinPrice = this.formatPrice(minPrice);
            var formattedMaxPrice = this.formatPrice(maxPrice);
            var priceRange = Main_Configuration_1.MainConfiguration.priceRange;
            if (priceRange) {
                priceRange = priceRange.replace('[[minPrice]]', formattedMinPrice);
                priceRange = priceRange.replace('[[maxPrice]]', formattedMaxPrice);
            }
            priceElement.html(priceRange);
        };
        PLPGroupView.prototype.formatPrice = function (value) {
            var symbol;
            if (this.environment && this.environment.getSession() && this.environment.getSession().currency) {
                symbol = this.environment.getSession().currency.symbol;
            }
            return "" + symbol + value;
        };
        PLPGroupView.prototype.removeQuickViewButton = function (parent) {
            var quickViewElement = parent.find('.facets-item-cell-grid-quick-view-wrapper');
            quickViewElement.remove();
        };
        return PLPGroupView;
    }(Backbone_1.View));
    exports.PLPGroupView = PLPGroupView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.PLP"/>
define("SuiteCommerce.GiftCertificate.PLP", ["require", "exports", "SuiteCommerce.GiftCertificate.OptionTiles.Configuration", "SuiteCommerce.GiftCertificate.PLP.Group.View", "SuiteCommerce.GiftCertificate.Group.Collection", "SuiteCommerce.GiftCertificate.Instrumentation"], function (require, exports, OptionTiles_Configuration_1, PLP_Group_View_1, Group_Collection_1, Instrumentation_1) {
    "use strict";
    return {
        mountToApp: function (container) {
            if (OptionTiles_Configuration_1.OptionTilesConfiguration.groupCertificatesAsItemOptions) {
                var PLP = container.getComponent('PLP');
                var groupsCollection = this.getGroups(PLP);
                var environment = container.getComponent('Environment');
                this.addPLPChildView(PLP, groupsCollection, environment);
            }
        },
        getGroups: function (PLP) {
            var _this = this;
            var groupsCollection = new Group_Collection_1.GroupCollection();
            PLP.on('beforeShowContent', function () { return groupsCollection.fetch().done(function () {
                groupsCollection.each(function (group) {
                    _this.registerLogForGiftCertificatesInGroup(group);
                });
            }); });
            return groupsCollection;
        },
        registerLogForGiftCertificatesInGroup: function (group) {
            if (group.giftCertificates.size() > 0) {
                var giftCertificatesByGroupLog = Instrumentation_1.default.getLog('giftCertificatesByGroupLog');
                giftCertificatesByGroupLog.setParameters({
                    activity: 'Gift Certificates quantity by group',
                    instanceCount: group.giftCertificates.size(),
                });
                giftCertificatesByGroupLog.submit();
            }
        },
        addPLPChildView: function (PLP, groupsCollection, environment) {
            PLP.addChildView('StockDescription', function () {
                return new PLP_Group_View_1.PLPGroupView({
                    PLP: PLP,
                    groupsCollection: groupsCollection,
                    environment: environment,
                });
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.GiftCertificate.ValueCheck.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.ValueCheck.Configuration", ["require", "exports", "SuiteCommerce.GiftCertificate.Utils.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ValueCheckConfiguration = /** @class */ (function (_super) {
        __extends(ValueCheckConfiguration, _super);
        function ValueCheckConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ValueCheckConfiguration, "invalidCodeMessage", {
            get: function () {
                return this.get('giftcertbalance.invalidCodeMessage');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "inactiveCodeMessage", {
            get: function () {
                return this.get('giftcertbalance.inactiveCodeMessage');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "labelText", {
            get: function () {
                return this.get('giftcertbalance.labelText');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "buttonText", {
            get: function () {
                return this.get('giftcertbalance.buttonText');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "saveButtonText", {
            get: function () {
                return this.get('giftcertbalance.saveButtonText');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "placeholderText", {
            get: function () {
                return this.get('giftcertbalance.placeholderText');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "helpText", {
            get: function () {
                return this.get('giftcertbalance.helpText');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "inputFieldMinLength", {
            get: function () {
                return this.get('giftcertbalance.inputFieldMinLength');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "inputFieldMaxLength", {
            get: function () {
                return this.get('giftcertbalance.inputFieldMaxLength');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "expiredCodeMessage", {
            get: function () {
                return this.get('giftcertbalance.expiredCodeMessage');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "remainingBalanceLabel", {
            get: function () {
                return this.get('giftcertbalance.remainingBalanceLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "giftCertificateCodeLabel", {
            get: function () {
                return this.get('giftcertbalance.giftCertificateCodeLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "codeExpiredLabel", {
            get: function () {
                return this.get('giftcertbalance.codeExpiredLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "expiryDateLabel", {
            get: function () {
                return this.get('giftcertbalance.expiryDateLabel');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "invalidCodeFieldHelp", {
            get: function () {
                return this.get('giftcertbalance.invalidCodeFieldHelp');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "codeSavedMessage", {
            get: function () {
                return this.get('giftcertadvanced.codeSavedMessage');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "codeDuplicatedMessage", {
            get: function () {
                return this.get('giftcertadvanced.codeDuplicatedMessage');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "codeExpiredMessage", {
            get: function () {
                return this.get('giftcertadvanced.codeExpiredMessage');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ValueCheckConfiguration, "generalWarning", {
            get: function () {
                return this.get('giftcertadvanced.generalWarning');
            },
            enumerable: true,
            configurable: true
        });
        return ValueCheckConfiguration;
    }(Configuration_1.Configuration));
    exports.ValueCheckConfiguration = ValueCheckConfiguration;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.ValueCheck.Form.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.ValueCheck.Form.View", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificate.Instrumentation", "SuiteCommerce.GiftCertificate.Main.Configuration", "SuiteCommerce.GiftCertificate.ValueCheck.Configuration", "SuiteCommerce.GiftCertificate.ValueCheck.Model", "value_check_form.tpl"], function (require, exports, Backbone_1, Instrumentation_1, Main_Configuration_1, ValueCheck_Configuration_1, ValueCheck_Model_1, template) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValueCheckModelSubmittedEvent = 'ValueCheckModelSubmitted';
    exports.ValueCheckModelSubmittingErrorEvent = 'ValueCheckModelSubmittingErrorEvent';
    var ValueCheckFormView = /** @class */ (function (_super) {
        __extends(ValueCheckFormView, _super);
        function ValueCheckFormView(options) {
            var _this = _super.call(this, options) || this;
            _this.showFeedbackMessages = true;
            _this.events = {
                'click button[data-action="gift-certificate-save"]': 'saveGiftCertificate',
                'click button[data-action="gift-certificate-get"]': 'getGiftCertificateDetail',
                'mousedown a[data-action="gift-certificate-save"]': 'setupNavigationToMyAccount',
                'submit form': 'submitForm',
            };
            _this.application = options.application;
            _this.template = template;
            _this.showFeedbackMessages = options.showFeedbackMessages;
            _this.showAddToMyAccountButtonAsLink =
                options.showAddToMyAccountButtonAsLink;
            _this.displayedInShopping = options.displayedInShopping || false;
            _this.displayedInCheckout = options.displayedInCheckout || false;
            _this.displayedInMyAccount = options.displayedInMyAccount || false;
            Backbone_1.Validation.bind(_this);
            if (_this.model.get('giftcertcode')) {
                _this.model.set('hasDefaultCode', true);
            }
            return _this;
        }
        ValueCheckFormView.prototype.submitForm = function (event) {
            event.preventDefault();
        };
        ValueCheckFormView.prototype.getGiftCertificateDetail = function (event) {
            var _this = this;
            if (this.isValidModel()) {
                this.$('.gift-certificate-balance-main-form-button').attr('disabled', 'disabled');
                var requestObj = this.model.getGiftCertificateData();
                requestObj.done(function () {
                    if (_this.model.get('status') === ValueCheck_Model_1.GiftCertificateStatus.active ||
                        _this.model.get('status') === ValueCheck_Model_1.GiftCertificateStatus.expired) {
                        _this.cleanValidationErrors();
                    }
                    else {
                        _this.displayError(_this.model.validation.giftcertcode.msg);
                    }
                    _this.$('.gift-certificate-balance-main-form-button').removeAttr('disabled');
                    _this.sendLogForCheckGiftCertificateBalance();
                });
                requestObj.then(null, function (error) {
                    return _this.triggerException(error);
                });
            }
            else {
                this.displayError(this.model.validation.giftcertcode.msg);
            }
        };
        ValueCheckFormView.prototype.saveGiftCertificate = function (code) {
            var _this = this;
            var giftCertificateCode = typeof code === 'string'
                ? code
                : this.$('[name="giftcertcode"]').val().toString().trim();
            if (this.isValidModel(giftCertificateCode)) {
                var requestObj = void 0;
                this.$('.gift-certificate-balance-main-form-save-button').attr('disabled', 'disabled');
                this.cleanValidationErrors();
                requestObj = this.model.save({
                    giftcertcode: giftCertificateCode,
                });
                requestObj.done(function (response) {
                    _this.model.trigger(exports.ValueCheckModelSubmittedEvent, response);
                    _this.$('.gift-certificate-balance-main-form-save-button').removeAttr('disabled');
                    _this.$('[name="giftcertcode"]').val('');
                    _this.sendLogForGiftCertificateSaved();
                });
                requestObj.then(null, function (error) {
                    _this.triggerException(error);
                    if (error.responseJSON.error === 'ERROR_GIFT_CERTIFICATE_INVALID' ||
                        error.responseJSON.error === 'ERROR_GIFT_CERTIFICATE_INACTIVE') {
                        _this.displayError(_this.model.validation.giftcertcode.msg);
                    }
                });
                return requestObj;
            }
            this.displayError(this.model.validation.giftcertcode.msg);
        };
        ValueCheckFormView.prototype.triggerException = function (error) {
            this.$('.gift-certificate-balance-main-form-save-button').removeAttr('disabled');
            this.$('.gift-certificate-balance-main-form-button').removeAttr('disabled');
            this.model.trigger(exports.ValueCheckModelSubmittingErrorEvent, error);
        };
        ValueCheckFormView.prototype.setupNavigationToMyAccount = function (event) {
            event.preventDefault();
            if (this.isValidModel()) {
                var link = this.$el.find(event.target);
                link.data('touchpoint', 'customercenter');
                link.data('hashtag', encodeURIComponent("#/gift-certificates?giftcertcode=" + this.model.get('giftcertcode')));
            }
            else {
                this.displayError(this.model.validation.giftcertcode.msg);
                return false;
            }
        };
        ValueCheckFormView.prototype.isValidModel = function (defaultCode) {
            var giftCertificateCode = this.$('[name="giftcertcode"]').val() || defaultCode;
            if (giftCertificateCode) {
                this.model.set({ giftcertcode: giftCertificateCode.trim() });
            }
            else {
                this.model.set({ giftcertcode: '' });
            }
            this.model.validate(this.model.attributes);
            return this.model.isValid();
        };
        ValueCheckFormView.prototype.displayError = function (message) {
            var placeholder = this.$('[data-type="input-help-text"]');
            this.$('.gift-certificate-balance-main-form-input-field-column').attr('data-validation-error', 'true');
            placeholder.html(message);
        };
        ValueCheckFormView.prototype.cleanValidationErrors = function () {
            this.$('[data-type="input-help-text"]').html('');
            this.$('.gift-certificate-balance-main-form-input-field-column').removeAttr('data-validation-error');
        };
        ValueCheckFormView.prototype.sendLogForCheckGiftCertificateBalance = function () {
            var requestLog = Instrumentation_1.default.getLog('giftCertificateRequestLog');
            var requestLogActivity = 'Click on "Add to my account button"';
            if (this.displayedInShopping) {
                requestLogActivity = 'Check gift certificate balance from Shopping';
            }
            else if (this.displayedInCheckout) {
                requestLogActivity = 'Check gift certificate balance from Checkout';
            }
            else if (this.displayedInMyAccount) {
                requestLogActivity = 'Check gift certificate balance from My Account';
            }
            requestLog.setParameters({
                activity: requestLogActivity,
            });
            requestLog.submit();
        };
        ValueCheckFormView.prototype.sendLogForGiftCertificateSaved = function () {
            var requestLog = Instrumentation_1.default.getLog('giftCertificateRequestLog');
            var requestLogActivity = 'Click on "Add to my account button"';
            if (this.displayedInShopping) {
                requestLogActivity = 'Click on "Add to my account button" from Shopping';
            }
            else if (this.displayedInCheckout) {
                requestLogActivity = 'Click on "Add to my account button" from Checkout';
            }
            else if (this.displayedInMyAccount) {
                requestLogActivity =
                    'Click on "Add to my account button" from My Account';
            }
            requestLog.setParameters({
                activity: requestLogActivity,
            });
            requestLog.submit();
        };
        ValueCheckFormView.prototype.getContext = function () {
            return {
                labelText: ValueCheck_Configuration_1.ValueCheckConfiguration.labelText,
                buttonText: ValueCheck_Configuration_1.ValueCheckConfiguration.buttonText,
                addToMyAccountButtonText: ValueCheck_Configuration_1.ValueCheckConfiguration.saveButtonText,
                placeholderText: ValueCheck_Configuration_1.ValueCheckConfiguration.placeholderText,
                helpText: ValueCheck_Configuration_1.ValueCheckConfiguration.helpText,
                hasHelpText: !!ValueCheck_Configuration_1.ValueCheckConfiguration.helpText,
                invalidCodeMessage: ValueCheck_Configuration_1.ValueCheckConfiguration.invalidCodeMessage,
                inactiveCodeMessage: ValueCheck_Configuration_1.ValueCheckConfiguration.inactiveCodeMessage,
                showAddToMyAccountButtonAsLink: this.showAddToMyAccountButtonAsLink,
                giftCode: this.model.get('giftcertcode'),
                isEnabledAddToMyAccount: Main_Configuration_1.MainConfiguration.enableGiftCertMyAccount,
            };
        };
        ValueCheckFormView.prototype.render = function () {
            this._render();
            if (this.model.get('hasDefaultCode')) {
                this.saveGiftCertificate(this.model.get('giftcertcode'));
            }
            return this;
        };
        return ValueCheckFormView;
    }(Backbone_1.View));
    exports.ValueCheckFormView = ValueCheckFormView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.ValueCheck.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.ValueCheck.Model", ["require", "exports", "SuiteCommerce.GiftCertificate.Instrumentation", "SuiteCommerce.GiftCertificate.ValueCheck.Configuration", "SuiteCommerce.GiftCertificate.Model"], function (require, exports, Instrumentation_1, ValueCheck_Configuration_1, GiftCertificate_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GiftCertificateStatus;
    (function (GiftCertificateStatus) {
        GiftCertificateStatus["active"] = "ACTIVE";
        GiftCertificateStatus["expired"] = "EXPIRED";
        GiftCertificateStatus["inactive"] = "INACTIVE";
        GiftCertificateStatus["invalid"] = "INVALID";
    })(GiftCertificateStatus = exports.GiftCertificateStatus || (exports.GiftCertificateStatus = {}));
    var ValueCheckModel = /** @class */ (function (_super) {
        __extends(ValueCheckModel, _super);
        function ValueCheckModel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.urlRoot = '/app/site/hosting/scriptlet.nl?script=customscript_ns_sc_sl_gift_cert_mgmt' +
                '&deploy=customdeploy_ns_sc_sl_gift_cert_mgmt';
            _this.validation = {
                giftcertcode: {
                    required: true,
                    minLength: ValueCheck_Configuration_1.ValueCheckConfiguration.inputFieldMinLength,
                    maxLength: ValueCheck_Configuration_1.ValueCheckConfiguration.inputFieldMaxLength,
                    msg: ValueCheck_Configuration_1.ValueCheckConfiguration.invalidCodeFieldHelp,
                },
            };
            return _this;
        }
        ValueCheckModel.prototype.getGiftCertificateData = function () {
            var giftCertificateRequestLog = Instrumentation_1.default.getLog('giftCertificateRequestLog');
            giftCertificateRequestLog.startTimer();
            this.unset('result', { silent: true });
            return this.fetch({
                data: {
                    giftcertcode: this.get('giftcertcode'),
                },
            }).done(function () {
                giftCertificateRequestLog.endTimer();
                giftCertificateRequestLog.setParameters({
                    activity: 'Time it takes load gift certificate data',
                    totalTime: giftCertificateRequestLog.getElapsedTimeForTimer(),
                });
                giftCertificateRequestLog.submit();
            });
        };
        return ValueCheckModel;
    }(GiftCertificate_Model_1.GiftCertificateModel));
    exports.ValueCheckModel = ValueCheckModel;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.ValueCheck.Result.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.ValueCheck.Result.View", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificate.ValueCheck.Configuration", "SuiteCommerce.GiftCertificate.ValueCheck.Model", "SuiteCommerce.GiftCertificate.Utils", "value_check_result.tpl"], function (require, exports, Backbone_1, ValueCheck_Configuration_1, ValueCheck_Model_1, Utils_1, template) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ValueCheckResultView = /** @class */ (function (_super) {
        __extends(ValueCheckResultView, _super);
        function ValueCheckResultView(options) {
            var _this = _super.call(this, options) || this;
            _this.application = options.application;
            _this.template = template;
            return _this;
        }
        ValueCheckResultView.prototype.getContext = function () {
            var expirationDate = this.model.get('expirationDate');
            return {
                expirationDate: Utils_1.Utils.formatDate(expirationDate),
                giftCertificateCode: this.model.get('giftcertcode'),
                amountRemaining: this.model.get('amountRemainingFormatted'),
                isAmountRemainingGreaterThanZero: Number(this.model.get('amountRemaining')) > 0,
                hasExpirationDate: !!expirationDate,
                showExpirationDateInformation: this.model.get('status') === ValueCheck_Model_1.GiftCertificateStatus.expired || Number(this.model.get('amountRemaining')) > 0,
                isCodeExpired: this.model.get('status') === ValueCheck_Model_1.GiftCertificateStatus.expired,
                expiredCodeMessage: ValueCheck_Configuration_1.ValueCheckConfiguration.expiredCodeMessage,
                remainingBalanceLabel: ValueCheck_Configuration_1.ValueCheckConfiguration.remainingBalanceLabel,
                gifCertificateCodeLabel: ValueCheck_Configuration_1.ValueCheckConfiguration.giftCertificateCodeLabel,
                codeExpiredLabel: ValueCheck_Configuration_1.ValueCheckConfiguration.codeExpiredLabel,
                expiryDateLabel: ValueCheck_Configuration_1.ValueCheckConfiguration.expiryDateLabel,
            };
        };
        return ValueCheckResultView;
    }(Backbone_1.View));
    exports.ValueCheckResultView = ValueCheckResultView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.ValueCheck.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.GiftCertificate.ValueCheck.View", ["require", "exports", "Backbone", "SuiteCommerce.GiftCertificate.Common.FeedbackMessageManager", "SuiteCommerce.GiftCertificate.ValueCheck.Configuration", "SuiteCommerce.GiftCertificate.ValueCheck.Model", "SuiteCommerce.GiftCertificate.ValueCheck.Form.View", "SuiteCommerce.GiftCertificate.ValueCheck.Result.View", "value_check.tpl"], function (require, exports, Backbone_1, FeedbackMessageManager_1, ValueCheck_Configuration_1, ValueCheck_Model_1, ValueCheck_Form_View_1, ValueCheck_Result_View_1, value_check_template) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExternalEnvironment;
    (function (ExternalEnvironment) {
        ExternalEnvironment["SHOPPING"] = "shopping";
        ExternalEnvironment["MYACCOUNT"] = "my_account";
        ExternalEnvironment["CHECKOUT"] = "checkout";
    })(ExternalEnvironment = exports.ExternalEnvironment || (exports.ExternalEnvironment = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ErrorCode["DUPLICATED_GIFT_CERTIFICATE"] = "ERROR_CUSTOMER_ALREADY_HAS_GIFT_CERTIFICATE";
        ErrorCode["EXPIRED_GIFT_CERTIFICATE_CODE"] = "ERROR_GIFT_CERTIFICATE_EXPIRED";
        ErrorCode["INVALID_GIFT_CERTIFICATE_CODE"] = "ERROR_GIFT_CERTIFICATE_INVALID";
        ErrorCode["INACTIVE_GIFT_CERTIFICATE_CODE"] = "ERROR_GIFT_CERTIFICATE_INACTIVE";
    })(ErrorCode || (ErrorCode = {}));
    var ValueCheckView = /** @class */ (function (_super) {
        __extends(ValueCheckView, _super);
        function ValueCheckView(options) {
            var _a;
            var _this = _super.call(this, options) || this;
            _this.template = value_check_template;
            _this.ErrorCodeMessageTypeMap = (_a = {},
                _a[ErrorCode.DUPLICATED_GIFT_CERTIFICATE] = {
                    type: FeedbackMessageManager_1.FeedbackMessageType.INFO,
                    message: ValueCheck_Configuration_1.ValueCheckConfiguration.codeDuplicatedMessage,
                },
                _a[ErrorCode.EXPIRED_GIFT_CERTIFICATE_CODE] = {
                    type: FeedbackMessageManager_1.FeedbackMessageType.WARNING,
                    message: ValueCheck_Configuration_1.ValueCheckConfiguration.expiredCodeMessage,
                },
                _a[ErrorCode.INVALID_GIFT_CERTIFICATE_CODE] = {
                    type: FeedbackMessageManager_1.FeedbackMessageType.WARNING,
                    message: ValueCheck_Configuration_1.ValueCheckConfiguration.invalidCodeMessage,
                },
                _a[ErrorCode.INACTIVE_GIFT_CERTIFICATE_CODE] = {
                    type: FeedbackMessageManager_1.FeedbackMessageType.WARNING,
                    message: ValueCheck_Configuration_1.ValueCheckConfiguration.inactiveCodeMessage,
                },
                _a);
            _this.model = options.model;
            _this.container = options.container;
            _this.title = options.title;
            if (options.environment)
                _this.environment = options.environment;
            return _this;
        }
        Object.defineProperty(ValueCheckView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    ValueCheckForm: function () {
                        var valueCheckFormView = new ValueCheck_Form_View_1.ValueCheckFormView({
                            application: _this.container,
                            model: _this.model,
                            showFeedbackMessages: false,
                            showAddToMyAccountButtonAsLink: _this.environment === ExternalEnvironment.SHOPPING,
                            displayedInShopping: _this.environment === ExternalEnvironment.SHOPPING,
                            displayedInCheckout: _this.environment === ExternalEnvironment.CHECKOUT,
                            displayedInMyAccount: _this.environment === ExternalEnvironment.MYACCOUNT,
                        });
                        _this.model.on('change:id change:status', function () {
                            _this.onValueCheckFormSyncModel();
                        });
                        _this.model.on('sync', function () {
                            _this.onValueCheckFormSyncModel();
                        });
                        _this.model.on(ValueCheck_Form_View_1.ValueCheckModelSubmittedEvent, function () {
                            return _this.onValueCheckFormSubmittedModel();
                        });
                        _this.model.on(ValueCheck_Form_View_1.ValueCheckModelSubmittingErrorEvent, function (response) {
                            return _this.onValueCheckFormErrorSubmittingModel(response);
                        });
                        return valueCheckFormView;
                    },
                    ValueCheckResult: function () {
                        var valueCheckResultView = new ValueCheck_Result_View_1.ValueCheckResultView({
                            application: _this.container,
                            model: _this.model,
                            showCheckAnotherGiftCertificateLink: false,
                        });
                        _this.model.on('change:id change:status', function () {
                            var status = _this.model.get('status');
                            if (status === ValueCheck_Model_1.GiftCertificateStatus.active ||
                                status === ValueCheck_Model_1.GiftCertificateStatus.expired) {
                                valueCheckResultView.render();
                                valueCheckResultView.$el
                                    .find('.gift-certificate-balance-main-result')
                                    .removeClass('hide');
                            }
                            else {
                                valueCheckResultView.$el
                                    .find('.gift-certificate-balance-main-result')
                                    .addClass('hide');
                            }
                        });
                        return valueCheckResultView;
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        ValueCheckView.prototype.onValueCheckFormSyncModel = function () {
            var status = this.model.get('status');
            if (status === ValueCheck_Model_1.GiftCertificateStatus.invalid) {
                FeedbackMessageManager_1.FeedbackMessageManager.triggerMessageEvent({
                    context: this,
                    type: this.ErrorCodeMessageTypeMap[ErrorCode.INVALID_GIFT_CERTIFICATE_CODE].type,
                    message: this.ErrorCodeMessageTypeMap[ErrorCode.INVALID_GIFT_CERTIFICATE_CODE].message,
                });
            }
            else if (status === ValueCheck_Model_1.GiftCertificateStatus.inactive) {
                FeedbackMessageManager_1.FeedbackMessageManager.triggerMessageEvent({
                    context: this,
                    type: this.ErrorCodeMessageTypeMap[ErrorCode.INACTIVE_GIFT_CERTIFICATE_CODE].type,
                    message: this.ErrorCodeMessageTypeMap[ErrorCode.INACTIVE_GIFT_CERTIFICATE_CODE].message,
                });
            }
            else {
                FeedbackMessageManager_1.FeedbackMessageManager.triggerRemoveMessageEvent(this);
            }
        };
        ValueCheckView.prototype.onValueCheckFormSubmittedModel = function () {
            FeedbackMessageManager_1.FeedbackMessageManager.triggerMessageEvent({
                context: this,
                type: FeedbackMessageManager_1.FeedbackMessageType.SUCCESS,
                message: ValueCheck_Configuration_1.ValueCheckConfiguration.codeSavedMessage,
            });
        };
        ValueCheckView.prototype.onValueCheckFormErrorSubmittingModel = function (response) {
            var errorCode = response.responseJSON && response.responseJSON.error
                ? response.responseJSON.error
                : '';
            if (errorCode && this.ErrorCodeMessageTypeMap[errorCode]) {
                FeedbackMessageManager_1.FeedbackMessageManager.triggerMessageEvent({
                    context: this,
                    type: this.ErrorCodeMessageTypeMap[errorCode].type,
                    message: this.ErrorCodeMessageTypeMap[errorCode].message,
                });
            }
            else {
                FeedbackMessageManager_1.FeedbackMessageManager.triggerMessageEvent({
                    context: this,
                    type: FeedbackMessageManager_1.FeedbackMessageType.WARNING,
                    message: ValueCheck_Configuration_1.ValueCheckConfiguration.generalWarning,
                });
            }
        };
        ValueCheckView.prototype.getContext = function () {
            return {
                title: this.title,
            };
        };
        return ValueCheckView;
    }(Backbone_1.View));
    exports.ValueCheckView = ValueCheckView;
});
/// <amd-module name="SuiteCommerce.GiftCertificate.Shopping"/>
define("SuiteCommerce.GiftCertificate.Shopping", ["require", "exports", "underscore", "SuiteCommerce.GiftCertificate.Common.InstrumentationHelper", "SuiteCommerce.GiftCertificate.Utils.Configuration", "SuiteCommerce.GiftCertificate.PDP", "SuiteCommerce.GiftCertificate.PLP", "SuiteCommerce.GiftCertificate.LandingPage.Router", "SuiteCommerce.GiftCertificate.Main.Configuration"], function (require, exports, _, InstrumentationHelper_1, Configuration_1, PDP, PLP, LandingPage_Router_1, Main_Configuration_1) {
    "use strict";
    return {
        mountToApp: function (container) {
            InstrumentationHelper_1.InstrumentationHelper.initializeInstrumentation(container.getComponent('Environment'));
            this.initializeConfigurationComponent(container);
            if (!Main_Configuration_1.MainConfiguration.enableGiftCertShopping) {
                return;
            }
            PLP.mountToApp(container);
            this.excludeFieldsFromFacets(this.getFieldsToExcludeFromFacets());
            this.initializeValueCheckRouter(container);
            this.initializePDPModules(container);
            this.addMenuTreeItem(container);
        },
        initializeConfigurationComponent: function (container) {
            Configuration_1.Configuration.environment = container.getComponent('Environment');
            InstrumentationHelper_1.InstrumentationHelper.sendLogForDomainConfiguration();
        },
        getFieldsToExcludeFromFacets: function () {
            var fields = [
                'custitem_ns_sc_ext_only_pdp',
                'custitem_ns_sc_ext_gift_cert_group_id',
            ];
            if (Main_Configuration_1.MainConfiguration.hideInventoryTypesFromFacets) {
                fields.push('itemtype');
            }
            return fields;
        },
        excludeFieldsFromFacets: function (fields) {
            _.each(Configuration_1.Configuration.getSearchApiMasterOptions(), function (searchMasterOption) {
                _.each(fields, function (field) {
                    if (searchMasterOption['facet.exclude']) {
                        searchMasterOption['facet.exclude'] += "," + field;
                    }
                    else {
                        searchMasterOption['facet.exclude'] = field;
                    }
                });
            });
        },
        addMenuTreeItem: function (container) {
            var myAccountMenuComponent = container.getComponent('MyAccountMenu');
            if (myAccountMenuComponent) {
                myAccountMenuComponent.addGroup({
                    id: 'MyAccountGiftCertificates',
                    name: 'Gift Certificates',
                    url: 'gift-certificates',
                    index: 3,
                });
            }
        },
        initializeValueCheckRouter: function (container) {
            new LandingPage_Router_1.LandingPageRouter({ application: container, routes: {} });
        },
        initializePDPModules: function (container) {
            PDP.mountToApp(container);
        },
    };
});
};
extensions['Someoddpilot.Locations.0.0.6'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/Locations/0.0.6/' + asset;
};
// @module Someoddpilot.Location
define('Someoddpilot.Location.View',
    [
        'location_details.tpl', 'Someoddpilot.Locations.SS2Model', 'Backbone', 'Someoddpilot.MapStyles'
    ],
    function (
        location_details_tpl, LocationsSS2Model, Backbone, MapStyles
    ) {
        'use strict';
        function fetchLocationData(view, options, config) {
            var locationId = options.routerArguments[0];
            if (
                typeof locationId === 'undefined' ||
                locationId === null ||
                locationId === ''
            ) {
                console.error('No location ID provided.');
                return;
            }
            locationId = Number.parseInt(locationId);
            if (Number.isNaN(locationId)) {
                console.error('Invalid location ID provided.');
                return;
            }
            view.model.updateUrlRoot(locationId);
            view.model.fetch().done(function (result) {
                if (result.message) {
                    console.error('Locations', result.message);
                    return;
                }
                view.location = result;
                view.render();
                _initMap(view, config, 1);
            });
        }
        function initMap(view, config, element) {
            var latitude = Number.parseFloat(view.location.values.latitude);
            var longitude = Number.parseFloat(view.location.values.longitude);
            var position = {
                lat: latitude,
                lng: longitude
            };
            var infoWindow = new google.maps.InfoWindow();
            view.map = new google.maps.Map(element, {
                center: position,
                zoom: config.zoomInDetails,
                mapTypeId: config.mapOptions.mapTypeId,
                mapTypeControl: config.mapOptions.mapTypeControl,
                streetViewControl: config.mapOptions.streetViewControl,
                styles: MapStyles
            });
            var marker = new google.maps.Marker({
                position: position,
                map: view.map,
                title: 'MadCap Coffee Company',
                animation: google.maps.Animation.DROP,
                icon: config.icons.stores
            });
            marker.addListener('click', function () {
                infoWindow.close();
                infoWindow.setContent(marker.getTitle());
                infoWindow.open(marker.getMap(), marker);
            });
        }
        // Ensure both Google Maps and the DOM are ready for map init
        function _initMap(view, config, counter) {
            if (counter >= 50) {
                console.error('Map took too long to load.');
                return;
            }
            var mapElement = document.getElementById('map');
            if (
                window.google.mapsReady === false ||
                mapElement === null
            ) {
                setTimeout(function () {
                    _initMap(view, config, counter++);
                }, 100);
                return;
            }
            initMap(view, config, mapElement);
        }
        // @class Someoddpilot.Location.View @extends Backbone.View
        return Backbone.View.extend({
            template: location_details_tpl
                ,
            initialize: function (options) {
                    this.model = new LocationsSS2Model();
                    /** @type {Environment} */
                    var Environment = container.getComponent('Environment');
                    var config = Environment.getConfig('storeLocator');
                    fetchLocationData(this, options, config);
                    this._initialize(options);
                }
                ,
            events: {}
            ,
            bindings: {}
            ,
            childViews: {}
            //@method getContext @return Someoddpilot.Location.View.Context
            ,
            getContext: function getContext() {
                //@class Someoddpilot.Location.View.Context
                return {
                    'location': this.location
                };
            }
        });
    });
// @module Someoddpilot.Locations
define('Someoddpilot.Locations.View',
    [
        'locations_listing.tpl', 'Someoddpilot.Locations.SS2Model', 'Backbone', 'Location.Model'
    ],
    function (
        locations_listing_tpl, LocationsSS2Model, Backbone
    ) {
        'use strict';
        function fetchLocationsData(view) {
            view.model.fetch().done(function (result) {
                if (result.message) {
                    return console.error('Locations:', result.message);
                }
                view.locations = result;
                view.render();
            });
        }
        // @class Someoddpilot.Locations.View @extends Backbone.View
        return Backbone.View.extend({
            template: locations_listing_tpl
                ,
            initialize: function (options) {
                    this.model = new LocationsSS2Model();
                    fetchLocationsData(this);
                    this._initialize(options);
                }
                ,
            events: {
                'click .hero-slide-caption-button-container a': function () {
                    var target = document.querySelector('#locations-list');
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start',
                        inline: 'nearest'
                    });
                }
            }
            ,
            bindings: {}
            ,
            childViews: {}
            //@method getContext @return Someoddpilot.Locations.View.Context
            ,
            getContext: function getContext() {
                //@class Someoddpilot.Locations.View.Context
                console.log('this.locations', this.locations)
                return {
                    'locations': this.locations
                };
            }
        });
    });
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.Locations.Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({});
});
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.Locations.SS2Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    var dayNames = [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday'
    ]
    function formatHoursLine(line) {
        var days = line.issunday +
            line.ismonday +
            line.istuesday +
            line.iswednesday +
            line.isthursday +
            line.isfriday +
            line.issaturday;
       
        var output;
        var daysArray= Array.from(days)
       
        daysArray = daysArray.map(function (open, index) {
            return {
                'day': dayNames[index],
                'open': open
            };
        }).filter(function (day) {
            return day.open === 'T';
        }).map(function (obj) {
            return obj.day;
        });
        // Default to delimiting each day
        var joinDelimiter = ', ';
        // When there are only two days use an ampersand
        if (daysArray.length === 2) {
            joinDelimiter = ' & ';
        }
        // Contiguous range of days use a hyphen delimiting the ends
        if (daysArray.length > 2 && !/T+F+T+/.test(days)) {
            joinDelimiter = ' - ';
            daysArray = [
                daysArray.shift(),
                daysArray.pop()
            ];
        }
        output = daysArray.join(joinDelimiter);
        var startTime = line.starttime.replace(':00', '');
        var endTime = line.endtime.replace(':00', '');
        //output = `${output} / ${startTime} - ${endTime}`
        output= output+' / '+ startTime+' - '+endTime;
        return output;
    }
    function formatBusinessHours(location) {
        if (typeof location.businesshours === 'undefined') return;
        location.businesshours_formatted = [];
        Object.keys(location.businesshours).forEach(function (key) {
            if (key === 'currentline') return;
            location.businesshours_formatted.push(
                formatHoursLine(location.businesshours[key])
            );
        });
    }
    function updateImageUrl(location) {
        if (location.values.custrecord_web_display_image.length < 1) {
            return;
        }
        location.values.custrecord_web_display_image_url =
            location.values.custrecord_web_display_image.pop().text;
    }
    function generateTelephoneURI(location) {
        if (location.values.phone.trim().length === 0) {
            return;
        }
        location.values.phone_uri = location.values.phone.trim()
            .replace(/[()]/g, '')
            .replace(' ', '-')
    }
    function parseFetch(result) {
        if (Array.isArray(result)) {
            result.forEach(function (location) {
                formatBusinessHours(location);
                updateImageUrl(location);
                generateTelephoneURI(location);
            });
            return;
        }
        formatBusinessHours(result);
        updateImageUrl(result);
        generateTelephoneURI(result);
    }
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/Locations/SuiteScript2/Locations.Service.ss"
            ),
            true
        ),
        //@function updateUrlRoot
        updateUrlRoot: function (locationId) {
            this.urlRoot = Utils.getAbsoluteUrl(
                getExtensionAssetsPath(
                    "Modules/Locations/SuiteScript2/Locations.Service.ss" +
                    '?location_id=' + locationId
                ),
                true
            );
        },
        //@inheritdoc
        fetch: function (options) {
            var fetchPromise = Backbone.Model.prototype.fetch.apply(this, options);
            return fetchPromise.done(parseFetch);
        }
    });
});
// @module Someoddpilot.MapStyles
define('Someoddpilot.MapStyles', [], function () {
    return [
        {
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#f5f5f5"
                }
            ]
        },
        {
            "elementType": "labels.icon",
            "stylers": [
                {
                    "visibility": "off"
                }
            ]
        },
        {
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#616161"
                }
            ]
        },
        {
            "elementType": "labels.text.stroke",
            "stylers": [
                {
                    "color": "#f5f5f5"
                }
            ]
        },
        {
            "featureType": "administrative.land_parcel",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#969696"
                }
            ]
        },
        {
            "featureType": "landscape",
            "elementType": "geometry.fill",
            "stylers": [
                {
                    "color": "#f1f1f1"
                }
            ]
        },
        {
            "featureType": "poi",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#eeeeee"
                }
            ]
        },
        {
            "featureType": "poi",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#757575"
                }
            ]
        },
        {
            "featureType": "poi.park",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#e5e5e5"
                }
            ]
        },
        {
            "featureType": "poi.park",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#9e9e9e"
                }
            ]
        },
        {
            "featureType": "road",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#ffffff"
                }
            ]
        },
        {
            "featureType": "road.arterial",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#757575"
                }
            ]
        },
        {
            "featureType": "road.highway",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#dadada"
                }
            ]
        },
        {
            "featureType": "road.highway",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#616161"
                }
            ]
        },
        {
            "featureType": "road.local",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#9e9e9e"
                }
            ]
        },
        {
            "featureType": "transit.line",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#e5e5e5"
                }
            ]
        },
        {
            "featureType": "transit.station",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#eeeeee"
                }
            ]
        },
        {
            "featureType": "water",
            "elementType": "geometry",
            "stylers": [
                {
                    "color": "#c9c9c9"
                }
            ]
        },
        {
            "featureType": "water",
            "elementType": "labels.text.fill",
            "stylers": [
                {
                    "color": "#9e9e9e"
                }
            ]
        }
    ];
});
define('Someoddpilot.Locations',
    [
        'Someoddpilot.Locations.View', 'Someoddpilot.Location.View'
    ],
    function (
        LocationsView, LocationView
    ) {
        'use strict';
        function loadGoogleMaps(config) {
            if (
                typeof window.google !== 'undefined' &&
                typeof window.google.maps !== 'undefined'
            ) {
                return;
            }
            var scriptTag = document.createElement('script');
            scriptTag.type = 'text/javascript';
            scriptTag.async = true;
            scriptTag.src = 'https://maps.googleapis.com/maps/api/js?key=' + config.apiKey + '&callback=google.initMaps';
            window.google = window.google || {};
            window.google.mapsReady = false;
            window.google.initMaps = function () {
                window.google.mapsReady = true;
            }
            document.head.appendChild(scriptTag);
        }
        function redirectOldLocator() {
            var currentHash = Backbone.history.location.hash;
            if (/^#stores/.test(currentHash)) {
                console.log('Redirecting to new locations endpoint.');
                setTimeout(function () {
                    Backbone.history.navigate('locations', {
                        trigger: true
                    });
                });
            }
        }
        return {
            mountToApp: function mountToApp(container) {
                // Redirect old locator path to the current one
                Backbone.history.on('route', redirectOldLocator);
                /** @type {PageType} */
                var PageType = container.getComponent('PageType');
                /** @type {Environment} */
                var Environment = container.getComponent('Environment');
                var config = Environment.getConfig('storeLocator');
                loadGoogleMaps(config);
                // Create pages and related routes
                PageType.registerPageType({
                    name: 'locations_listing',
                    routes: ['locations'],
                    view: function (options) {
                        return new LocationsView(options);
                    },
                    defaultTemplate: {
                        name: 'locations_listing.tpl',
                        displayName: 'Locations Listing'
                    }
                });
                PageType.registerPageType({
                    name: 'location_details',
                    routes: ['locations/:id'],
                    view: function (options) {
                        return new LocationView(options);
                    },
                    defaultTemplate: {
                        name: 'location_details.tpl',
                        displayName: 'Location Details'
                    }
                });
            }
        };
    });
};
extensions['SuiteCommerce.InventoryDisplay.1.2.3'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/SuiteCommerce/InventoryDisplay/1.2.3/' + asset;
};
/// <amd-module name="SuiteCommerce.InventoryDisplay.Configuration"/>
define("SuiteCommerce.InventoryDisplay.Configuration", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var environment = null;
    var Configuration = /** @class */ (function () {
        function Configuration() {
        }
        Object.defineProperty(Configuration, "environment", {
            set: function (environmentComponent) {
                environment = environmentComponent;
            },
            enumerable: true,
            configurable: true
        });
        Configuration.get = function (key) {
            if (environment) {
                return environment.getConfig(key);
            }
            console.error('Please set the Environment Component in the Configuration.');
            return null;
        };
        return Configuration;
    }());
    exports.Configuration = Configuration;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Common.InstrumentationHelper"/>
define("SuiteCommerce.InventoryDisplay.Common.InstrumentationHelper", ["require", "exports", "SuiteCommerce.InventoryDisplay.Instrumentation"], function (require, exports, Instrumentation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var QueueNameSuffix = '-InventoryDisplay`';
    var ExtensionVersion = '1.2.2';
    var ComponentArea = 'SC Inventory Display';
    var InstrumentationHelper = /** @class */ (function () {
        function InstrumentationHelper() {
        }
        InstrumentationHelper.initializeInstrumentation = function (environment) {
            Instrumentation_1.default.initialize({
                environment: environment,
                queueNameSuffix: QueueNameSuffix,
                defaultParameters: {
                    componentArea: ComponentArea,
                    extensionVersion: ExtensionVersion,
                }
            });
        };
        return InstrumentationHelper;
    }());
    exports.InstrumentationHelper = InstrumentationHelper;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Instrumentation.Log"/>
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
define("SuiteCommerce.InventoryDisplay.Instrumentation.Log", ["require", "exports", "SuiteCommerce.InventoryDisplay.Instrumentation.Logger"], function (require, exports, Instrumentation_Logger_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogSeverity;
    (function (LogSeverity) {
        LogSeverity["INFO"] = "info";
        LogSeverity["ERROR"] = "error";
    })(LogSeverity = exports.LogSeverity || (exports.LogSeverity = {}));
    var Log = /** @class */ (function () {
        function Log(attributes) {
            if (attributes === void 0) { attributes = { label: '' }; }
            this.setInitialAttributes(attributes);
        }
        Log.prototype.setInitialAttributes = function (attributes) {
            var defaultAttributes = {
                label: null,
                timer: {},
                severity: LogSeverity.INFO,
            };
            var _a = __assign(__assign({}, defaultAttributes), attributes), label = _a.label, parametersToSubmit = _a.parametersToSubmit, timer = _a.timer, severity = _a.severity;
            this.label = label;
            this.parametersToSubmit = parametersToSubmit;
            this.timer = timer;
            this.severity = severity;
        };
        Log.prototype.startTimer = function () {
            this.timer.startTime = this.getTimestamp();
        };
        Log.prototype.endTimer = function () {
            this.timer.endTime = this.getTimestamp();
        };
        Log.prototype.getTimestamp = function () {
            if (!this.isOldInternetExplorer()) {
                return performance.now() || Date.now();
            }
            return Date.now();
        };
        Log.prototype.getElapsedTimeForTimer = function () {
            var timer = this.timer;
            if (timer.startTime && timer.endTime) {
                if (timer.startTime > timer.endTime) {
                    console.warn('Start time should be minor that end time in timer');
                    return null;
                }
                return timer.endTime - timer.startTime;
            }
            if (!timer.startTime)
                console.warn('The Start time is not defined');
            if (!timer.endTime)
                console.warn('The End time is not defined');
            return null;
        };
        Log.prototype.setParameters = function (data) {
            var _this = this;
            Object.keys(data).forEach(function (parameter) {
                _this.setParameter(parameter, data[parameter]);
            });
        };
        Log.prototype.setParameter = function (parameter, value) {
            var logData = this.parametersToSubmit;
            logData[parameter] = value;
            this.parametersToSubmit = logData;
        };
        Log.prototype.submit = function () {
            if (!this.isOldInternetExplorer()) {
                switch (this.severity) {
                    case LogSeverity.ERROR:
                        this.submitAsError();
                        break;
                    case LogSeverity.INFO:
                    default:
                        this.submitAsInfo();
                }
            }
        };
        Log.prototype.isOldInternetExplorer = function () {
            return !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g);
        };
        Log.prototype.submitAsError = function () {
            Instrumentation_Logger_1.Logger.getLogger().error(this.parametersToSubmit);
        };
        Log.prototype.submitAsInfo = function () {
            Instrumentation_Logger_1.Logger.getLogger().info(this.parametersToSubmit);
        };
        return Log;
    }());
    exports.Log = Log;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Instrumentation.Logger"/>
define("SuiteCommerce.InventoryDisplay.Instrumentation.Logger", ["require", "exports", "SuiteCommerce.InventoryDisplay.Instrumentation.MockAppender"], function (require, exports, Instrumentation_MockAppender_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Logger = /** @class */ (function () {
        function Logger() {
        }
        Logger.getLogger = function () {
            this.instance = this.instance || this.buildLoggerInstance();
            return this.instance;
        };
        Logger.buildLoggerInstance = function () {
            var _a;
            try {
                // @ts-ignore
                var LoggersModule = require('Loggers').Loggers;
                // @ts-ignore
                var elasticAppender = require('Loggers.Appender.ElasticLogger')
                    .LoggersAppenderElasticLogger.getInstance();
                // Just for test purposes in local environments: the output of MockApppender is the browser console.
                var mockAppender = Instrumentation_MockAppender_1.MockAppender.getInstance();
                // @ts-ignore
                var configurationModule = require('Loggers.Configuration');
                var loggerName = "CommerceExtensions" + Logger.options.queueNameSuffix;
                LoggersModule.setConfiguration((_a = {},
                    _a[loggerName] = {
                        log: [
                            { profile: configurationModule.prod, appenders: [elasticAppender] },
                            { profile: configurationModule.dev, appenders: [mockAppender] }
                        ],
                        actions: {},
                        loggers: {},
                    },
                    _a));
                return LoggersModule.getLogger(loggerName);
            }
            catch (e) {
                return {
                    info: function (obj) { },
                    error: function (obj) { },
                };
            }
        };
        return Logger;
    }());
    exports.Logger = Logger;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Instrumentation.MockAppender"/>
define("SuiteCommerce.InventoryDisplay.Instrumentation.MockAppender", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MockAppender = /** @class */ (function () {
        function MockAppender() {
        }
        MockAppender.prototype.info = function (data) {
            console.info('MockAppender - Info', data);
        };
        MockAppender.prototype.error = function (data) {
            console.error('MockAppender - Error', data);
        };
        MockAppender.prototype.ready = function () {
            return true;
        };
        MockAppender.getInstance = function () {
            if (!MockAppender.instance) {
                MockAppender.instance = new MockAppender();
            }
            return MockAppender.instance;
        };
        MockAppender.prototype.start = function (action, options) {
            return options;
        };
        MockAppender.prototype.end = function (startOptions, options) { };
        return MockAppender;
    }());
    exports.MockAppender = MockAppender;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Instrumentation"/>
define("SuiteCommerce.InventoryDisplay.Instrumentation", ["require", "exports", "underscore", "SuiteCommerce.InventoryDisplay.Instrumentation.Logger", "SuiteCommerce.InventoryDisplay.Instrumentation.Log"], function (require, exports, _, Instrumentation_Logger_1, Instrumentation_Log_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var logs = [];
    exports.default = {
        initialize: function (options) {
            Instrumentation_Logger_1.Logger.options = options;
        },
        getLog: function (logLabel) {
            return this.getLogModelByLabel(logLabel) || this.registerNewLog(logLabel);
        },
        getLogModelByLabel: function (label) {
            return _(logs).findWhere({ label: label });
        },
        registerNewLog: function (label) {
            var defaultParameters = _.clone(Instrumentation_Logger_1.Logger.options.defaultParameters);
            var log = new Instrumentation_Log_1.Log({ label: label, parametersToSubmit: defaultParameters });
            logs.push(log);
            return log;
        },
        setParameterForAllLogs: function (parameter, value) {
            logs.forEach(function (log) {
                log.setParameter(parameter, value);
            });
        },
        setParametersForAllLogs: function (data) {
            logs.forEach(function (log) {
                log.setParameters(data);
            });
        },
        submitLogs: function () {
            logs.forEach(function (log) {
                log.submit();
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.InventoryDisplay.Configuration"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.InventoryDisplay.InventoryDisplay.Configuration", ["require", "exports", "SuiteCommerce.InventoryDisplay.Configuration"], function (require, exports, Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InventoryDisplayConfiguration = /** @class */ (function (_super) {
        __extends(InventoryDisplayConfiguration, _super);
        function InventoryDisplayConfiguration() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(InventoryDisplayConfiguration, "inStockMessageForRegularItems", {
            get: function () {
                return this.get('inventoryDisplay.inStockMessageForRegularItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "backorderMessageForRegularItems", {
            get: function () {
                return this.get('inventoryDisplay.backorderMessageForRegularItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "quantityAvailableMessageForRegularItems", {
            get: function () {
                return this.get('inventoryDisplay.quantityAvailableMessageForRegularItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "inStockMessageForSpecialOrderItems", {
            get: function () {
                return this.get('inventoryDisplay.inStockMessageForSpecialOrderItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "backorderMessageForSpecialOrderItems", {
            get: function () {
                return this.get('inventoryDisplay.backorderMessageForSpecialOrderItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "alwaysInStockMessageForSpecialOrderItems", {
            get: function () {
                return this.get('inventoryDisplay.alwaysInStockMessageForSpecialOrderItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "inStockMessageForDropShipItems", {
            get: function () {
                return this.get('inventoryDisplay.inStockMessageForDropShipItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "backorderMessageForDropShipItems", {
            get: function () {
                return this.get('inventoryDisplay.backorderMessageForDropShipItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "alwaysInStockMessageForDropShipItems", {
            get: function () {
                return this.get('inventoryDisplay.alwaysInStockMessageForDropShipItems');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "lowStockThreshold", {
            get: function () {
                return this.get('inventoryDisplay.lowStockThreshold');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "lowStockMessage", {
            get: function () {
                return this.get('inventoryDisplay.lowStockMessage');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "hideQuantityForLowStock", {
            get: function () {
                return this.get('inventoryDisplay.hideQuantityForLowStock');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryDisplayConfiguration, "isJSONLdEnabled", {
            get: function () {
                return this.get('structureddatamarkup.type') === 'JSON-LD';
            },
            enumerable: true,
            configurable: true
        });
        return InventoryDisplayConfiguration;
    }(Configuration_1.Configuration));
    exports.InventoryDisplayConfiguration = InventoryDisplayConfiguration;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Message.DropShipItem.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.InventoryDisplay.Message.DropShipItem.View", ["require", "exports", "SuiteCommerce.InventoryDisplay.InventoryDisplay.Configuration", "SuiteCommerce.InventoryDisplay.Message.View", "suitecommerce_inventorydisplay.tpl"], function (require, exports, InventoryDisplay_Configuration_1, InventoryDisplay_Message_View_1, suitecommerce_inventorydisplay) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DropShipItemMessageView = /** @class */ (function (_super) {
        __extends(DropShipItemMessageView, _super);
        function DropShipItemMessageView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.template = suitecommerce_inventorydisplay;
            return _this;
        }
        DropShipItemMessageView.prototype.isInStock = function () {
            return this.dropShipSpecialOrderItemsAlwaysInStock || this.getQuantityAvailable() > 0;
        };
        DropShipItemMessageView.prototype.getStockMessage = function () {
            var stockMessage = '';
            if (this.dropShipSpecialOrderItemsAlwaysInStock) {
                stockMessage = this.item.custitem_ns_sc_ext_id_stock_message
                    || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.alwaysInStockMessageForDropShipItems;
            }
            else if (this.getQuantityAvailable() > 0) {
                stockMessage = this.item.custitem_ns_sc_ext_id_stock_message
                    || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.inStockMessageForDropShipItems;
                if (this.isUnderThreshold()) {
                    stockMessage = this.item.custitem_ns_sc_ext_id_low_stock_msg
                        || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.lowStockMessage;
                    stockMessage = this.replaceQuantityPlaceholder(stockMessage);
                }
            }
            else if (this.item.isbackorderable) {
                stockMessage = this.item.custitem_ns_sc_ext_id_bo_msg
                    || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.backorderMessageForDropShipItems;
            }
            return stockMessage;
        };
        return DropShipItemMessageView;
    }(InventoryDisplay_Message_View_1.InventoryDisplayMessageView));
    exports.DropShipItemMessageView = DropShipItemMessageView;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Message.RegularItem.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.InventoryDisplay.Message.RegularItem.View", ["require", "exports", "SuiteCommerce.InventoryDisplay.InventoryDisplay.Configuration", "SuiteCommerce.InventoryDisplay.Message.View", "suitecommerce_inventorydisplay.tpl"], function (require, exports, InventoryDisplay_Configuration_1, InventoryDisplay_Message_View_1, suitecommerce_inventorydisplay) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ItemMessageView = /** @class */ (function (_super) {
        __extends(ItemMessageView, _super);
        function ItemMessageView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.template = suitecommerce_inventorydisplay;
            return _this;
        }
        ItemMessageView.prototype.isInStock = function () {
            return this.getQuantityAvailable() > 0;
        };
        ItemMessageView.prototype.getStockMessage = function () {
            var stockMessage = '';
            if (this.isInStock()) {
                stockMessage = this.item.custitem_ns_sc_ext_id_stock_message
                    || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.inStockMessageForRegularItems;
                if (this.isUnderThreshold()) {
                    stockMessage = this.item.custitem_ns_sc_ext_id_low_stock_msg ||
                        InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.lowStockMessage;
                    stockMessage = this.replaceQuantityPlaceholder(stockMessage);
                }
            }
            else if (this.item.isbackorderable) {
                stockMessage = this.item.custitem_ns_sc_ext_id_bo_msg
                    || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.backorderMessageForRegularItems;
            }
            return stockMessage;
        };
        return ItemMessageView;
    }(InventoryDisplay_Message_View_1.InventoryDisplayMessageView));
    exports.ItemMessageView = ItemMessageView;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Message.SpecialOrderItem.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.InventoryDisplay.Message.SpecialOrderItem.View", ["require", "exports", "SuiteCommerce.InventoryDisplay.InventoryDisplay.Configuration", "SuiteCommerce.InventoryDisplay.Message.View", "suitecommerce_inventorydisplay.tpl"], function (require, exports, InventoryDisplay_Configuration_1, InventoryDisplay_Message_View_1, suitecommerce_inventorydisplay) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SpecialOrderItemMessageView = /** @class */ (function (_super) {
        __extends(SpecialOrderItemMessageView, _super);
        function SpecialOrderItemMessageView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.template = suitecommerce_inventorydisplay;
            return _this;
        }
        SpecialOrderItemMessageView.prototype.isInStock = function () {
            return this.getQuantityAvailable() > 0 || this.dropShipSpecialOrderItemsAlwaysInStock;
        };
        SpecialOrderItemMessageView.prototype.getStockMessage = function () {
            var stockMessage = '';
            if (this.dropShipSpecialOrderItemsAlwaysInStock) {
                stockMessage = this.item.custitem_ns_sc_ext_id_stock_message
                    || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.alwaysInStockMessageForSpecialOrderItems;
            }
            else if (this.getQuantityAvailable() > 0) {
                stockMessage = this.item.custitem_ns_sc_ext_id_stock_message
                    || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.inStockMessageForSpecialOrderItems;
                if (this.isUnderThreshold()) {
                    stockMessage = this.item.custitem_ns_sc_ext_id_low_stock_msg ||
                        InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.lowStockMessage;
                    stockMessage = this.replaceQuantityPlaceholder(stockMessage);
                }
            }
            else if (this.item.isbackorderable) {
                stockMessage = this.item.custitem_ns_sc_ext_id_bo_msg
                    || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.backorderMessageForSpecialOrderItems;
            }
            return stockMessage;
        };
        return SpecialOrderItemMessageView;
    }(InventoryDisplay_Message_View_1.InventoryDisplayMessageView));
    exports.SpecialOrderItemMessageView = SpecialOrderItemMessageView;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Message.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.InventoryDisplay.Message.View", ["require", "exports", "Backbone", "SuiteCommerce.InventoryDisplay.InventoryDisplay.Configuration"], function (require, exports, Backbone_1, InventoryDisplay_Configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InventoryDisplayMessageView = /** @class */ (function (_super) {
        __extends(InventoryDisplayMessageView, _super);
        function InventoryDisplayMessageView(options) {
            var _this = _super.call(this, options) || this;
            _this.messageTypes = {
                lowStock: 'low-stock',
                inStock: 'in-stock',
                alwaysInStock: 'always-in-stock',
                backOrder: 'back-order',
            };
            _this.item = InventoryDisplayMessageView.getItemInfo(options.pdp);
            _this.stockInfo = options.pdp.getStockInfo();
            _this.isloading = true;
            _this.pdp = options.pdp;
            _this.pdp.on('afterOptionSelection', function () {
                _this.item = InventoryDisplayMessageView.getItemInfo(options.pdp);
                _this.stockInfo = options.pdp.getStockInfo();
                _this.render();
            });
            return _this;
        }
        InventoryDisplayMessageView.getItemInfo = function (pdp) {
            var itemInfo;
            var selectedMatrixChilds = pdp.getSelectedMatrixChilds();
            if (selectedMatrixChilds.length === 1) {
                itemInfo = selectedMatrixChilds[0];
            }
            else {
                itemInfo = pdp.getItemInfo().item;
            }
            return itemInfo;
        };
        InventoryDisplayMessageView.prototype.getMessageType = function () {
            var messageType = this.messageTypes.inStock;
            if (this.isAlwaysInStockItem()) {
                messageType = this.messageTypes.alwaysInStock;
            }
            else if (this.isInStock() && this.isUnderThreshold()) {
                messageType = this.messageTypes.lowStock;
            }
            else if (!this.isInStock() && this.item.isbackorderable) {
                messageType = this.messageTypes.backOrder;
            }
            return messageType;
        };
        InventoryDisplayMessageView.prototype.getOrderType = function () {
            var messageClass = '';
            if (this.item.isdropshipitem) {
                messageClass = 'dropship';
            }
            else if (this.item.isspecialorderitem) {
                messageClass = 'special-order';
            }
            return messageClass;
        };
        InventoryDisplayMessageView.prototype.getQuantityAvailable = function () {
            return this.stockInfo.stock;
        };
        InventoryDisplayMessageView.prototype.loaded = function () {
            this.isloading = false;
            this.dropShipSpecialOrderItemsAlwaysInStock = this.model.get('dropShipSpecialOrderItemsAlwaysInStock');
            this.render();
        };
        InventoryDisplayMessageView.prototype.getContext = function () {
            var stockMessage = this.isEnabledMessagingForItem()
                && (this.isInStock() || this.isRequiredMessageByOutStockBehavior()) ? this.getStockMessage() : '';
            var quantityAvailableMessage = this.isEnabledShowQuantityForItem() ? this.getQuantityAvailableMessage() : '';
            var loadingText = 'Loading...';
            var messageType = this.getMessageType();
            var orderType = this.getOrderType();
            return {
                stockMessage: stockMessage,
                loadingText: loadingText,
                messageType: messageType,
                orderType: orderType,
                quantityAvailableMessage: quantityAvailableMessage,
                isLoading: this.isloading,
                isInStock: this.isInStock(),
                isBackorderable: this.item.isbackorderable,
                isJSONLdEnabled: InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.isJSONLdEnabled
            };
        };
        InventoryDisplayMessageView.prototype.isAlwaysInStockItem = function () {
            return this.dropShipSpecialOrderItemsAlwaysInStock && (this.item.isdropshipitem ||
                this.item.isspecialorderitem);
        };
        InventoryDisplayMessageView.prototype.isEnabledMessagingForItem = function () {
            return !this.item.custitem_ns_sc_ext_id_hide_invt_msg;
        };
        InventoryDisplayMessageView.prototype.isShowQuantityUnderThresholdEnabled = function () {
            return this.item.custitem_ns_sc_ext_id_hide_low_qty_msg ||
                InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.hideQuantityForLowStock;
        };
        InventoryDisplayMessageView.prototype.isUnderThreshold = function () {
            var selectedTreshold = this.item.custitem_ns_sc_ext_id_low_stock_thresh >= 0 ?
                this.item.custitem_ns_sc_ext_id_low_stock_thresh :
                InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.lowStockThreshold;
            return selectedTreshold >= 0
                && (this.getQuantityAvailable() > 0)
                && (this.getQuantityAvailable() < selectedTreshold);
        };
        InventoryDisplayMessageView.prototype.isRequiredMessageByOutStockBehavior = function () {
            return this.item.outofstockbehavior === '- Default -'
                || this.item.outofstockbehavior === 'Allow back orders with no out-of-stock message'
                || this.item.outofstockbehavior === 'Allow back orders but display out-of-stock message';
        };
        InventoryDisplayMessageView.prototype.isEnabledShowQuantityForItem = function () {
            var isEnabled = !this.item.custitem_ns_sc_ext_id_hide_qty_avl;
            if (this.isUnderThreshold()) {
                isEnabled = !this.isShowQuantityUnderThresholdEnabled();
            }
            return isEnabled;
        };
        InventoryDisplayMessageView.prototype.getQuantityAvailableMessage = function () {
            var quantityAvailableMessage;
            var stockQuantity = this.getQuantityAvailable();
            if (stockQuantity === 0) {
                return '';
            }
            quantityAvailableMessage = this.item.custitem_ns_sc_ext_id_qty_avl_msg
                || InventoryDisplay_Configuration_1.InventoryDisplayConfiguration.quantityAvailableMessageForRegularItems;
            quantityAvailableMessage = this.replaceQuantityPlaceholder(quantityAvailableMessage);
            return quantityAvailableMessage;
        };
        InventoryDisplayMessageView.prototype.replaceQuantityPlaceholder = function (message) {
            var stockQuantity = this.getQuantityAvailable();
            return message.replace('[[quantity]]', "" + stockQuantity);
        };
        return InventoryDisplayMessageView;
    }(Backbone_1.View));
    exports.InventoryDisplayMessageView = InventoryDisplayMessageView;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Website.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.InventoryDisplay.Website.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WebsiteModel = /** @class */ (function (_super) {
        __extends(WebsiteModel, _super);
        function WebsiteModel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.urlRoot = '/app/site/hosting/scriptlet.nl'
                + '?script=customscript_ns_sc_sl_inventory_display'
                + '&deploy=customdeploy_ns_sc_sl_inventory_display';
            return _this;
        }
        return WebsiteModel;
    }(Backbone_1.Model));
    exports.WebsiteModel = WebsiteModel;
});
/// <amd-module name="SuiteCommerce.InventoryDisplay.Main"/>
define("SuiteCommerce.InventoryDisplay.Main", ["require", "exports", "SuiteCommerce.InventoryDisplay.Message.View", "SuiteCommerce.InventoryDisplay.Message.SpecialOrderItem.View", "SuiteCommerce.InventoryDisplay.Message.DropShipItem.View", "SuiteCommerce.InventoryDisplay.Message.RegularItem.View", "SuiteCommerce.InventoryDisplay.Website.Model", "SuiteCommerce.InventoryDisplay.Configuration", "SuiteCommerce.InventoryDisplay.Instrumentation", "SuiteCommerce.InventoryDisplay.Common.InstrumentationHelper"], function (require, exports, InventoryDisplay_Message_View_1, InventoryDisplay_Message_SpecialOrderItem_View_1, InventoryDisplay_Message_DropShipItem_View_1, InventoryDisplay_Message_RegularItem_View_1, InventoryDisplay_Website_Model_1, Configuration_1, Instrumentation_1, InstrumentationHelper_1) {
    "use strict";
    return {
        mountToApp: function mountToApp(container) {
            var _this = this;
            var pdp = container.getComponent('PDP');
            var environment = container.getComponent('Environment');
            var websiteId = environment.getSiteSetting('id');
            InstrumentationHelper_1.InstrumentationHelper.initializeInstrumentation(environment);
            var loadExtensionOnPDP = Instrumentation_1.default.getLog('loadView');
            loadExtensionOnPDP.startTimer();
            var websiteModel = new InventoryDisplay_Website_Model_1.WebsiteModel();
            var promise = websiteModel.fetch({
                data: {
                    websiteId: websiteId,
                },
            });
            promise.done(function () {
                loadExtensionOnPDP.endTimer();
                loadExtensionOnPDP.setParameters({
                    activity: 'Time it takes to load the website data',
                    totalTime: loadExtensionOnPDP.getElapsedTimeForTimer(),
                });
                loadExtensionOnPDP.submit();
            });
            Configuration_1.Configuration.environment = container.getComponent('Environment');
            if (pdp) {
                pdp.addChildView('Product.Stock.Info', function () {
                    var item = InventoryDisplay_Message_View_1.InventoryDisplayMessageView.getItemInfo(pdp);
                    var view;
                    if (item.itemtype !== 'InvtPart' && item.itemtype !== 'Assembly') {
                        return;
                    }
                    pdp.on('afterOptionSelection', function () {
                        _this.selectProperPrototypeForChild(view, InventoryDisplay_Message_View_1.InventoryDisplayMessageView.getItemInfo(pdp));
                    });
                    if (item.isspecialorderitem) {
                        view = new InventoryDisplay_Message_SpecialOrderItem_View_1.SpecialOrderItemMessageView({
                            pdp: pdp,
                            model: websiteModel,
                        });
                    }
                    else if (item.isdropshipitem) {
                        view = new InventoryDisplay_Message_DropShipItem_View_1.DropShipItemMessageView({
                            pdp: pdp,
                            model: websiteModel,
                        });
                    }
                    else {
                        view = new InventoryDisplay_Message_RegularItem_View_1.ItemMessageView({
                            pdp: pdp,
                            model: websiteModel,
                        });
                    }
                    promise.done(function () {
                        view.loaded();
                    });
                    return view;
                });
            }
        },
        selectProperPrototypeForChild: function (view, item) {
            if (item.isdropshipitem) {
                view.isInStock = InventoryDisplay_Message_DropShipItem_View_1.DropShipItemMessageView.prototype.isInStock;
                view.getStockMessage = InventoryDisplay_Message_DropShipItem_View_1.DropShipItemMessageView.prototype.getStockMessage;
            }
            else if (item.isspecialorderitem) {
                view.isInStock = InventoryDisplay_Message_SpecialOrderItem_View_1.SpecialOrderItemMessageView.prototype.isInStock;
                view.getStockMessage = InventoryDisplay_Message_SpecialOrderItem_View_1.SpecialOrderItemMessageView.prototype.getStockMessage;
            }
            else {
                view.isInStock = InventoryDisplay_Message_RegularItem_View_1.ItemMessageView.prototype.isInStock;
                view.getStockMessage = InventoryDisplay_Message_RegularItem_View_1.ItemMessageView.prototype.getStockMessage;
            }
        }
    };
});
};
extensions['SuiteCommerce.MapContactInfo.1.1.5'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/SuiteCommerce/MapContactInfo/1.1.5/' + asset;
};
/// <amd-module name="SuiteCommerce.MapAndContactUs.Common.DependencyProvider"/>
define("SuiteCommerce.MapAndContactUs.Common.DependencyProvider", ["require", "exports", "underscore", "Utils"], function (require, exports, _, UtilsModuleSC) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UtilsModule = getDependency(UtilsModuleSC);
    function getDependency(module) {
        if (isTranspiledModule(module)) {
            return module[Object.keys(module)[0]];
        }
        return module;
    }
    function isTranspiledModule(module) {
        var moduleKeys = Object.keys(module);
        return !_.isFunction(module) && moduleKeys.length === 1;
    }
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.Common.Instrumentation.Helper"/>
define("SuiteCommerce.MapAndContactUs.Common.Instrumentation.Helper", ["require", "exports", "SuiteCommerce.MapAndContactUs.Instrumentation"], function (require, exports, Instrumentation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ComponentArea = 'SC Map and Contact';
    var ExtensionVersion = '1.1.5';
    var QueueNameSuffix = '-MapAndContact';
    var InstrumentationHelper = /** @class */ (function () {
        function InstrumentationHelper() {
        }
        InstrumentationHelper.initializeInstrumentation = function (container) {
            Instrumentation_1.default.initialize({
                environment: container.getComponent('Environment'),
                queueNameSuffix: QueueNameSuffix,
                defaultParameters: {
                    componentArea: ComponentArea,
                    extensionVersion: ExtensionVersion,
                },
            });
        };
        InstrumentationHelper.log = function (parameters) {
            var log = Instrumentation_1.default.getLog(parameters.activity.replace(' ', ''));
            log.setParameters(parameters);
            log.submit();
        };
        return InstrumentationHelper;
    }());
    exports.InstrumentationHelper = InstrumentationHelper;
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.Utils"/>
define("SuiteCommerce.MapAndContactUs.Utils", ["require", "exports", "SuiteCommerce.MapAndContactUs.Common.DependencyProvider"], function (require, exports, DependencyProvider_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Utils = /** @class */ (function () {
        function Utils() {
        }
        Utils.getAbsoluteUrl = function (file, isServices2) {
            return DependencyProvider_1.UtilsModule.getAbsoluteUrl(file, isServices2);
        };
        return Utils;
    }());
    exports.Utils = Utils;
});
/// <amd-module name="SuiteCommerce.ContactUsForm.CCTSettingsHelper"/>
define("SuiteCommerce.ContactUsForm.CCTSettingsHelper", ["require", "exports", "underscore"], function (require, exports, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var additionalFieldsLength = 5;
    var buttonStyles = {
        1: 'primary',
        2: 'secondary',
        3: 'tertiary'
    };
    // Field types mapping for "customlist_sc_cct_cuf_add_field_types" record instances
    var fieldTypesMapping = {
        1: {
            fieldType: "none" /* NONE */,
            validationPattern: false
        },
        2: {
            fieldType: "text" /* TEXT */,
            validationPattern: false
        },
        3: {
            fieldType: "number" /* NUMBER */,
            validationPattern: "number" /* NUMBER */
        },
        4: {
            fieldType: "email" /* EMAIL */,
            validationPattern: "email" /* EMAIL */
        },
        5: {
            fieldType: "url" /* URL */,
            validationPattern: "url" /* URL */
        },
        6: {
            fieldType: "textarea" /* TEXTAREA */,
            validationPattern: false
        },
        7: {
            fieldType: "date" /* DATE */,
            validationPattern: false
        },
        8: {
            fieldType: "checkbox" /* CHECKBOX */,
            validationPattern: false
        }
    };
    function getCCTSettingsMapping(cctSettings) {
        var cctSettingsMapping = {
            formInformation: cctSettings.custrecord_sc_cct_cuf_form_information,
            requiredFieldMessage: cctSettings.custrecord_sc_cct_cuf_required_field_msg,
            feedbackMessages: {
                success: cctSettings.custrecord_sc_cct_cuf_success_msg,
                error: cctSettings.custrecord_sc_cct_cuf_submit_error_msg
            },
            submitButtonStyling: {
                label: cctSettings.custrecord_sc_cct_cuf_button_text,
                helpText: cctSettings.custrecord_sc_cct_cuf_button_help_text,
                style: buttonStyles[cctSettings.custrecord_sc_cct_cuf_button_style]
            },
            hideBackgroundColor: cctSettings.custrecord_sc_cct_cuf_hide_bg_color === 'T',
            mandatoryFieldReference: cctSettings.custrecord_sc_cct_cuf_mtry_field_ref,
            inputFields: [
                {
                    label: cctSettings.custrecord_sc_cct_cuf_name_label,
                    placeholder: cctSettings.custrecord_sc_cct_cuf_name_placeh,
                    hasHelpText: cctSettings.custrecord_sc_cct_cuf_name_help_text !== '',
                    helpText: cctSettings.custrecord_sc_cct_cuf_name_help_text,
                    isMandatory: cctSettings.custrecord_sc_cct_cuf_mtry_name_field === 'T',
                    hideField: cctSettings.custrecord_sc_cct_cuf_hide_name_field === 'T',
                    fieldId: 'firstname',
                    fieldType: "text" /* TEXT */
                },
                {
                    label: cctSettings.custrecord_sc_cct_cuf_lastname_label,
                    placeholder: cctSettings.custrecord_sc_cct_cuf_lastname_placeh,
                    hasHelpText: cctSettings.custrecord_sc_cct_cuf_lastname_help_text !== '',
                    helpText: cctSettings.custrecord_sc_cct_cuf_lastname_help_text,
                    isMandatory: cctSettings.custrecord_sc_cct_cuf_mtry_lastname === 'T',
                    hideField: cctSettings.custrecord_sc_cct_cuf_hide_lastname === 'T',
                    fieldId: 'lastname',
                    fieldType: "text" /* TEXT */
                },
                {
                    label: cctSettings.custrecord_sc_cct_cuf_email_label,
                    placeholder: cctSettings.custrecord_sc_cct_cuf_email_placeh,
                    hasHelpText: cctSettings.custrecord_sc_cct_cuf_email_help_text !== '',
                    helpText: cctSettings.custrecord_sc_cct_cuf_email_help_text,
                    isMandatory: cctSettings.custrecord_sc_cct_cuf_mtry_email === 'T',
                    hideField: cctSettings.custrecord_sc_cct_cuf_hide_email_field === 'T',
                    fieldId: 'email',
                    fieldType: "email" /* EMAIL */,
                    fieldValidationPattern: "email" /* EMAIL */,
                    invalidEmailMessage: cctSettings.custrecord_sc_cct_cuf_invalid_email_msg
                },
                {
                    label: cctSettings.custrecord_sc_cct_cuf_phone_label,
                    placeholder: cctSettings.custrecord_sc_cct_cuf_phone_placeh,
                    hasHelpText: cctSettings.custrecord_sc_cct_cuf_phone_help_text !== '',
                    helpText: cctSettings.custrecord_sc_cct_cuf_phone_help_text,
                    isMandatory: cctSettings.custrecord_sc_cct_cuf_mtry_phone_field === 'T',
                    hideField: cctSettings.custrecord_sc_cct_cuf_hide_phone_field === 'T',
                    fieldId: 'phone',
                    fieldType: "text" /* TEXT */,
                    fieldValidationPattern: "number" /* NUMBER */
                },
                {
                    label: cctSettings.custrecord_sc_cct_cuf_company_label,
                    placeholder: cctSettings.custrecord_sc_cct_cuf_company_placeh,
                    hasHelpText: cctSettings.custrecord_sc_cct_cuf_company_help_text !== '',
                    helpText: cctSettings.custrecord_sc_cct_cuf_company_help_text,
                    isMandatory: cctSettings.custrecord_sc_cct_cuf_mtry_company_field === 'T',
                    hideField: cctSettings.custrecord_sc_cct_cuf_hide_company_field === 'T',
                    fieldId: 'company',
                    fieldType: "text" /* TEXT */
                },
                {
                    label: cctSettings.custrecord_sc_cct_cuf_subject_label,
                    placeholder: cctSettings.custrecord_sc_cct_cuf_subject_placeh,
                    hasHelpText: cctSettings.custrecord_sc_cct_cuf_subject_help_text !== '',
                    helpText: cctSettings.custrecord_sc_cct_cuf_subject_help_text,
                    isMandatory: cctSettings.custrecord_sc_cct_cuf_mtry_subject_field === 'T',
                    hideField: cctSettings.custrecord_sc_cct_cuf_hide_subject_field === 'T',
                    fieldId: 'subject',
                    fieldType: "text" /* TEXT */
                },
                {
                    label: cctSettings.custrecord_sc_cct_cuf_message_label,
                    placeholder: cctSettings.custrecord_sc_cct_cuf_message_placeh,
                    hasHelpText: cctSettings.custrecord_sc_cct_cuf_message_help_text !== '',
                    helpText: cctSettings.custrecord_sc_cct_cuf_message_help_text,
                    isMandatory: cctSettings.custrecord_sc_cct_cuf_mtry_message_field === 'T',
                    hideField: cctSettings.custrecord_sc_cct_cuf_hide_message_field === 'T',
                    fieldId: 'message',
                    fieldType: "textarea" /* TEXTAREA */
                }
            ]
        };
        // Set additional fields for CCT instance
        _.bind(setCCTSettingMappingForAdditionalFields, cctSettingsMapping, cctSettings)();
        // Sort input fields
        _.bind(sortInputFields, cctSettingsMapping, cctSettings)();
        // Ignore hidden input fields
        cctSettingsMapping.inputFields = _.filter(cctSettingsMapping.inputFields, function filterHiddenInputFields(inputField) {
            return !inputField.hideField;
        });
        return cctSettingsMapping;
    }
    exports.getCCTSettingsMapping = getCCTSettingsMapping;
    function setCCTSettingMappingForAdditionalFields(cctSettings) {
        for (var i = 1; i <= additionalFieldsLength; i++) {
            var internalID = cctSettings['custrecord_sc_cct_cuf_add_f_id_' + i];
            var fieldTypeId = +cctSettings['custrecord_sc_cct_cuf_add_f_type_' + i];
            var fieldType = fieldTypesMapping[fieldTypeId].fieldType;
            var fieldValidationPattern = fieldTypesMapping[fieldTypeId].validationPattern;
            var additionalField = {
                internalId: internalID,
                label: cctSettings['custrecord_sc_cct_cuf_add_f_label_' + i],
                placeholder: cctSettings['custrecord_sc_cct_cuf_add_f_placeh_' + i],
                hasHelpText: cctSettings['custrecord_sc_cct_cuf_add_f_help_text_' + i] !== '',
                helpText: cctSettings['custrecord_sc_cct_cuf_add_f_help_text_' + i],
                isMandatory: cctSettings['custrecord_sc_cct_cuf_mtry_add_field_' + i] === 'T',
                hideField: cctSettings['custrecord_sc_cct_cuf_hide_add_field_' + i] === 'T',
                fieldId: internalID,
                fieldType: fieldType,
                fieldValidationPattern: fieldValidationPattern,
            };
            if (additionalField.fieldType === "email" /* EMAIL */) {
                additionalField.invalidEmailMessage = cctSettings.custrecord_sc_cct_cuf_invalid_email_msg;
            }
            this.inputFields.push(additionalField);
        }
    }
    function sortInputFields(cctSettings) {
        var _this = this;
        var inputFieldsSorting = getInputFieldsSorting(cctSettings);
        var inputFields = _.clone(this.inputFields);
        _.each(inputFieldsSorting, function (fieldPosition, index) {
            if (fieldPosition) {
                var inputFieldToRelocate = inputFields[+fieldPosition];
                var inputFieldToRelocateId_1 = inputFieldToRelocate.fieldId;
                var inputFieldToRelocateLabel_1 = inputFieldToRelocate.label;
                var inputFieldCurrentIndex = _.findIndex(_this.inputFields, function (inputField) {
                    if (inputField.fieldId) {
                        return inputFieldToRelocateId_1 === inputField.fieldId;
                    }
                    if (inputField.label) {
                        return inputFieldToRelocateLabel_1 === inputField.label;
                    }
                    return false;
                });
                _this.inputFields.splice(inputFieldCurrentIndex, 1);
                _this.inputFields.splice(index, 0, inputFieldToRelocate);
            }
        });
    }
    function getInputFieldsSorting(cctSettings) {
        var inputFieldsSorting = [];
        var inputFieldsPositionKeys = [
            'custrecord_sc_cct_cuf_field_position_1',
            'custrecord_sc_cct_cuf_field_position_2',
            'custrecord_sc_cct_cuf_field_position_3',
            'custrecord_sc_cct_cuf_field_position_4',
            'custrecord_sc_cct_cuf_field_position_5',
            'custrecord_sc_cct_cuf_field_position_6',
            'custrecord_sc_cct_cuf_field_position_7',
            'custrecord_sc_cct_cuf_field_position_8',
            'custrecord_sc_cct_cuf_field_position_9',
            'custrecord_sc_cct_cuf_field_position_10',
            'custrecord_sc_cct_cuf_field_position_11',
            'custrecord_sc_cct_cuf_field_position_12'
        ];
        _.each(inputFieldsPositionKeys, function (key) {
            var inputFieldPosition = cctSettings[key];
            if (inputFieldPosition === '1') {
                inputFieldPosition = false;
            }
            else {
                inputFieldPosition = parseInt(cctSettings[key], 10) - 2;
            }
            inputFieldsSorting.push(inputFieldPosition);
        });
        return inputFieldsSorting;
    }
});
/// <amd-module name="SuiteCommerce.ContactUsForm.InputField.Collection"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.ContactUsForm.InputField.Collection", ["require", "exports", "SuiteCommerce.ContactUsForm.InputField.Model", "Backbone"], function (require, exports, ContactUsForm_InputField_Model_1, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InputFieldCollection = /** @class */ (function (_super) {
        __extends(InputFieldCollection, _super);
        function InputFieldCollection() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.model = ContactUsForm_InputField_Model_1.InputFieldModel;
            return _this;
        }
        return InputFieldCollection;
    }(Backbone_1.Collection));
    exports.InputFieldCollection = InputFieldCollection;
});
/// <amd-module name="SuiteCommerce.ContactUsForm.InputField.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.ContactUsForm.InputField.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InputFieldModel = /** @class */ (function (_super) {
        __extends(InputFieldModel, _super);
        function InputFieldModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(InputFieldModel.prototype, "isMandatory", {
            get: function () {
                return this.get('isMandatory');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "isTextArea", {
            get: function () {
                return this.get('fieldType') === "textarea" /* TEXTAREA */;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "isCheckbox", {
            get: function () {
                return this.get('fieldType') === "checkbox" /* CHECKBOX */;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "isDate", {
            get: function () {
                return this.get('fieldType') === "date" /* DATE */;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "isSubtitle", {
            get: function () {
                return this.get('fieldType') === "none" /* NONE */;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "label", {
            get: function () {
                return this.get('label');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "placeholder", {
            get: function () {
                return this.get('placeholder');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "hasHelpText", {
            get: function () {
                return !!this.get('hasHelpText');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "helpText", {
            get: function () {
                return this.get('helpText');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputFieldModel.prototype, "fieldId", {
            get: function () {
                return this.get('fieldId');
            },
            enumerable: true,
            configurable: true
        });
        return InputFieldModel;
    }(Backbone_1.Model));
    exports.InputFieldModel = InputFieldModel;
});
/// <amd-module name="SuiteCommerce.ContactUsForm.InputField.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.ContactUsForm.InputField.View", ["require", "exports", "Backbone", "contact_us_form_input_field.tpl"], function (require, exports, Backbone_1, template) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InputFieldView = /** @class */ (function (_super) {
        __extends(InputFieldView, _super);
        function InputFieldView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = template;
            _this.cmsContentId = options.cmsContentId;
            return _this;
        }
        InputFieldView.prototype.getContext = function () {
            var model = this.model;
            return {
                label: model.label,
                placeholder: model.placeholder,
                hasHelpText: model.hasHelpText,
                helpText: model.helpText,
                fieldId: model.fieldId,
                isTextArea: model.isTextArea,
                isCheckbox: model.isCheckbox,
                isDate: model.isDate,
                isMandatory: model.isMandatory,
                isSubtitle: model.isSubtitle,
                cmsContentId: this.cmsContentId,
            };
        };
        return InputFieldView;
    }(Backbone_1.View));
    exports.InputFieldView = InputFieldView;
});
/// <amd-module name="SuiteCommerce.ContactUsForm.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.ContactUsForm.Model", ["require", "exports", "Backbone", "SuiteCommerce.MapAndContactUs.Utils", "underscore"], function (require, exports, Backbone_1, Utils_1, _) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ContactUsFormModel = /** @class */ (function (_super) {
        __extends(ContactUsFormModel, _super);
        function ContactUsFormModel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.urlRoot = Utils_1.Utils.getAbsoluteUrl(getExtensionAssetsPath('services/ContactUsForm.Service.ss'));
            _this.validation = {};
            return _this;
        }
        ContactUsFormModel.prototype.setFieldsValidation = function (inputFields, requiredFieldMessage) {
            var _this = this;
            // Fields that are not hidden have to be validated
            _.each(inputFields, function (fieldSettings) {
                if (!fieldSettings.hideField && fieldSettings.fieldId) {
                    // create validation object for current field
                    _this.setFieldValidation(fieldSettings, requiredFieldMessage);
                }
            });
        };
        ContactUsFormModel.prototype.setFieldValidation = function (fieldSettings, requiredFieldMessage) {
            var fieldValidation = [{
                    required: fieldSettings.isMandatory,
                    msg: requiredFieldMessage.replace('[[field]]', fieldSettings.label),
                }];
            if (fieldSettings.fieldValidationPattern) {
                var fieldValidationPattern = {
                    pattern: fieldSettings.fieldValidationPattern
                };
                if (fieldSettings.invalidEmailMessage) {
                    fieldValidationPattern.msg = fieldSettings.invalidEmailMessage;
                }
                fieldValidation.push(fieldValidationPattern);
            }
            this.validation[fieldSettings.fieldId] = fieldValidation;
        };
        return ContactUsFormModel;
    }(Backbone_1.Model));
    exports.ContactUsFormModel = ContactUsFormModel;
});
/// <amd-module name="SuiteCommerce.ContactUsForm.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.ContactUsForm.View", ["require", "exports", "CustomContentType.Base.View", "Backbone.FormView", "Backbone.CollectionView", "SuiteCommerce.ContactUsForm.InputField.Collection", "SuiteCommerce.ContactUsForm.CCTSettingsHelper", "SuiteCommerce.ContactUsForm.InputField.View", "underscore", "contact_us_form.tpl", "SuiteCommerce.ContactUsForm.InputField.Model", "SuiteCommerce.MapAndContactUs.Common.Instrumentation.Helper", "SuiteCommerce.MapAndContactUs.Instrumentation", "SuiteCommerce.MapAndContactUs.ExtMessage.View", "SuiteCommerce.MapAndContactUs.ExtMessage.Model"], function (require, exports, CustomContentTypeBaseView, BackboneFormView, BackboneCollectionView, ContactUsForm_InputField_Collection_1, ContactUsForm_CCTSettingsHelper_1, ContactUsForm_InputField_View_1, _, template, ContactUsForm_InputField_Model_1, Instrumentation_Helper_1, Instrumentation_1, ExtMessage_View_1, ExtMessage_Model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ContactUsFormView = /** @class */ (function (_super) {
        __extends(ContactUsFormView, _super);
        function ContactUsFormView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = template;
            _this.bindings = {};
            _this.events = {
                'submit form': 'submitForm',
            };
            _this.cctSettingsMapping;
            BackboneFormView.add(_this);
            return _this;
        }
        ContactUsFormView.prototype.install = function (options, contextData) {
            _super.prototype.install.call(this, options, contextData);
            this.log(options);
            return jQuery.Deferred().resolve();
        };
        ContactUsFormView.prototype.log = function (options) {
            Instrumentation_Helper_1.InstrumentationHelper.log({
                activity: 'Contact Us Form loaded',
            });
            this.logAdditionalFields(options);
        };
        ContactUsFormView.prototype.logAdditionalFields = function (options) {
            var count = 0;
            for (var i = 1; i <= 5; i++) {
                if (options["custrecord_sc_cct_cuf_add_f_id_" + i] &&
                    options["custrecord_sc_cct_cuf_hide_add_field_" + i] === 'F') {
                    count++;
                }
            }
            Instrumentation_Helper_1.InstrumentationHelper.log({
                activity: 'Additional Fields',
                instanceCount: count,
            });
        };
        Object.defineProperty(ContactUsFormView.prototype, "childViews", {
            get: function () {
                var _this = this;
                return {
                    'InputFields.Collection': function () {
                        var inputFieldsCollectionView;
                        if (_this.cctSettingsMapping) {
                            var inputFieldModels_1 = [];
                            _.each(_this.cctSettingsMapping.inputFields, function (inputField) {
                                inputFieldModels_1.push(new ContactUsForm_InputField_Model_1.InputFieldModel(inputField));
                            });
                            inputFieldsCollectionView = new BackboneCollectionView({
                                childView: ContactUsForm_InputField_View_1.InputFieldView,
                                collection: new ContactUsForm_InputField_Collection_1.InputFieldCollection(inputFieldModels_1),
                                childViewOptions: {
                                    cmsContentId: _this.model.get('cmsContentId'),
                                },
                            });
                            // After input fields rendering, input field's bindings between View and Template have to be defined
                            _this.setFieldsBindings(_this.cctSettingsMapping.inputFields);
                            // Following the previous line, model's validation object also has to be defined
                            _this.model.setFieldsValidation(_this.cctSettingsMapping.inputFields, _this.cctSettingsMapping.requiredFieldMessage);
                            return inputFieldsCollectionView;
                        }
                        return;
                    },
                    'Feedback.Messages': function () {
                        if (_this.feedbackMessage) {
                            return new ExtMessage_View_1.ExtMessageView({
                                model: new ExtMessage_Model_1.ExtMessageModel({
                                    message: _this.feedbackMessage.message,
                                    type: _this.feedbackMessage.type,
                                    closable: false
                                })
                            });
                        }
                    },
                };
            },
            enumerable: true,
            configurable: true
        });
        ContactUsFormView.prototype.setFieldsBindings = function (inputFields) {
            var _this = this;
            // Set input's fields bindings between template and view
            _.each(inputFields, function (fieldSettings) {
                if (fieldSettings.fieldId) {
                    // !fieldSettings.hideField && fieldSettings.fieldId
                    var fieldSelector = ".contact-us-form form [name=\"" + fieldSettings.fieldId + "\"]";
                    // Set bindings's object for input field
                    _this.bindings[fieldSelector] = fieldSettings.fieldId;
                }
            });
            // Re-bind fields between View and Model
            BackboneFormView.formatBindings(this);
        };
        ContactUsFormView.prototype.submitForm = function (event) {
            var _this = this;
            event.preventDefault();
            var promise = this.saveForm(event);
            var log = Instrumentation_1.default.getLog('SubmittedForm');
            log.startTimer();
            if (promise) {
                promise
                    .fail(function () {
                    _this.logSubmission(log, 'Error');
                    _this.feedbackMessage = {
                        message: _this.cctSettingsMapping.feedbackMessages.error,
                        type: 'error',
                    };
                    _this.render();
                })
                    .done(function () {
                    _this.logSubmission(log, 'Success');
                    _this.clearFiledsValues();
                    _this.feedbackMessage = {
                        message: _this.cctSettingsMapping.feedbackMessages.success,
                        type: 'success',
                    };
                    _this.render();
                });
            }
        };
        ContactUsFormView.prototype.logSubmission = function (log, result) {
            log.endTimer();
            log.setParameters({
                activity: 'Contact Form submitted',
                subType: result,
                totalTime: log.getElapsedTimeForTimer(),
            });
            log.submit();
        };
        ContactUsFormView.prototype.clearFiledsValues = function () {
            var _this = this;
            _.each(this.validationModel.keys(), function (attributeName) {
                if (attributeName !== 'cmsContentId' &&
                    attributeName !== 'defaultSubsidiary' &&
                    attributeName !== 'domain') {
                    _this.validationModel.unset(attributeName);
                }
            });
        };
        ContactUsFormView.prototype.getContext = function () {
            if (_.isEmpty(this.settings)) {
                return;
            }
            var cmsContentId = this.instanceId.split('-')[1];
            // CCT's setting can be accessed in getContext method.
            // For that reason, cctSettingMapping variable is set at this point.
            this.cctSettingsMapping = ContactUsForm_CCTSettingsHelper_1.getCCTSettingsMapping(this.settings);
            // CMS Content ID also can be accessed in this method
            this.model.set('cmsContentId', cmsContentId);
            var hasMandatoryFields = _.find(this.cctSettingsMapping.inputFields, function (field) { return field.isMandatory; });
            return {
                formInformation: this.cctSettingsMapping.formInformation,
                submitButtonStyling: this.cctSettingsMapping.submitButtonStyling,
                hideFormBackgroundColor: this.cctSettingsMapping.hideBackgroundColor,
                mandatoryFieldReference: this.cctSettingsMapping.mandatoryFieldReference,
                hasMandatoryFields: !!hasMandatoryFields,
            };
        };
        return ContactUsFormView;
    }(CustomContentTypeBaseView));
    exports.ContactUsFormView = ContactUsFormView;
});
/// <amd-module name="SuiteCommerce.ContactUsFormCCT"/>
define("SuiteCommerce.ContactUsFormCCT", ["require", "exports", "SuiteCommerce.ContactUsForm.Model", "SuiteCommerce.ContactUsForm.View", "underscore"], function (require, exports, ContactUsForm_Model_1, ContactUsForm_View_1, _) {
    "use strict";
    return {
        mountToApp: function (container) {
            var environment = container.getComponent('Environment');
            var model = new ContactUsForm_Model_1.ContactUsFormModel();
            model.set('defaultSubsidiary', this.getDefaultSubsidiary(environment));
            model.set('domain', this.getSCDomain(environment));
            container.getComponent('CMS').registerCustomContentType({
                id: 'cct_sc_contactusform',
                view: ContactUsForm_View_1.ContactUsFormView,
                options: {
                    container: container,
                    model: model,
                },
            });
        },
        getDefaultSubsidiary: function (environment) {
            var subsidiaries = environment.getSiteSetting().subsidiaries;
            var defaultSubsidiary = _.find(subsidiaries, function (subsidiary) {
                return subsidiary.isdefault === 'T';
            });
            return defaultSubsidiary.internalid;
        },
        getSCDomain: function (environment) {
            var homeUrl = environment.getConfig().siteSettings.touchpoints.home;
            var match = homeUrl.match(/:\/\/((?:www[0-9]?\.)?.[^/:]+)/i);
            if (match !== null && match.length === 2 && typeof match[1] === 'string' && match[1].length > 0) {
                return match[1];
            }
            return null;
        },
    };
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.ExtMessage.Model"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.MapAndContactUs.ExtMessage.Model", ["require", "exports", "Backbone"], function (require, exports, Backbone_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExtMessageModel = /** @class */ (function (_super) {
        __extends(ExtMessageModel, _super);
        function ExtMessageModel(options) {
            return _super.call(this, options) || this;
        }
        Object.defineProperty(ExtMessageModel.prototype, "message", {
            get: function () {
                return this.get('message');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtMessageModel.prototype, "type", {
            get: function () {
                return this.get('type');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExtMessageModel.prototype, "closable", {
            get: function () {
                return this.get('closable');
            },
            enumerable: true,
            configurable: true
        });
        return ExtMessageModel;
    }(Backbone_1.Model));
    exports.ExtMessageModel = ExtMessageModel;
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.ExtMessage.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.MapAndContactUs.ExtMessage.View", ["require", "exports", "Backbone", "sc_ext_message.tpl"], function (require, exports, Backbone_1, MessageViewTemplate) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ExtMessageView = /** @class */ (function (_super) {
        __extends(ExtMessageView, _super);
        function ExtMessageView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = MessageViewTemplate;
            _this.events = {
                'click [data-action="ext-message-close-message"]': 'closeMessage',
            };
            return _this;
        }
        ;
        ExtMessageView.prototype.closeMessage = function () {
            this.remove();
        };
        ;
        ExtMessageView.prototype.getContext = function () {
            return {
                showMessage: this.model.message.length > 0,
                message: this.model.message,
                isClosable: this.model.closable,
                type: this.model.type ? this.model.type : '',
            };
        };
        return ExtMessageView;
    }(Backbone_1.View));
    exports.ExtMessageView = ExtMessageView;
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.Instrumentation.Log"/>
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
define("SuiteCommerce.MapAndContactUs.Instrumentation.Log", ["require", "exports", "SuiteCommerce.MapAndContactUs.Instrumentation.Logger"], function (require, exports, Instrumentation_Logger_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogSeverity;
    (function (LogSeverity) {
        LogSeverity["INFO"] = "info";
        LogSeverity["ERROR"] = "error";
    })(LogSeverity = exports.LogSeverity || (exports.LogSeverity = {}));
    var Log = /** @class */ (function () {
        function Log(attributes) {
            if (attributes === void 0) { attributes = { label: '' }; }
            this.setInitialAttributes(attributes);
        }
        Log.prototype.setInitialAttributes = function (attributes) {
            var defaultAttributes = {
                label: null,
                timer: {},
                severity: LogSeverity.INFO,
            };
            var _a = __assign(__assign({}, defaultAttributes), attributes), label = _a.label, parametersToSubmit = _a.parametersToSubmit, timer = _a.timer, severity = _a.severity;
            this.label = label;
            this.parametersToSubmit = parametersToSubmit;
            this.timer = timer;
            this.severity = severity;
        };
        Log.prototype.startTimer = function () {
            this.timer.startTime = this.getTimestamp();
        };
        Log.prototype.endTimer = function () {
            this.timer.endTime = this.getTimestamp();
        };
        Log.prototype.getTimestamp = function () {
            if (!this.isOldInternetExplorer()) {
                return performance.now() || Date.now();
            }
            return Date.now();
        };
        Log.prototype.getElapsedTimeForTimer = function () {
            var timer = this.timer;
            if (timer.startTime && timer.endTime) {
                if (timer.startTime > timer.endTime) {
                    console.warn('Start time should be minor that end time in timer');
                    return null;
                }
                return timer.endTime - timer.startTime;
            }
            if (!timer.startTime)
                console.warn('The Start time is not defined');
            if (!timer.endTime)
                console.warn('The End time is not defined');
            return null;
        };
        Log.prototype.setParameters = function (data) {
            var _this = this;
            Object.keys(data).forEach(function (parameter) {
                _this.setParameter(parameter, data[parameter]);
            });
        };
        Log.prototype.setParameter = function (parameter, value) {
            var logData = this.parametersToSubmit;
            logData[parameter] = value;
            this.parametersToSubmit = logData;
        };
        Log.prototype.submit = function () {
            if (!this.isOldInternetExplorer()) {
                switch (this.severity) {
                    case LogSeverity.ERROR:
                        this.submitAsError();
                        break;
                    case LogSeverity.INFO:
                    default:
                        this.submitAsInfo();
                }
            }
        };
        Log.prototype.isOldInternetExplorer = function () {
            return !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g);
        };
        Log.prototype.submitAsError = function () {
            Instrumentation_Logger_1.Logger.getLogger().error(this.parametersToSubmit);
        };
        Log.prototype.submitAsInfo = function () {
            Instrumentation_Logger_1.Logger.getLogger().info(this.parametersToSubmit);
        };
        return Log;
    }());
    exports.Log = Log;
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.Instrumentation.Logger"/>
define("SuiteCommerce.MapAndContactUs.Instrumentation.Logger", ["require", "exports", "SuiteCommerce.MapAndContactUs.Instrumentation.MockAppender"], function (require, exports, Instrumentation_MockAppender_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Logger = /** @class */ (function () {
        function Logger() {
        }
        Logger.getLogger = function () {
            this.instance = this.instance || this.buildLoggerInstance();
            return this.instance;
        };
        Logger.buildLoggerInstance = function () {
            var _a;
            try {
                // @ts-ignore
                var LoggersModule = require('Loggers').Loggers;
                // @ts-ignore
                var elasticAppender = require('Loggers.Appender.ElasticLogger')
                    .LoggersAppenderElasticLogger.getInstance();
                // Just for test purposes in local environments: the output of MockApppender is the browser console.
                var mockAppender = Instrumentation_MockAppender_1.MockAppender.getInstance();
                // @ts-ignore
                var configurationModule = require('Loggers.Configuration');
                var loggerName = "CommerceExtensions" + Logger.options.queueNameSuffix;
                LoggersModule.setConfiguration((_a = {},
                    _a[loggerName] = {
                        log: [
                            { profile: configurationModule.prod, appenders: [elasticAppender] },
                            { profile: configurationModule.dev, appenders: [mockAppender] }
                        ],
                        actions: {},
                        loggers: {},
                    },
                    _a));
                return LoggersModule.getLogger(loggerName);
            }
            catch (e) {
                return {
                    info: function (obj) { },
                    error: function (obj) { }
                };
            }
        };
        return Logger;
    }());
    exports.Logger = Logger;
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.Instrumentation.MockAppender"/>
define("SuiteCommerce.MapAndContactUs.Instrumentation.MockAppender", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MockAppender = /** @class */ (function () {
        function MockAppender() {
        }
        MockAppender.prototype.info = function (data) {
            console.info('MockAppender - Info', data);
        };
        MockAppender.prototype.error = function (data) {
            console.error('MockAppender - Error', data);
        };
        MockAppender.prototype.ready = function () {
            return true;
        };
        MockAppender.getInstance = function () {
            if (!MockAppender.instance) {
                MockAppender.instance = new MockAppender();
            }
            return MockAppender.instance;
        };
        MockAppender.prototype.start = function (action, options) {
            return options;
        };
        MockAppender.prototype.end = function (startOptions, options) { };
        return MockAppender;
    }());
    exports.MockAppender = MockAppender;
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.Instrumentation"/>
define("SuiteCommerce.MapAndContactUs.Instrumentation", ["require", "exports", "underscore", "SuiteCommerce.MapAndContactUs.Instrumentation.Logger", "SuiteCommerce.MapAndContactUs.Instrumentation.Log"], function (require, exports, _, Instrumentation_Logger_1, Instrumentation_Log_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var logs = [];
    exports.default = {
        initialize: function (options) {
            Instrumentation_Logger_1.Logger.options = options;
        },
        getLog: function (logLabel) {
            return this.getLogModelByLabel(logLabel) || this.registerNewLog(logLabel);
        },
        getLogModelByLabel: function (label) {
            return _(logs).findWhere({ label: label });
        },
        registerNewLog: function (label) {
            var defaultParameters = _.clone(Instrumentation_Logger_1.Logger.options.defaultParameters);
            var log = new Instrumentation_Log_1.Log({ label: label, parametersToSubmit: defaultParameters });
            logs.push(log);
            return log;
        },
        setParameterForAllLogs: function (parameter, value) {
            logs.forEach(function (log) {
                log.setParameter(parameter, value);
            });
        },
        setParametersForAllLogs: function (data) {
            logs.forEach(function (log) {
                log.setParameters(data);
            });
        },
        submitLogs: function () {
            logs.forEach(function (log) {
                log.submit();
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.MapAndContactInfoCCT.View"/>
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define("SuiteCommerce.MapAndContactInfoCCT.View", ["require", "exports", "CustomContentType.Base.View", "jQuery", "map_and_contact_info.tpl", "SuiteCommerce.MapAndContactUs.Common.Instrumentation.Helper"], function (require, exports, CustomContentTypeBaseView, jQuery, template, Instrumentation_Helper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MapAndContactInfoCCTView = /** @class */ (function (_super) {
        __extends(MapAndContactInfoCCTView, _super);
        function MapAndContactInfoCCTView(options) {
            var _this = _super.call(this, options) || this;
            _this.template = template;
            _this.contextDataRequest = ['item'];
            if (options) {
                _this.container = options.container;
            }
            return _this;
        }
        MapAndContactInfoCCTView.prototype.install = function (options, contextData) {
            _super.prototype.install.call(this, options, contextData);
            Instrumentation_Helper_1.InstrumentationHelper.log({
                activity: 'Map and Contact loaded',
            });
            return jQuery.Deferred().resolve();
        };
        MapAndContactInfoCCTView.prototype.validateContextDataRequest = function () {
            return true;
        };
        MapAndContactInfoCCTView.prototype.getContext = function () {
            var hasHeader = !!this.settings.custrecord_cct_ns_mcicct_header;
            var hasContact = !!this.settings.custrecord_cct_ns_mcicct_busaddrinfo;
            var hasPhone = !!this.settings.custrecord_cct_ns_mcicct_phonenumber;
            var hasEmail = !!this.settings.custrecord_cct_ns_mcicct_primaryemail;
            return {
                mapPositionLeft: this.settings.custrecord_cct_ns_mcicct_mappos === '1',
                header: this.settings.custrecord_cct_ns_mcicct_header,
                hasHeader: hasHeader,
                mapUrl: this.settings.custrecord_cct_ns_mcicct_mapurl,
                hasMapUrl: !!this.settings.custrecord_cct_ns_mcicct_mapurl,
                singleColumnWidthClass: this.settings.custrecord_cct_ns_mcicct_mapurl
                    ? 'width-single-column'
                    : '',
                singleColumnCenterAlignmentClass: this.settings.custrecord_cct_ns_mcicct_mapurl
                    ? ''
                    : 'center-alignment-unique-column',
                contact: this.settings.custrecord_cct_ns_mcicct_busaddrinfo,
                hasContact: hasContact,
                phone: this.settings.custrecord_cct_ns_mcicct_phonenumber,
                hasPhone: hasPhone,
                phoneButtonText: this.settings.custrecord_cct_ns_mcicct_phonebtntext,
                email: this.settings.custrecord_cct_ns_mcicct_primaryemail,
                emailButtonText: this.settings.custrecord_cct_ns_mcicct_emailbtntext,
                hasEmail: hasEmail,
                hasAnyContact: hasContact || hasPhone || hasEmail,
                backgroundClass: this.settings.custrecord_cct_ns_mcicct_hidebackground === 'F' ? 'background-color' : '',
                hideIconsClass: this.settings.custrecord_cct_ns_mcicct_hideicons === 'T' ? 'hide-contact-icons' : '',
                mapAloneClass: !hasContact && !hasPhone && !hasEmail ? 'map-alone-class' : '',
            };
        };
        return MapAndContactInfoCCTView;
    }(CustomContentTypeBaseView));
    exports.MapAndContactInfoCCTView = MapAndContactInfoCCTView;
});
/// <amd-module name="SuiteCommerce.MapAndContactInfoCCT"/>
define("SuiteCommerce.MapAndContactInfoCCT", ["require", "exports", "SuiteCommerce.MapAndContactInfoCCT.View"], function (require, exports, MapAndContactInfoCCT_View_1) {
    "use strict";
    return {
        mountToApp: function (container) {
            this.registerCCT(container);
        },
        registerCCT: function (container) {
            container.getComponent('CMS').registerCustomContentType({
                id: 'cct_netsuite_mapcontactcct',
                view: MapAndContactInfoCCT_View_1.MapAndContactInfoCCTView,
                options: {
                    container: container,
                },
            });
        },
    };
});
/// <amd-module name="SuiteCommerce.MapAndContactUs.Main"/>
define("SuiteCommerce.MapAndContactUs.Main", ["require", "exports", "SuiteCommerce.MapAndContactInfoCCT", "SuiteCommerce.ContactUsFormCCT", "SuiteCommerce.MapAndContactUs.Common.Instrumentation.Helper"], function (require, exports, MapAndContactInfoCCT, ContactUsFormCCT, Instrumentation_Helper_1) {
    "use strict";
    return {
        mountToApp: function (container) {
            Instrumentation_Helper_1.InstrumentationHelper.initializeInstrumentation(container);
            MapAndContactInfoCCT.mountToApp(container);
            ContactUsFormCCT.mountToApp(container);
        },
    };
});
};
extensions['Someoddpilot.Pages.1.0.10'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/Pages/1.0.10/' + asset;
};
// @module Someoddpilot.Pages.About
define('Someoddpilot.Pages.About.View',
    [
        'pages_about.tpl'
        , 'Backbone'
    ]
    , function (
        pages_about_tpl
        , Backbone
    ) {
        'use strict';
        // @class Someoddpilot.Pages.About.View @extends Backbone.View
        return Backbone.View.extend({
            template: pages_about_tpl
            , initialize: function (options) {
            }
            , events: {}
            , bindings: {}
            , childViews: {}
            //@method getContext @return Someoddpilot.Pages.About.View.Context
            , getContext: function getContext() {
                //@class Someoddpilot.Pages.About.View.Context
                return {};
            }
        });
    });
// @module Someoddpilot.Pages.Components
define('Someoddpilot.Pages.Components.View',
    [
        'pages_components.tpl'
        , 'Backbone'
    ]
    , function (
        pages_components_tpl
        , Backbone
    ) {
        'use strict';
        // @class Someoddpilot.Pages.Components.View @extends Backbone.View
        return Backbone.View.extend({
            template: pages_components_tpl
            , initialize: function (options) {
            }
            , events: {}
            , bindings: {}
            , childViews: {}
            //@method getContext @return Someoddpilot.Pages.Components.View.Context
            , getContext: function getContext() {
                //@class Someoddpilot.Pages.Components.View.Context
                return {};
            }
        });
    });
// @module Someoddpilot.Pages.Contact
define('Someoddpilot.Pages.Contact.View',
    [
        'pages_contact.tpl'
        , 'Backbone'
    ]
    , function (
        pages_contact_tpl
        , Backbone
    ) {
        'use strict';
        // @class Someoddpilot.Pages.Contact.View @extends Backbone.View
        return Backbone.View.extend({
            template: pages_contact_tpl
            , initialize: function (options) {
            }
            , events: {}
            , bindings: {}
            , childViews: {}
            //@method getContext @return Someoddpilot.Pages.Contact.View.Context
            , getContext: function getContext() {
                //@class Someoddpilot.Pages.Contact.View.Context
                return {};
            }
        });
    });
// @module Someoddpilot.Pages.Privacy
define('Someoddpilot.Pages.Privacy.View',
    [
        'pages_privacy.tpl'
        , 'Backbone'
    ]
    , function (
        pages_privacy_tpl
        , Backbone
    ) {
        'use strict';
        // @class Someoddpilot.Pages.Privacy.View @extends Backbone.View
        return Backbone.View.extend({
            template: pages_privacy_tpl
            , initialize: function (options) {
            }
            , events: {}
            , bindings: {}
            , childViews: {}
            //@method getContext @return Someoddpilot.Pages.Privacy.View.Context
            , getContext: function getContext() {
                //@class Someoddpilot.Pages.Privacy.View.Context
                return {};
            }
        });
    });
// @module Someoddpilot.Pages.Terms
define('Someoddpilot.Pages.Terms.View',
    [
        'pages_terms.tpl'
        , 'Backbone'
    ]
    , function (
        pages_terms_tpl
        , Backbone
    ) {
        'use strict';
        // @class Someoddpilot.Pages.Terms.View @extends Backbone.View
        return Backbone.View.extend({
            template: pages_terms_tpl
            , initialize: function (options) {
            }
            , events: {}
            , bindings: {}
            , childViews: {}
            //@method getContext @return Someoddpilot.Pages.Terms.View.Context
            , getContext: function getContext() {
                //@class Someoddpilot.Pages.Terms.View.Context
                return {};
            }
        });
    });
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.Pages.Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({});
});
define('Someoddpilot.Pages',
    [
        'Someoddpilot.Pages.About.View',
        'Someoddpilot.Pages.Contact.View',
        'Someoddpilot.Pages.Privacy.View',
        'Someoddpilot.Pages.Terms.View',
        'Someoddpilot.Pages.Components.View'
    ],
    function (
        AboutView,
        ContactView,
        PrivacyView,
        TermsView,
        ComponentsView
    ) {
        'use strict';
        return {
            mountToApp: function mountToApp(container) {
                /** @type {PageTypeComponent} */
                var PageType = container.getComponent('PageType');
                /*
                 * Create pages and related routes
                 */
                // About page
                PageType.registerPageType({
                    name: 'about',
                    routes: ['about'],
                    view: function() {
                        return new AboutView({ container: container });
                    },
                    defaultTemplate: {
                        name: 'pages_about.tpl',
                        displayName: 'About'
                    }
                });
                // Contact page
                PageType.registerPageType({
                    name: 'contact',
                    routes: ['contact'],
                    view: function() {
                        return new ContactView({ container: container });
                    },
                    defaultTemplate: {
                        name: 'pages_contact.tpl',
                        displayName: 'Contact'
                    }
                });
                // Privacy page
                PageType.registerPageType({
                    name: 'privacy',
                    routes: ['privacy'],
                    view: function() {
                        return new PrivacyView({ container: container });
                    },
                    defaultTemplate: {
                        name: 'pages_privacy.tpl',
                        displayName: 'Privacy'
                    }
                });
                // Terms page
                PageType.registerPageType({
                    name: 'terms',
                    routes: ['terms'],
                    view: function() {
                        return new TermsView({ container: container });
                    },
                    defaultTemplate: {
                        name: 'pages_terms.tpl',
                        displayName: 'Terms'
                    }
                });
                // FrontEndComponents page
                PageType.registerPageType({
                    name: 'components',
                    routes: ['components'],
                    view: function() {
                        return new ComponentsView({ container: container });
                    },
                    defaultTemplate: {
                        name: 'pages_components.tpl',
                        displayName: 'FrontEndComponents'
                    }
                });
            }
        };
    });
};
extensions['Someoddpilot.Subscriptions.0.0.46'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/Subscriptions/0.0.46/' + asset;
};
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.Subscriptions.SS2Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    const colorRgx = /#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i;
    // Used for converting the foreground color values to be used in the svg
    // filter for the package graphics
    function convertHexToDecimal(hexVal) {
        let floatDigits = 3;
        let decimalVal = parseInt(hexVal, 16);
        return (decimalVal / 255 + Number.EPSILON).toFixed(floatDigits);
    }
    function generateSvgFilterValues(item) {
        let fgColor = item.fg_color;
        let rgbValues = fgColor.match(colorRgx);
        item.fgR = convertHexToDecimal(rgbValues[1]);
        item.fgG = convertHexToDecimal(rgbValues[2]);
        item.fgB = convertHexToDecimal(rgbValues[3]);
    }
    function updateCadenceLanguage(item) {
        if (item.frequency) {
            const frequency = Number.parseInt(item.frequency);
            if (frequency === 1) {
                item.frequency = 'Every week';
            } else {
                item.frequency = `Every ${item.frequency} weeks`;
            }
        }
        if (item.shipments) {
            item.shipments =
                item.shipments.toString()
                    .replace('12', 'Ongoing') +
                ' shipments';
        }
    }
    function updateIllustrationImg(item) {
        const quantity = Number.parseInt(item.quantity);
        switch (quantity) {
            case 1:
                item.img = 'bag-amount-one.png';
                break;
            case 3:
                item.img = 'bag-amount-three.png';
                break;
            case 2:
            default:
                item.img = 'bag-amount-two.png';
                break
        }
        item.img = 'img/subscriptions/amount/' + item.img;
    }
    function enableCancelButton(item) {
        item.showCancelButton = true;
        item.showEndLine = false;
    }
    function updateNextShipDate(item) {
        // Convert incoming dates to epochs
        item.shipping_dates = item.shipping_dates.map(date => Date.parse(date));
        // Sort dates
        item.shipping_dates.sort();
        // Determine nearest upcoming shipping date
        const now = Date.now();
        let nextShippingDate = '';
        item.shipping_dates.every(date => {
            if (now < date) {
                nextShippingDate = date;
                return false;
            }
            return true;
        });
        // If no shipment dates in the future for this sub, indicate as such
        if (nextShippingDate === '') {
            item.next_shipping_date = 'No further shipments';
            return;
        }
        // Convert to a date string and add to the item properties
        nextShippingDate = new Date(nextShippingDate);
        item.next_shipping_date = nextShippingDate.toDateString();
    }
    function formatPrice(item) {
        //TAVANO EDITS
        //onsole.log('item', item)
        item.price = item.price;
    }
    function parseFetch(result) {
        if (Array.isArray(result)) {
            result.forEach(item => {
                var itemLength = (item.items && item.items.length) || 0;
                for (var i in item.items) {
                    generateSvgFilterValues(item.items[i]);
                    updateCadenceLanguage(item.items[i]);
                    updateIllustrationImg(item.items[i]);
                    updateNextShipDate(item.items[i]);
                    formatPrice(item.items[i]);
                    if (i == itemLength - 1) {
                        enableCancelButton(item.items[i]);
                    } else {
                        item.items[i].showEndLine = true;
                    }
                }
            });
            return;
        }
        var itemLength = (item.items && item.items.length) || 0;
        for (var i in item.items) {
            generateSvgFilterValues(result.items[i]);
            updateCadenceLanguage(result.items[i]);
            updateIllustrationImg(result.items[i]);
            updateNextShipDate(result.items[i]);
            formatPrice(result.items[i]);
            if (i == itemLength - 1) {
                enableCancelButton(item.items[i]);
            } else {
                item.items[i].showEndLine = true;
            }
        }
    }
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({
        //@property {String} urlRoot
        urlRoot: Utils.getAbsoluteUrl(
            getExtensionAssetsPath(
                "Modules/Subscriptions/SuiteScript2/Subscriptions.Service.ss"
            ),
            true
        ),
        //@inheritdoc
        fetch: function (options) {
            const fetchPromise = Backbone.Model.prototype.fetch.apply(this, options);
            return fetchPromise.done(parseFetch);
        },
        //@property {Object} lightboxData
        lightboxData: {},
        //@method cancel
        cancel: function () {
            // Create a deferred object to return
            let deferred = jQuery.Deferred();
            // Form the API request URL
            let requestUrl = `${this.urlRoot}?s_id=${this.lightboxData.sales_order_id}&action=cancel`;
            // Invoke the cancel request, resolve the deferred on result
            jQuery.ajax(requestUrl).done(result => {
                deferred.resolve(result);
            });
            // Return a promise that can be chained
            return deferred.promise();
        },
        //@method cancel
        updateFrequency: function () {
            // Create a deferred object to return
            let deferred = jQuery.Deferred();
            // Form the API request URL
            let requestUrl = `${this.urlRoot}?s_id=${this.lightboxData.sales_order_id}&subscription_id=${this.lightboxData.subscriptionId}&action=update-frequency&frequency=${this.lightboxData.frequency}`;
            // Invoke the cancel request, resolve the deferred on result
            jQuery.ajax(requestUrl).done(result => {
                deferred.resolve(result);
            });
            // Return a promise that can be chained
            return deferred.promise();
        }
    });
});
// @module Someoddpilot.Utils
define('Someoddpilot.Utils', [], function () {
    'use strict';
    // Closure scoped container reference
    let container;
    // Closure scoped eAPI references
    let user;
    let userPromise;
    function addLocalTouchPoints(touchPoints) {
        let isLocal = /-local\.ssp/.test(window.location.pathname);
        //let scaPath = touchPoints.login.match(/^\/sca[^\/]+\//).pop();
        let scaPath = (touchPoints.login.match(/^\/sca[^\/]+\//) || touchPoints.login.match(/^\/tt-sca[^\/]+\//)).pop();
        if (isLocal) {
            for (const tp in touchPoints) {
                if (/logout|viewcart/.test(tp)) {
                    continue;
                }
                touchPoints[tp] = touchPoints[tp]
                    .replace(/(?!<-local)\.ssp/, '-local.ssp');
            }
            touchPoints.home = touchPoints.home + scaPath + 'shopping-local.ssp';
        }
        return touchPoints;
    }
    function validationRedirect(path) {
        setTimeout(() => {
            Backbone.history.navigate(path, {
                trigger: true
            });
        }, 0);
    }
    function processUserData(callback) {
        // Create a deferred object to return
        let deferred = jQuery.Deferred();
        // If user data has been cached already immediately invoke callback
        if (typeof user !== 'undefined') {
            return deferred.resolve(callback(user));
        }
        // When the user profile promise has resolved, resolve this deferred
        userPromise.done(userData => {
            deferred.resolve(callback(userData));
        });
        // Return a promise that can be chained
        return deferred.promise();
    }
    function generateLoginUrl(touchpoint, fragment) {
        const host = `https://${window.location.hostname}`
        const Environment = container.getComponent('Environment');
        let touchPoints = Environment.getSiteSetting('touchpoints');
        touchPoints = addLocalTouchPoints(touchPoints);
        const login = touchPoints.login;
        const origin = touchpoint || Environment.getConfig('currentTouchpoint');
        const hash = fragment ||
            Backbone.history.fragment ||
            '%2F';
        return `${host}${login}&origin=${origin}&origin_hash=${hash}`;
    }
    return {
        generateLoginUrl: generateLoginUrl,
        addLocalTouchPoints: addLocalTouchPoints,
        updateContainerRef: mtaContainer => {
            container = mtaContainer;
            const UserProfile = container.getComponent('UserProfile');
            userPromise = UserProfile.getUserProfile().done(result => {
                user = result;
            });
        },
        checkUserAuth: () => {
            const Environment = container.getComponent('Environment');
            const subscriptionsConfig = Environment.getConfig('Subscriptions');
            // Return if no check is necessary
            if (subscriptionsConfig.requireLogin === false) {
                return;
            }
            // User login required, check logged in state and redirect as needed
            processUserData(user => {
                if (user.isrecognized) {
                    return;
                }
                const loginUrl = generateLoginUrl();
                setTimeout(() => {
                    Backbone.history.location.assign(loginUrl);
                }, 0);
            });
        },
        isUserRecognized: () => {
            return processUserData(user => {
                return user.isrecognized;
            });
        },
        formatPrice: price => {
            return `$${price.toFixed(2).replace(/\.00$/,'')}`;
        },
        checkSubscriptionData: (data, currentStep) => {
            // Validate current subscription state and direct as necessary
            if (typeof data === 'undefined' || typeof data.gift === 'undefined') {
                validationRedirect('/subscriptions');
                return false;
            }
            if (/subscriptions|select/.test(currentStep)) return true;
            if (typeof data.item === 'undefined') {
                validationRedirect('/subscriptions/select');
                return false;
            }
            if (currentStep === 'amount') return true;
            if (typeof data.quantity === 'undefined') {
                validationRedirect('/subscriptions/amount');
                return false;
            }
            if (currentStep === 'frequency') return true;
            if (typeof data.frequency === 'undefined') {
                validationRedirect('/subscriptions/frequency');
                return false;
            }
            if (currentStep === 'shipments') return true;
            if (typeof data.shipments === 'undefined') {
                validationRedirect('/subscriptions/shipments');
                return false;
            }
            return true;
        }
    }
});
define('Someoddpilot.Subscriptions.Account.Frequency.Lightbox.View',
    [
        'someoddpilot_subscriptions_frequency_lightbox.tpl',
        'Someoddpilot.Subscriptions.SS2Model',
        'Backbone'
    ],
    function (
        someoddpilot_subscriptions_frequency_lightbox_tpl,
        SubscriptionsSS2Model,
        Backbone
    ) {
        'use strict';
        function closeOverlay() {
            const overlay = document.querySelector('.frequency-lightbox-overlay');
            overlay.classList.remove('visible');
        }
        function handleOverlayClick(event) {
            if (!event.target.classList.contains('frequency-lightbox-overlay')) {
                return;
            }
            closeOverlay();
        }
        function updateFrequency() {
            // Replace buttons with status message
            const btnContainer = document.querySelector('.frequency-lightbox-overlay .lightbox-button-container');
            btnContainer.innerHTML = '<p>Updating, please wait...</p>';
            //Add frequency to lightbox data
            this.model.lightboxData.frequency = $('.option-selected').data('frequency');
            this.model.updateFrequency().done(result => {
                if (result.succeeded) {
                    document.querySelector('#subscription-frequency').remove();
                    let updateComplete = 'Update Successful';
                    btnContainer.innerHTML = `<p>${updateComplete}</p>`;
                    // Update item state in the model and trigger render
                    this.model.trigger('change:item');
                    return;
                }
            });
        }
        function handleFrequencyClick(event) {
            // return if option already selected
            if (event.currentTarget.classList.contains('option-selected')) {
                return;
            }
            // remove current selection class
            document.querySelector('.option-selected').classList.remove('option-selected');
            // add selection class to clicked option
            event.currentTarget.classList.add('option-selected');
        }
        // @class Someoddpilot.Subscriptions.Account.Lightbox.View @extends Backbone.View
        return Backbone.View.extend({
            template: someoddpilot_subscriptions_frequency_lightbox_tpl
            ,
            initialize: function (container, model) {
                this.model = model;
                this.model.on('change', () => {
                    this.render();
                });
            }
            ,
            events: {
                'click #subscription-frequency .subscription__options--option': handleFrequencyClick,
                'click [data-action="close"]': closeOverlay,
                'click .frequency-lightbox-overlay': handleOverlayClick,
                'click [data-action="update-frequency"]': updateFrequency
            }
            ,
            bindings: {}
            ,
            childViews: {}
            //@method getContext @return Someoddpilot.Subscriptions.Account.Lightbox.View.Context
            ,
            getContext: function getContext() {
                //@class Someoddpilot.Subscriptions.Account.Lightbox.View.Context
                return {
                    data: this.model.lightboxData,
                    response: this.cancelResponse || false
                };
            }
        });
    });
// @module Someoddpilot.Subscriptions.Account.Lightbox
define('Someoddpilot.Subscriptions.Account.Lightbox.View',
    [
        'someoddpilot_subscriptions_lightbox.tpl', 'Someoddpilot.Subscriptions.SS2Model', 'Backbone'
    ],
    function (
        someoddpilot_subscriptions_lightbox_tpl, SubscriptionsSS2Model, Backbone
    ) {
        'use strict';
        function closeOverlay() {
            const overlay = document.querySelector('.lightbox-overlay');
            overlay.classList.remove('visible');
        }
        function handleOverlayClick(event) {
            if (!event.target.classList.contains('lightbox-overlay')) {
                return;
            }
            closeOverlay();
        }
        function handleCancelClick() {
            // Replace buttons with status message
            const btnContainer = document.querySelector('.lightbox-button-container');
            btnContainer.innerHTML = '<p>Please wait...</p>';
            // Invoke cancel method on the model
            let view = this;
            this.model.cancel().done(result => {
                if (result.succeeded) {
                    document.querySelector('.lightbox-header').remove();
                    // Use message entered via the CMS
                    let cancelPendingMessage = 'YOUR CANCELLATION REQUEST HAS BEEN RECEIVED AND IS BEING PROCESSED. YOU WILL RECEIVE A CONFIRMATION EMAIL ONCE CANCELLATION IS COMPLETE';
                    const cmsElement = document.querySelector('.cancel-pending');
                    if (cmsElement !== null) {
                        cancelPendingMessage = cmsElement.textContent;
                    }
                    btnContainer.innerHTML = `<p>${cancelPendingMessage}</p>`;
                    // Update item state in the model and trigger render
                    this.model.lightboxData.cancel_state = true;
                    this.model.trigger('change:item');
                    return;
                }
                btnContainer.textContent = 'Error cancelling order. Please open a support case with us, or try again later.';
                console.error('Subscription cancellation failed:', result);
            });
        }
        // @class Someoddpilot.Subscriptions.Account.Lightbox.View @extends Backbone.View
        return Backbone.View.extend({
            template: someoddpilot_subscriptions_lightbox_tpl
                ,
            initialize: function (container, model) {
                    this.model = model;
                    this.model.on('change', () => {
                        this.render();
                    });
                }
                ,
            events: {
                'click .lightbox-overlay': handleOverlayClick,
                'click [data-action="close"]': closeOverlay,
                'click [data-action="cancel"]': handleCancelClick
            }
            ,
            bindings: {}
            ,
            childViews: {}
            //@method getContext @return Someoddpilot.Subscriptions.Account.Lightbox.View.Context
            ,
            getContext: function getContext() {
                //@class Someoddpilot.Subscriptions.Account.Lightbox.View.Context
                return {
                    data: this.model.lightboxData,
                    response: this.cancelResponse || false
                };
            }
        });
    });
// @module Someoddpilot.Subscriptions.Account
define('Someoddpilot.Subscriptions.Account.View',
    [
        'someoddpilot_subscriptions_account.tpl', 'Someoddpilot.Subscriptions.SS2Model', 'Backbone', 'Someoddpilot.Utils'
    ], SubscriptionsAccountView);
function SubscriptionsAccountView(
    someoddpilot_subscriptions_account_tpl, SubscriptionsSS2Model, Backbone, SomeoddpilotUtils
) {
    'use strict';
    function handleCancelClick(event) {
        const salesOrderId = event.target.getAttribute('data-so-id');
        // Update lightbox data
        this.model.lightboxData = this.subscriptions.find(subscription =>
            subscription.sales_order_id === salesOrderId);
        this.model.trigger('change');
        // Display lightbox
        const lightbox = document.querySelector('.myaccount-layout .lightbox-overlay');
        lightbox.classList.add('visible');
    }
    function displayFrequencyModal(event) {
        const salesOrderId = event.target.getAttribute('data-so-id');
        // Update lightbox data
        this.model.lightboxData = this.subscriptions.find(subscription =>
            subscription.sales_order_id === salesOrderId);
        this.model.trigger('change');
        const lightbox = document.querySelector('.myaccount-layout .frequency-lightbox-overlay');
        lightbox.classList.add('visible');
    }
    // @class Someoddpilot.Subscriptions.Account.View @extends Backbone.View
    return Backbone.View.extend({
        template: someoddpilot_subscriptions_account_tpl
        ,
        initialize: function (container, model) {
            this.container = container;
            this.model = model;
            let view = this;
            this.fetchSubscriptions();
            this.model.on('change:item', () => {
                console.log('CHANGED');
                view.fetchSubscriptions();
            });
            this._initialize();
        }
        ,
        events: {
            'click button[data-action="cancel"]': handleCancelClick,
            'click button[data-action="display-frequency-modal"]': displayFrequencyModal
        }
        ,
        bindings: {}
        ,
        childViews: {}
        , fetchSubscriptions() {
            let view = this;
            this.model.fetch().done(function (result) {
                if (result.message) {
                    console.error('Subscriptions', result.message);
                    return;
                }
                view.subscriptions = result;
                view.render();
            });
        }
        //@method getContext @return Someoddpilot.Subscriptions.Account.View.Context
        ,
        getContext: function getContext() {
            //@class Someoddpilot.Subscriptions.Subscriptions.Account.View.Context
            let noSubscriptionsMessage;
            if (typeof this.subscriptions !== 'undefined') {
                // Use message entered via the CMS
                noSubscriptionsMessage = 'No subscriptions found.';
                const cmsElement = document.querySelector('.no-subscriptions-found');
                if (cmsElement !== null) {
                    noSubscriptionsMessage = cmsElement.textContent;
                }
            }
            this.subscriptions = this.subscriptions || [];
            console.log('this.subscriptions', this.subscriptions)
            return {
                'subscriptions': this.subscriptions,
                'noSubscriptions': this.subscriptions.length < 1,
                'noSubscriptionsMessage': noSubscriptionsMessage
            };
        }
    });
}
// @module Someoddpilot.Subscriptions.Amount
define('Someoddpilot.Subscriptions.Amount.View',
    [
        'someoddpilot_subscriptions_amount.tpl'
        , 'Someoddpilot.Subscriptions.SS2Model'
        , 'Backbone'
        , 'Someoddpilot.Utils'
    ]
    , SubscriptionsAmountView);
function SubscriptionsAmountView(
    someoddpilot_subscriptions_amount_tpl
    , SubscriptionsSS2Model
    , Backbone
    , SomeoddpilotUtils
) {
    'use strict';
    function handleAmountSelectClick(event) {
        const parent = event.currentTarget.parentElement;
        const quantity = parent.getAttribute('data-quantity');
        window.currentSubscription.quantity = Number(quantity);
    }
    // @class Someoddpilot.Subscriptions.Amount.View @extends Backbone.View
    return Backbone.View.extend({
        template: someoddpilot_subscriptions_amount_tpl
        , initialize: function (options) {
            // Direct user to sign in if not logged in
            SomeoddpilotUtils.checkUserAuth();
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'amount')) {
                return;
            }
            this.on('afterCompositeViewRender', function () {
                setTimeout(() => {
                    // If config for this view already exists, update the markup to reflect the config
                    if (typeof window.currentSubscription.quantity !== 'undefined') {
                        let quantity = window.currentSubscription.quantity;
                        let configuredElement = document.querySelector(`[data-quantity="${quantity}"]`);
                        if (configuredElement) {
                            // remove current selection class
                            document.querySelector('.option-selected').classList.remove('option-selected');
                            // add selection class to clicked option
                            configuredElement.classList.add('option-selected');
                        }
                    }
                }, 0);
            });
        }
        , events: {
            'click #subscription-amount .subscription__options--option': handleAmountClick,
            'click a[data-hashtag="subscriptions/frequency"]':  handleAmountNextClick,
            'click a[data-action="select"]': handleAmountSelectClick
        }
        , bindings: {}
        , childViews: {}
        //@method getContext @return Someoddpilot.Subscriptions.Amount.View.Context
        , getContext: function getContext() {
            //@class Someoddpilot.Subscriptions.Amount.View.Context
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'amount')) {
                return {};
            }
            let price = currentSubscription.item.onlinecustomerprice_detail.onlinecustomerprice;
            let oneBagPrice = SomeoddpilotUtils.formatPrice(price);
            let twoBagPrice = SomeoddpilotUtils.formatPrice(price * 2);
            let threeBagPrice = SomeoddpilotUtils.formatPrice(price * 3);
            return {
                subscription: window.currentSubscription,
                oneBagPrice: oneBagPrice,
                twoBagPrice: twoBagPrice,
                threeBagPrice: threeBagPrice
            };
        }
    });
}
function handleAmountClick(event) {
    // return if option already selected
    if (event.currentTarget.classList.contains('option-selected')) {
        return;
    }
    // remove current selection class
    document.querySelector('.option-selected').classList.remove('option-selected');
    // add selection class to clicked option
    event.currentTarget.classList.add('option-selected');
}
function handleAmountNextClick() {
    let quantity = document.querySelector('.option-selected').getAttribute('data-quantity');
    window.currentSubscription.quantity = Number(quantity);
}
// @module Someoddpilot.Subscriptions.Frequency
define('Someoddpilot.Subscriptions.Frequency.View',
    [
        'someoddpilot_subscriptions_frequency.tpl'
        , 'Someoddpilot.Subscriptions.SS2Model'
        , 'Backbone'
        , 'Someoddpilot.Utils'
    ]
    , SubscriptionsFrequencyView);
function SubscriptionsFrequencyView (
    someoddpilot_subscriptions_frequency_tpl
    , SubscriptionsSS2Model
    , Backbone
    , SomeoddpilotUtils
) {
    'use strict';
    function handleFrequencySelectClick(event) {
        const parent = event.currentTarget.parentElement;
        const frequency = parent.getAttribute('data-frequency');
        window.currentSubscription.frequency = Number(frequency);
    }
    // @class Someoddpilot.Subscriptions.Frequency.View @extends Backbone.View
    return Backbone.View.extend({
        template: someoddpilot_subscriptions_frequency_tpl
        , initialize: function (options) {
            // Direct user to sign in if not logged in
            SomeoddpilotUtils.checkUserAuth();
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'frequency')) {
                return;
            }
            this.on('afterCompositeViewRender', function () {
                setTimeout(() => {
                    // If config for this view already exists, update the markup to reflect the config
                    if (typeof window.currentSubscription.frequency !== 'undefined') {
                        let frequency = window.currentSubscription.frequency;
                        let configuredElement = document.querySelector(`[data-frequency="${frequency}"]`);
                        if (configuredElement) {
                            // remove current selection class
                            document.querySelector('.option-selected').classList.remove('option-selected');
                            // add selection class to clicked option
                            configuredElement.classList.add('option-selected');
                        }
                    }
                }, 0);
            });
        }
        , events: {
            'click #subscription-frequency .subscription__options--option': handleFrequencyClick,
            'click a[data-hashtag="subscriptions/shipments"]':  handleFrequencyNextClick,
            'click a[data-action="select"]': handleFrequencySelectClick
        }
        , bindings: {}
        , childViews: {}
        //@method getContext @return Someoddpilot.Subscriptions.Frequency.View.Context
        , getContext: function getContext() {
            //@class Someoddpilot.Subscriptions.Frequency.View.Context
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'frequency')) {
                return {};
            }
            return {
                subscription: window.currentSubscription
            };
        }
    });
}
function handleFrequencyClick(event) {
    // return if option already selected
    if (event.currentTarget.classList.contains('option-selected')) {
        return;
    }
    // remove current selection class
    document.querySelector('.option-selected').classList.remove('option-selected');
    // add selection class to clicked option
    event.currentTarget.classList.add('option-selected');
}
function handleFrequencyNextClick() {
    let frequency = document.querySelector('.option-selected').getAttribute('data-frequency');
    window.currentSubscription.frequency = Number(frequency);
}
// @module Someoddpilot.Subscriptions.HeaderMenu
define('Someoddpilot.Subscriptions.HeaderMenu.View',
    [
        'someoddpilot_subscriptions_header_menu.tpl'
        , 'Someoddpilot.Subscriptions.SS2Model'
        , 'Backbone'
        , 'Someoddpilot.Utils'
    ]
    , SubscriptionsHeaderMenuView);
function SubscriptionsHeaderMenuView (
    someoddpilot_subscriptions_header_menu_tpl
    , SubscriptionsSS2Model
    , Backbone
    , SomeoddpilotUtils
) {
    'use strict';
    // @class Someoddpilot.Subscriptions.HeaderMenu.View @extends Backbone.View
    return Backbone.View.extend({
        template: someoddpilot_subscriptions_header_menu_tpl
        , initialize: function (options) {
            this.elementClasses = options.classes;
            this.subscribeLoginUrl = options.subscribeLoginUrl;
        }
        , events: {}
        , bindings: {}
        , childViews: {}
        //@method getContext @return Someoddpilot.Subscriptions.HeaderMenu.View.Context
        , getContext: function getContext() {
            //@class Someoddpilot.Subscriptions.Subscriptions.HeaderMenu.View.Context
            return {
                'elementClasses': this.elementClasses,
                'subscribeLoginUrl': this.subscribeLoginUrl
            };
        }
    });
}
// @module Someoddpilot.Subscriptions.Select
define('Someoddpilot.Subscriptions.Select.View',
    [
        'someoddpilot_subscriptions_select.tpl'
        , 'Someoddpilot.Subscriptions.SS2Model'
        , 'Backbone'
        , 'Someoddpilot.Utils'
    ]
    , SubscriptionsSelectView);
function SubscriptionsSelectView(
    someoddpilot_subscriptions_select_tpl
    , SubscriptionsSS2Model
    , Backbone
    , SomeoddpilotUtils
) {
    'use strict';
    function handleOptionsSelectChange(event) {
        const select = event.target;
        const value = select.value.trim();
        const container = select.parentElement.parentElement;
        const cardPrice = container.querySelector('.subscription__options--option-price');
        const selectButton = container.querySelector('.button-primary');
        // Check if a variant has been selected and update CTA if so
        if (value.length > 0) {
            selectButton.innerText = 'Select';
            select.classList.remove('required-error');
            selectButton.removeAttribute('disabled');
            selectButton.removeAttribute('data-select-size');
            // Update price
            const item = this.items.find(item =>
                item.itemid === selectButton.getAttribute('data-itemid')
            );
            const matrixItem = item.matrixchilditems_detail.find(childItem =>
                childItem.internalid === Number.parseInt(value)
            );
            cardPrice.textContent =
                matrixItem.onlinecustomerprice_detail.onlinecustomerprice_formatted;
            return;
        }
        // Ensure CTA is disabled if no value is selected
        selectButton.innerText = 'Select Size';
        selectButton.setAttribute('disabled', '');
        selectButton.setAttribute('data-select-size', '');
    }
    function sortItems(a, b) {
        const aWeight = a.custitem_subscription_list_weight;
        const bWeight = b.custitem_subscription_list_weight;
        if (aWeight === bWeight) {
            return 0;
        }
        if (aWeight < bWeight) {
            return -1;
        }
        if (aWeight > bWeight) {
            return 1;
        }
        return 0;
    }
    function sortMatrixItems(a, b) {
        // Ensure coffee size is present to sort by
        if (
            typeof a.custitem_coffeesize === 'undefined'
            || typeof b.custitem_coffeesize === 'undefined'
        ) {
            return 0;
        }
        const sizeRgx = /^(\d+)(oz|lb)$/;
        const aSizeMatch = a.custitem_coffeesize.trim().match(sizeRgx);
        const bSizeMatch = b.custitem_coffeesize.trim().match(sizeRgx);
        // Convert sizes to numeric ounces
        let aOunces, bOunces;
        if (aSizeMatch[2] === 'oz') {
            // numeric already in oz
            aOunces = Number.parseInt(aSizeMatch[1]);
        } else {
            // lbs, multiply by 16
            aOunces = Number.parseInt(aSizeMatch[1]) * 16;
        }
        if (bSizeMatch[2] === 'oz') {
            // numeric already in oz
            bOunces = Number.parseInt(bSizeMatch[1]);
        } else {
            // lbs, multiply by 16
            bOunces = Number.parseInt(bSizeMatch[1]) * 16;
        }
        // Compare ounce values to determine sort order
        if (aOunces < bOunces) {
            return -1;
        }
        if (aOunces > bOunces) {
            return 1;
        }
        return 0;
    }
    function validateMatrixItem(item) {
        if (typeof item.onlinecustomerprice_detail !== 'object') {
            console.log(`missing price data: ${item.itemid}`);
            return false;
        }
        const detail = item.onlinecustomerprice_detail;
        if (
            typeof detail.onlinecustomerprice === 'undefined'
            || detail.onlinecustomerprice === null
        ) {
            console.log(`missing price data: ${item.itemid}`);
            return false;
        }
        const price = Number.parseInt(detail.onlinecustomerprice);
        if (Number.isNaN(price)) {
            console.log(`invalid price data: ${item.itemid}`);
            return false;
        }
        return price > 0;
    }
    // @class Someoddpilot.Subscriptions.Select.View @extends Backbone.View
    return Backbone.View.extend({
        template: someoddpilot_subscriptions_select_tpl
        , initialize: function (options) {
            // Direct user to sign in if not logged in
            SomeoddpilotUtils.checkUserAuth();
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'select')) {
                return;
            }
            // Fetch subscribable items from the item API
            let colorRgx = /#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i;
            let itemQueryURL = '/api/items'
                + '?custitem_subscribable=true'
                + '&fieldset=details';
            jQuery.ajax(itemQueryURL).then(items => {
                items.items.forEach(item => {
                    // Set RGB values for the SVG filters to use
                    let fgColor = item.custitemproduct_foreground_color;
                    let rgbValues = fgColor.match(colorRgx);
                    item.fgR = convertHexToDecimal(rgbValues[1]);
                    item.fgG = convertHexToDecimal(rgbValues[2]);
                    item.fgB = convertHexToDecimal(rgbValues[3]);
                    // Add a boolean for the template to use for options selection
                    item.hasOptions = item['matrixchilditems_detail'].length > 0;
                    // Sort size options from smallest to largest
                    item.matrixchilditems_detail.sort(sortMatrixItems);
                    // Validate matrix item variants and filter out misconfigured variants
                    item.matrixchilditems_detail =
                        item.matrixchilditems_detail.filter(validateMatrixItem);
                    // Remove subscription suffix from item names
                    item.itemid = item.itemid.replace(/subscription/i, '');
                });
                // Sort items by their listing weights
                items.items.sort(sortItems);
                this.items = items.items;
                this.render();
            });
        }
        , events: {
            'click a[data-hashtag="subscriptions/amount"]': handleSelectClick,
            'change [data-toggle="select-option"]': handleOptionsSelectChange
        }
        , bindings: {}
        , childViews: {}
        //@method getContext @return Someoddpilot.Subscriptions.Select.View.Context
        , getContext: function getContext() {
            //@class Someoddpilot.Subscriptions.Select.View.Context
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'select')) {
                return {};
            }
            return {
                items: this.items
            };
        }
    });
}
// Used for converting the foreground color values to be used in the svg filter
// for the package graphics
function convertHexToDecimal(hexVal) {
    let floatDigits = 3;
    let decimalVal = parseInt(hexVal, 16);
    return (decimalVal / 255 + Number.EPSILON).toFixed(floatDigits);
}
// Handle selecting an item for subscription, adding it to current state
function handleSelectClick(event) {
    const button = event.target;
    const container = button.parentElement.parentElement;
    const select = container.querySelector('select');
    const item = this.items.find(item =>
        item.itemid === event.target.getAttribute('data-itemid')
    );
    let internalId, price;
    let variantLabel = '';
    // If options exist for the item, ensure one was selected
    if (select) {
        const selectedVariantId = select.value.trim();
        if (selectedVariantId.length === 0) {
            select.classList.add('required-error');
            return;
        }
        internalId = selectedVariantId;
        const matrixItem = item.matrixchilditems_detail.find(childItem =>
            childItem.internalid === Number.parseInt(internalId)
        );
        price = matrixItem.onlinecustomerprice_detail.onlinecustomerprice;
        variantLabel = select.options[select.selectedIndex].text + ' ';
    } else {
        internalId = button.getAttribute('data-internalid');
        price = item.onlinecustomerprice_detail.onlinecustomerprice;
    }
    window.currentSubscription.item = {
        'internalid': internalId,
        'custitemproduct_background_color': item.custitemproduct_background_color,
        'custitemproduct_foreground_color': item.custitemproduct_foreground_color,
        'fgR': item.fgR,
        'fgG': item.fgG,
        'fgB': item.fgB,
        'onlinecustomerprice_detail': {
            'onlinecustomerprice': price
        },
        'itemid': item.itemid,
        'custitemflavor_profile': item.custitemflavor_profile,
        'variant_label': variantLabel
    }
}
// @module Someoddpilot.Subscriptions.Shipments
define('Someoddpilot.Subscriptions.Shipments.View',
    [
        'someoddpilot_subscriptions_shipments.tpl'
        , 'Someoddpilot.Subscriptions.SS2Model'
        , 'Backbone'
        , 'Someoddpilot.Utils'
    ]
    , SubscriptionsShipmentsView);
function SubscriptionsShipmentsView (
    someoddpilot_subscriptions_shipments_tpl
    , SubscriptionsSS2Model
    , Backbone
    , SomeoddpilotUtils
) {
    'use strict';
    function handleShipmentsSelectClick(event) {
        const parent = event.currentTarget.parentElement;
        const shipments = parent.getAttribute('data-shipments');
        window.currentSubscription.shipments = Number(shipments);
    }
    // @class Someoddpilot.Subscriptions.Shipments.View @extends Backbone.View
    return Backbone.View.extend({
        template: someoddpilot_subscriptions_shipments_tpl
        , initialize: function (options) {
            // Direct user to sign in if not logged in
            SomeoddpilotUtils.checkUserAuth();
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'shipments')) {
                return;
            }
            this.on('afterCompositeViewRender', function () {
                setTimeout(() => {
                    // If config for this view already exists, update the markup to reflect the config
                    if (typeof window.currentSubscription.shipments !== 'undefined') {
                        let shipments = window.currentSubscription.shipments;
                        let configuredElement = document.querySelector(`[data-shipments="${shipments}"]`);
                        if (configuredElement) {
                            // remove current selection class
                            document.querySelector('.option-selected').classList.remove('option-selected');
                            // add selection class to clicked option
                            configuredElement.classList.add('option-selected');
                        }
                    }
                }, 0);
            });
        }
        , events: {
            'click #subscription-shipments .subscription__options--option': handleShipmentsClick,
            'click a[data-hashtag="subscriptions/summary"]':  handleShipmentsNextClick,
            'click a[data-action="select"]': handleShipmentsSelectClick
        }
        , bindings: {}
        , childViews: {}
        //@method getContext @return Someoddpilot.Subscriptions.Shipments.View.Context
        , getContext: function getContext() {
            //@class Someoddpilot.Subscriptions.Shipments.View.Context
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'shipments')) {
                return {};
            }
            return {
                subscription: window.currentSubscription
            };
        }
    });
}
function handleShipmentsClick(event) {
    // return if option already selected
    if (event.currentTarget.classList.contains('option-selected')) {
        return;
    }
    // remove current selection class
    document.querySelector('.option-selected').classList.remove('option-selected');
    // add selection class to clicked option
    event.currentTarget.classList.add('option-selected');
}
function handleShipmentsNextClick() {
    let shipments = document.querySelector('.option-selected').getAttribute('data-shipments');
    window.currentSubscription.shipments = Number(shipments);
}
// @module Someoddpilot.Subscriptions.Summary
define('Someoddpilot.Subscriptions.Summary.View',
    [
        'someoddpilot_subscriptions_summary.tpl'
        , 'Someoddpilot.Subscriptions.SS2Model'
        , 'Backbone'
        , 'Someoddpilot.Utils'
        , 'Handlebars'
    ]
    , SubscriptionsSummaryView);
function SubscriptionsSummaryView (
    someoddpilot_subscriptions_summary_tpl
    , SubscriptionsSS2Model
    , Backbone
    , SomeoddpilotUtils
    , Handlebars
) {
    'use strict';
    // @class Someoddpilot.Subscriptions.Summary.View @extends Backbone.View
    return Backbone.View.extend({
        template: someoddpilot_subscriptions_summary_tpl
        , initialize: function (options) {
            this.container = options.container;
            // Direct user to sign in if not logged in
            SomeoddpilotUtils.checkUserAuth();
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(window.currentSubscription, 'summary')) {
                return;
            }
            Handlebars.registerHelper('pluralize', amount => {
                return Number(amount) === 1 ? '' : 's';
            });
        }
        , events: {
            'click #subscription-summary .subscription__action--button': function() {
                return handleSubscribeClick(this.container);
            }
        }
        , bindings: {}
        , childViews: {}
        //@method getContext @return Someoddpilot.Subscriptions.Summary.View.Context
        , getContext: function getContext() {
            //@class Someoddpilot.Subscriptions.Summary.View.Context
            let subscription = window.currentSubscription;
            // Validate current subscription state and direct as necessary
            if (!SomeoddpilotUtils.checkSubscriptionData(subscription, 'summary')) {
                return {};
            }
            let bagsImgUrl;
            switch (subscription.quantity) {
                case 3:
                    bagsImgUrl = 'img/subscriptions/amount/bag-amount-three.png';
                    break;
                case 2:
                    bagsImgUrl = 'img/subscriptions/amount/bag-amount-two.png';
                    break;
                case 1:
                default:
                    bagsImgUrl = 'img/subscriptions/amount/bag-amount-one.png';
            }
            let calendarImgUrl;
            switch (subscription.frequency) {
                case 4:
                    calendarImgUrl = 'img/subscriptions/frequency/frequency-every-four-weeks.png';
                    break;
                case 3:
                    calendarImgUrl = 'img/subscriptions/frequency/frequency-every-three-weeks.png';
                    break;
                case 2:
                    calendarImgUrl = 'img/subscriptions/frequency/frequency-every-two-weeks.png';
                    break;
                case 1:
                default:
                    calendarImgUrl = 'img/subscriptions/frequency/frequency-every-week.png';
            }
            let boxesImgUrl;
            switch (subscription.shipments) {
                case 12:
                    boxesImgUrl = 'img/subscriptions/shipments/shipments-12.png';
                    break;
                case 9:
                    boxesImgUrl = 'img/subscriptions/shipments/shipments-9.png';
                    break;
                case 6:
                    boxesImgUrl = 'img/subscriptions/shipments/shipments-6.png';
                    break;
                case 3:
                default:
                    boxesImgUrl = 'img/subscriptions/shipments/shipments-3.png';
            }
            return {
                subscription: subscription,
                subscriptionType: subscription.gift ? 'Gift' : 'Personal',
                bagsImgUrl: bagsImgUrl,
                calendarImgUrl: calendarImgUrl,
                boxesImgUrl: boxesImgUrl,
                formattedSinglePrice: SomeoddpilotUtils.formatPrice(
                    subscription.item.onlinecustomerprice_detail.onlinecustomerprice
                ),
                formattedTotalPrice: SomeoddpilotUtils.formatPrice(
                    subscription.item.onlinecustomerprice_detail.onlinecustomerprice * currentSubscription.quantity
                ),
                shipments: subscription.shipments === 12 ? 'Ongoing' : subscription.shipments
            };
        }
    });
}
function handleSubscribeClick(container) {
    // Validate subscription config
    const subscription = window.currentSubscription;
    container.getComponent('Cart').addLine({
        line: {
            quantity: subscription.quantity,
            item: {
                internalid: subscription.item.internalid
            },
            options: [
                {
                    cartOptionId: 'custcol_subscribe',
                    value: {
                        internalid: 'T'
                    }
                },
                {
                    cartOptionId: 'custcol_subscribe_gift',
                    value: {
                        internalid: subscription.gift ? 'T' : 'F'
                    }
                },
                {
                    cartOptionId: 'custcol_subscribe_frequency',
                    value: {
                        internalid: subscription.frequency.toString()
                    }
                },
                {
                    cartOptionId: 'custcol_subscribe_shipments',
                    value: {
                        internalid: subscription.shipments.toString()
                    }
                },
                {
                    cartOptionId: 'custcol_subscribe_renew',
                    value: {
                        internalid: subscription.shipments === 12 ? 'T' : 'F'
                    }
                }
            ]
        }
    }).then(data => {
        console.log('Subscription line added to cart', data);
        Backbone.history.navigate('/cart', {trigger: true});
    }).fail(error => {
        console.error('There was an error adding the item', error);
        alert('There was an error adding the item, see console for details.');
    });
}
// @module Someoddpilot.Subscriptions
define('Someoddpilot.Subscriptions.View',
    [
        'someoddpilot_subscriptions.tpl'
        , 'Someoddpilot.Subscriptions.SS2Model'
        , 'Backbone'
        , 'Someoddpilot.Utils'
    ]
    , SubscriptionsView);
function SubscriptionsView (
    someoddpilot_subscriptions_tpl
    , SubscriptionsSS2Model
    , Backbone
    , SomeoddpilotUtils
) {
    'use strict';
    function handleHeroScrollLink(event) {
        jQuery('html, body').animate({
                scrollTop: jQuery('.subscription__hero').outerHeight()
            },
            1000
        );
    }
    // @class Someoddpilot.Subscriptions.Subscriptions.View @extends Backbone.View
    return Backbone.View.extend({
        template: someoddpilot_subscriptions_tpl
        , initialize: function (options) {
            // Direct user to sign in if not logged in
            SomeoddpilotUtils.checkUserAuth();
            window.currentSubscription = window.currentSubscription || {};
        }
        , events: {
            'click a[data-hashtag="subscriptions/select"]': handleGiftClick,
            'click .subscription__hero--link': handleHeroScrollLink
        }
        , bindings: {}
        , childViews: {}
        //@method getContext @return Someoddpilot.Subscriptions.View.Context
        , getContext: function getContext() {
            //@class Someoddpilot.Subscriptions.Subscriptions.View.Context
            return {};
        }
    });
}
function handleGiftClick(event) {
    window.currentSubscription.gift = event.target.getAttribute('data-gift') === 'true';
}
define('Someoddpilot.Subscriptions',
    [
        'Someoddpilot.Subscriptions.HeaderMenu.View',
        'Someoddpilot.Subscriptions.View',
        'Someoddpilot.Subscriptions.Select.View',
        'Someoddpilot.Subscriptions.Amount.View',
        'Someoddpilot.Subscriptions.Frequency.View',
        'Someoddpilot.Subscriptions.Shipments.View',
        'Someoddpilot.Subscriptions.Summary.View',
        'Someoddpilot.Subscriptions.Account.View',
        'Someoddpilot.Subscriptions.Account.Lightbox.View',
        'Someoddpilot.Subscriptions.Account.Frequency.Lightbox.View',
        'Someoddpilot.Subscriptions.SS2Model',
        'Someoddpilot.Utils',
        'Someoddpilot.B2B.Utils'
    ], Subscriptions);
function Subscriptions(
    SubscriptionsHeaderMenuView,
    SubscriptionsView,
    SubscriptionsSelectView,
    SubscriptionsAmountView,
    SubscriptionsFrequencyView,
    SubscriptionsShipmentsView,
    SubscriptionsSummaryView,
    SubscriptionsAccountView,
    SubscriptionsAccountLightboxView,
    SubscriptionsAccountFrequencyLightboxView,
    SubscriptionsSS2Model,
    SomeoddpilotUtils,
    SomeoddpilotB2BUtils
) {
    'use strict';
    function updateSubscriptionBodyField(Cart) {
        Cart.getLines().done(async lines => {
            let isSubscription = false;
            lines.forEach(line => {
                let option = line.options.find(option =>
                    option.cartOptionId === 'custcol_subscribe');
                if (typeof option !== 'undefined' && option.value.internalid === 'T') {
                    isSubscription = true;
                }
            });
            await Cart.setTransactionBodyField({
                fieldId: 'custbody_subscription',
                type: 'boolean',
                value: isSubscription
            }).then(() => {
                console.log('custbody_subscription set to:', isSubscription);
            }).fail(error => {
                console.error('setting custbody_subscription failed:', error);
            });
        });
    }
    function isSubscribable(info, promise) {
        const currentId = info.item.internalid;
        promise.then(result => {
            const items = result.items;
            // Return if no items available
            if (!Array.isArray(items)) {
                return;
            }
            // Attempt to find related subscription item
            const subscription = items.find(item =>
                item.custitem_main_product_id === currentId);
            // If no subscription item found, return
            if (typeof subscription === 'undefined') {
                return;
            }
            // Confirmed subscription relation, display subscribe button
            const subscribeContainer = document.querySelector('.subscribe-container');
            // if (subscribeContainer !== null) {
            //     subscribeContainer.classList.remove('hidden');
            // }
        });
    }
    return {
        mountToApp: function mountToApp(container) {
            // using the 'Layout' component we add a new child view inside the 'Header' existing view
            // (there will be a DOM element with the HTML attribute data-view="Header.Logo")
            // more documentation of the Extensibility API in
            // https://system.netsuite.com/help/helpcenter/en_US/APIs/SuiteCommerce/Extensibility/Frontend/index.html
            // Subscriptions are not enabled on B2B
            if (SomeoddpilotB2BUtils.isB2BSite()) {
                return;
            }
            var PDP = container.getComponent("PDP");
            //ProductLine.Stock.View
            //showStockView
            if (PDP) {
                PDP.addToViewContextDefinition('ProductLine.Stock.View', 'showStockView', 'boolean', function (context) { //TO HIDE OUT OF STOCK MESSAGE FROM PDP ONLY. THE INVENTORY DISPLAY EXTENSION USES SAME VIEW IN PDP FULL VIEW
                    var iteminfo = PDP.getItemInfo();
                    if (iteminfo) {
                        return false;
                    }
                    else {
                        return context.showStockView;
                    }
                });
            }
            // Update utils closure scoped container reference
            SomeoddpilotUtils.updateContainerRef(container);
            // Use this for layout events
            /** @type {ApplicationLayout} */
            const ApplicationLayout = container.getLayout();
            // Fetch items with the main product id fields available
            const itemQueryURL = '/api/items?fields=custitem_main_product_id';
            const mainProductIds = jQuery.ajax(itemQueryURL);
            ApplicationLayout.on('afterAppendView', () => {
                // Bind to PDPs to conditionally display the Subscribe button
                const PDP = container.getComponent('PDP');
                if (PDP === null) {
                    return;
                }
                const itemInfo = PDP.getItemInfo();
                // ItemInfo will be null if not on a PDP or quick view
                if (itemInfo === null) {
                    return;
                }
                isSubscribable(itemInfo, mainProductIds);
            });
            // Add subscription menu entries
            /** @type {LayoutComponent} */
            let layout = container.getComponent('Layout');
            if (layout) {
                const subscribeLoginUrl = SomeoddpilotUtils.generateLoginUrl(
                    'home', 'subscriptions'
                );
                layout.addChildView('Subscribe.Menu', function () {
                    return new SubscriptionsHeaderMenuView({
                        container: container,
                        classes: 'header-menu-level1-anchor',
                        subscribeLoginUrl: subscribeLoginUrl
                    });
                });
                layout.addChildView('Subscribe.Menu.Sidebar', function () {
                    return new SubscriptionsHeaderMenuView({
                        container: container,
                        classes: 'header-sidebar-menu-item header-sidebar-menu-path',
                        subscribeLoginUrl: subscribeLoginUrl
                    });
                });
                const accountModel = new SubscriptionsSS2Model();
                layout.addChildView('Subscriptions.Account', function () {
                    return new SubscriptionsAccountView(container, accountModel);
                });
                // Display cancellation confirmation lightbox
                layout.addChildView('Subscriptions.Account.Lightbox', function (options) {
                    return new SubscriptionsAccountLightboxView(container, accountModel);
                });
                // Display update frequency  lightbox
                layout.addChildView('Subscriptions.Account.Frequency.Lightbox', function (options) {
                    return new SubscriptionsAccountFrequencyLightboxView(container, accountModel);
                });
            }
            // Add body attribute if user is logged in
            let Environment = container.getComponent('Environment');
            let subscriptionsConfig = Environment.getConfig('Subscriptions');
            setTimeout(() => {
                if (subscriptionsConfig.requireLogin === false) {
                    document.body.setAttribute('data-user-can-subscribe', '');
                    return;
                }
                SomeoddpilotUtils.isUserRecognized().done(isUserRecognized => {
                    if (isUserRecognized === true) {
                        document.body.setAttribute('data-user-can-subscribe', '');
                    }
                });
            }, 0);
            // Get extensibility API components
            let PageType = container.getComponent('PageType');
            // Create pages and related routes
            PageType.registerPageType({
                name: 'sop_subscription_index',
                routes: ['subscriptions'],
                view: function () {
                    return new SubscriptionsView({
                        container: container
                    });
                },
                defaultTemplate: {
                    name: 'someoddpilot_subscriptions.tpl',
                    displayName: 'Subscriptions'
                }
            });
            PageType.registerPageType({
                name: 'sop_subscription_select',
                routes: ['subscriptions/select'],
                view: function () {
                    return new SubscriptionsSelectView({
                        container: container
                    });
                },
                defaultTemplate: {
                    name: 'someoddpilot_subscriptions_select.tpl',
                    displayName: 'Subscriptions - Select'
                }
            });
            PageType.registerPageType({
                name: 'sop_subscription_amount',
                routes: ['subscriptions/amount'],
                view: function () {
                    return new SubscriptionsAmountView({
                        container: container
                    });
                },
                defaultTemplate: {
                    name: 'someoddpilot_subscriptions_amount.tpl',
                    displayName: 'Subscriptions - Amount'
                }
            });
            PageType.registerPageType({
                name: 'sop_subscription_frequency',
                routes: ['subscriptions/frequency'],
                view: function () {
                    return new SubscriptionsFrequencyView({
                        container: container
                    });
                },
                defaultTemplate: {
                    name: 'someoddpilot_subscriptions_frequency.tpl',
                    displayName: 'Subscriptions - Frequency'
                }
            });
            PageType.registerPageType({
                name: 'sop_subscription_shipments',
                routes: ['subscriptions/shipments'],
                view: function () {
                    return new SubscriptionsShipmentsView({
                        container: container
                    });
                },
                defaultTemplate: {
                    name: 'someoddpilot_subscriptions_shipments.tpl',
                    displayName: 'Subscriptions - Shipments'
                }
            });
            PageType.registerPageType({
                name: 'sop_subscription_summary',
                routes: ['subscriptions/summary'],
                view: function () {
                    return new SubscriptionsSummaryView({
                        container: container
                    });
                },
                defaultTemplate: {
                    name: 'someoddpilot_subscriptions_summary.tpl',
                    displayName: 'Subscriptions - Summary'
                }
            });
            // Update cart subscription state based on current lines
            /** @type {Cart} */
            const Cart = container.getComponent('Cart');
            Cart.on('beforeSubmit', function () {
                return updateSubscriptionBodyField(Cart);
            });
            if (Cart) {
                Cart.addToViewContextDefinition('Cart.Lines.View', 'showOfferMessage', 'boolean', function (context) {
                    var showOfferMessage = false;
                    var options = (context.line && context.line.options) || [];
                    var subscriptionOption = _.findWhere(options, {
                        cartOptionId: "custcol_subscribe"
                    });
                    if (subscriptionOption) {
                        var isSubscription = subscriptionOption.value && subscriptionOption.value.internalid;
                        showOfferMessage = isSubscription == 'T' ? true : false;
                    }
                    return showOfferMessage;
                });
            }
            var pdp = container.getComponent("PDP");
            if (pdp) {
                pdp.addToViewContextDefinition('ProductDetails.Full.View', 'isSubscription', 'boolean', function (context) {
                    var iteminfo = pdp.getItemInfo();
                    var item = iteminfo.item || (context.model && context.model.item);
                    var isSubscription = item.custitem_subscribable || false;
                    return isSubscription;
                });
            }
        }
    };
}
};
extensions['Someoddpilot.UI_Scripting.0.0.16'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/Someoddpilot/UI_Scripting/0.0.16/' + asset;
};
// @module Someoddpilot.Promo.Email
define('Someoddpilot.Promo.Email.View',
    [
        'promo_email.tpl', 'Backbone', 'Someoddpilot.B2B.Utils'
    ],
    function (
        promo_email_tpl, Backbone, SomeoddpilotB2BUtils
    ) {
        'use strict';
        function handleLoginClick(event) {
            var form = jQuery(event.target.closest('form'));
            var formData = form.serializeObject();
            var fieldEmail = form.find('input[type="email"]').get(0);
            // Remove any existing error classes
            fieldEmail.classList.remove('form-error');
            if (
                formData.email.trim().length < 5 ||
                !SomeoddpilotB2BUtils.isEmailValid(formData.email)
            ) {
                fieldEmail.classList.add('form-error');
                return false;
            }
            var companyId = SC.ENVIRONMENT.companyId;
            var siteId = container.getComponent('Environment').getSiteSetting('siteid');
            var baseUrl = new URL(SC.ENVIRONMENT.baseUrl);
            var scaPath = baseUrl.pathname.match(/^\/[^\/]+\//).pop();
            // Note: adding the siteId and companyId don't appear to be strictly
            // necessary, though is done to conform to existing requests
            var loginEndpoint = scaPath + 'services/Account.RegisterAsGuest.Service.ss?n=' + siteId + '&c=' + companyId;
            jQuery.ajax(loginEndpoint, {
                    data: JSON.stringify(formData),
                    contentType: 'application/json',
                    type: 'POST'
                })
                .done(function (data, result) {
                    if (result !== 'success') {
                        console.warn('Unknown user state, login was not a success.');
                        return;
                    }
                    console.log('Email submitted, apply code.');
                    var searchParams = new URLSearchParams(window.location.search);
                    searchParams.set('promocode', promoCode);
                    window.location.search = searchParams.toString();
                })
                .fail(function (data) {
                    console.error(data.responseJSON.errorMessage);
                });
            return false;
        }
        function closeOverlay() {
            var overlay = document.querySelector('.lightbox-overlay');
            overlay.classList.add('hidden');
        }
        function handleOverlayClick(event) {
            if (!event.target.classList.contains('lightbox-overlay')) {
                return;
            }
            closeOverlay();
        }
        // Fallback promo code to use if none configured
        var promoCode = 'WELCOME5';
        // @class Someoddpilot.Promo.Email.View @extends Backbone.View
        return Backbone.View.extend({
            template: promo_email_tpl
                ,
            initialize: function (container, config) {
                    if (typeof config.emailPromoCode !== 'undefined') {
                        promoCode = config.emailPromoCode;
                    }
                }
                ,
            events: {
                'click [data-action="login-button"]': handleLoginClick,
                'click .lightbox-overlay': handleOverlayClick,
                'click [data-action="close"]': closeOverlay
            }
            ,
            bindings: {}
            ,
            childViews: {}
            //@method getContext @return Someoddpilot.Promo.Email.View.Context
            ,
            getContext: function getContext() {
                //@class Someoddpilot.Promo.Email.View.Context
            }
        });
    });
// @module Someoddpilot.UI.Footer
define('Someoddpilot.UI.Footer', [], function () {
    'use strict';
    // Closure scoped container reference
    var container;
    /*
     * Operative Methods
     */
    function setCopyright() {
        var today = new Date();
        var year = today.getFullYear();
        var element = document.getElementById('copyright');
        element.innerHTML = '&copy; ' + year + ' Madcap Coffee';
    }
    function loadKlaviyo() {
        var Environment = container.getComponent('Environment');
        var UIScriptingConfig = Environment.getConfig('UIScripting');
        var scriptTag = document.createElement('script');
        scriptTag.type = 'text/javascript';
        scriptTag.async = true;
        scriptTag.src = UIScriptingConfig.klaviyoScriptUrl;
        document.head.appendChild(scriptTag);
    }
    /*
     * Binding Methods
     */
    return {
        init: function (mtaContainer) {
            // Update closure scoped container reference
            container = mtaContainer;
            setCopyright();
            loadKlaviyo();
        }
    }
});
// @module Someoddpilot.UI.Header
define('Someoddpilot.UI.Header', [], function () {
    'use strict';
    // Closure scoped container reference
    var container;
    /*
     * Operative Methods
     */
    function menuShow() {
        var hamburger = document.getElementById('mobile-nav-trigger');
        hamburger.setAttribute('data-action', 'header-sidebar-hide');
        hamburger.classList.add('is-active');
    }
    function menuClose() {
        var hamburger = document.getElementById('mobile-nav-trigger');
        hamburger.classList.remove('is-active');
        hamburger.setAttribute('data-action', 'header-sidebar-show');
        var main = document.getElementById('main');
        main.classList.remove('header-sidebar-opened');
    }
    function searchShow() {
        if (jQuery(window).width < 992) {
            return;
        }
        var searchModal = document.getElementById('search-modal');
        searchModal.classList.add('is-active');
    }
    function searchClose() {
        menuClose();
        var main = document.getElementById('main');
        var searchModal = document.getElementById('search-modal');
        searchModal.classList.remove('is-active');
        if (main) {
            main.classList.remove('header-sidebar-opened');
        }
    }
    function updateHeaderPromo(config) {
        // Return if header promo is disabled
        if (config.headerPromoEnabled === false) {
            return;
        }
        var headerPromoText = config.headerPromoText;
        var promoElement = document.querySelector('.promo-banner-view');
        var closeButton = promoElement.querySelector('.promo-banner-view-close-button');
        // Add close button to the promo
        if (config.headerPromoClose === true) {
            closeButton.classList.remove('hidden');
        }
        promoElement.querySelector('div').textContent = headerPromoText;
        promoElement.classList.remove('hidden');
    }
    function updateHeaderSizeVar() {
        var siteHeaderHeight = jQuery('#site-header').height();
        var mainContainer = document.querySelector('#main-container');
        setTimeout(function () {
            mainContainer.style = '--header-height: ' + siteHeaderHeight + 'px;';
        }, 50);
    }
    /*
     * Binding Methods
     */
    function bindMobileMenuToggles() {
        var siteHeader = jQuery('#site-header');
        // Hamburger menu toggle
        siteHeader.on('click', '#mobile-nav-trigger[data-action="header-sidebar-show"]', function (event) {
            menuShow();
        });
        // Add additional handling to the header sidebar hide action
        siteHeader.on('click', '[data-action="header-sidebar-hide"]', function (event) {
            menuClose();
        });
        // Special handling for search results as NetSuite prevents other bubble
        // event handlers from firing
        var searchResults = document.querySelectorAll('.tt-menu');
        searchResults.forEach(function (container) {
            container.addEventListener('click', function (event) {
                searchClose();
            }, true);
        });
    }
    function bindMegaMenus() {
        var megaMenus = document.querySelectorAll('.mega-menu');
        megaMenus.forEach(function (item, index, array) {
            item.addEventListener('mouseenter', function (event) {
                event.currentTarget.classList.add('active');
            });
            item.addEventListener('mouseleave', function (event) {
                event.currentTarget.classList.remove('active');
            });
            item.addEventListener('click', function (event) {
                event.currentTarget.classList.remove('active');
            });
        });
    }
    function bindSearch() {
        var siteHeader = jQuery('#site-header');
        var searchModal = jQuery('#search-modal');
        siteHeader.on('click', '.site-search-button-link', function () {
            searchShow();
        });
        searchModal.on('click',
            '.button-close, .search-logo, .search-category, .site-search-button-submit',
            function () {
                searchClose();
            });
    }
    function bindWindowResize() {
        var windowResizeHandler = _.debounce(function () {
            updateHeaderSizeVar();
        }, 250);
        updateHeaderSizeVar();
        jQuery(window).on('resize', windowResizeHandler);
    }
    function bindMessageClose() {
        var siteHeader = jQuery('#site-header');
        siteHeader.on('click', '[data-action="close-message"]', function () {
            setTimeout(updateHeaderSizeVar);
        });
    }
    return {
        init: function (mtaContainer) {
            // Update closure scoped container reference
            container = mtaContainer;
            var Environment = container.getComponent('Environment');
            var UIScriptingConfig = Environment.getConfig('UIScripting');
            updateHeaderPromo(UIScriptingConfig);
            bindMobileMenuToggles();
            bindMegaMenus();
            bindSearch();
            bindWindowResize();
            bindMessageClose();
        },
        menuShow: menuShow,
        menuClose: menuClose,
        searchShow: searchShow,
        searchClose: searchClose,
        updateHeaderSizeVar: updateHeaderSizeVar
    }
});
// @module Someoddpilot.UI.Utils
define('Someoddpilot.UI.Utils', [], function () {
    'use strict';
    // Closure scoped container reference
    var container;
    // Closure scoped eAPI references
    var config;
    var user;
    var userPromise;
    function processUserData(callback) {
        // Create a deferred object to return
        var deferred = jQuery.Deferred();
        // If user data has been cached already immediately invoke callback
        if (typeof user !== 'undefined') {
            return deferred.resolve(callback(user));
        }
        // When the user profile promise has resolved, resolve this deferred
        userPromise.done(function (userData) {
            deferred.resolve(callback(userData));
        });
        // Return a promise that can be chained
        return deferred.promise();
    }
    return {
        updateContainerRef: function (mtaContainer) {
            container = mtaContainer;
            var Environment = container.getComponent('Environment');
            config = Environment.getConfig('UIScripting');
            var UserProfile = container.getComponent('UserProfile');
            userPromise = UserProfile.getUserProfile().done(function (result) {
                user = result;
            });
        },
        isCMS: function () {
            return /^\/cms/.test(window.top.location.pathname);
        },
        isRecognized: function () {
            return processUserData(function (user) {
                return user.isrecognized;
            });
        },
        getPromoCookieValue: function (key) {
            var cookies = document.cookie.split('; ');
            var cookie = cookies.find(function (cookie) {
                return cookie.startsWith(key)
            });
            return typeof cookie !== 'undefined';
        }
    }
});
// Model.js
// -----------------------
// @module Case
define("Someoddpilot.UI_Scripting.UIScripting.Model", ["Backbone", "Utils"], function (
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({});
});
define('Someoddpilot.UI_Scripting.UIScripting',
    [
        'Someoddpilot.UI.Utils',
        'Someoddpilot.UI.Header',
        'Someoddpilot.UI.Footer',
        'Someoddpilot.Promo.Email.View',
        'Someoddpilot.B2B.Utils'
    ],
    function (
        SomeoddpilotUIUtils,
        SomeoddpilotUIHeader,
        SomeoddpilotUIFooter,
        PromoEmailView,
        SomeoddpilotB2BUtils
    ) {
        'use strict';
        function updatePageTitle(config) {
            var defaultPageTitle = config.defaultPageTitle || 'Now Roasting | Madcap Coffee';
            var customTitleElement = document.querySelector('.custom-page-title');
            if (
                typeof customTitleElement === 'undefined' ||
                customTitleElement === null
            ) {
                document.title = defaultPageTitle;
                return;
            }
            var customTitle = customTitleElement.textContent.trim();
            if (customTitle.length === 0) {
                document.title = defaultPageTitle;
                return;
            }
            document.title = customTitleElement.textContent.trim();
        }
        function unwrapPLP() {
            var cells = jQuery('.facets-items-collection-view-cell');
            var parent = cells.parent().get(0);
            if (typeof parent === 'undefined') {
                return;
            }
            // If the parent is a view row, unwrap
            if (parent.classList.contains('facets-items-collection-view-row')) {
                cells.unwrap();
            }
        }
        return {
            mountToApp: function mountToApp(container) {
                /*
                 * Extensibility API documentation:
                 * https://system.netsuite.com/help/helpcenter/en_US/APIs/SuiteCommerce/Extensibility/Frontend/index.html
                 *
                 * Events documentation:
                 * https://developers.suitecommerce.com/events.html#custom-suitecommerce-events
                 */
                // Update closure scoped container reference
                SomeoddpilotUIUtils.updateContainerRef(container);
                /** @type {Application} */
                var application = container.getComponent('Application');
                /** @type {LayoutComponent} */
                var Layout = container.getComponent('Layout');
                // Use this for layout events
                /** @type {ApplicationLayout} */
                var ApplicationLayout = container.getLayout();
                // Get config object
                var Environment = container.getComponent('Environment');
                var UIScriptingConfig = Environment.getConfig('UIScripting');
                // Init modules
                ApplicationLayout.on('afterAppendToDom', function () {
                    SomeoddpilotUIHeader.init(container);
                    SomeoddpilotUIFooter.init(container);
                    if (SomeoddpilotUIUtils.isCMS()) {
                        document.body.setAttribute('data-is-cms', '');
                    }
                });
                ApplicationLayout.on('afterAppendView', function () {
                    unwrapPLP();
                    setTimeout(function () {
                      //  updatePageTitle(UIScriptingConfig);
                    }, 200);
                });
                ApplicationLayout.on('renderEnhancedPageContent', function (arg1, arg2, arg3) {
                    setTimeout(function () {
                       // updatePageTitle(UIScriptingConfig);
                    }, 200);
                });
                /*
                 * Promo Email Lightbox
                 */
                var cookieName = 'emailPromoShown';
                var displayPromo = true;
                // Use config value if present
                if (typeof UIScriptingConfig.emailPromoEnabled !== 'undefined') {
                    displayPromo = UIScriptingConfig.emailPromoEnabled;
                }
                // Do not display while in the CMS
                if (SomeoddpilotUIUtils.isCMS()) {
                    displayPromo = false;
                }
                // Do not display on B2B
                if (SomeoddpilotB2BUtils.isB2BSite()) {
                    displayPromo = false;
                }
                // Do not display if cookie set
                if (SomeoddpilotUIUtils.getPromoCookieValue(cookieName)) {
                    displayPromo = false;
                }
                if (displayPromo) {
                    // Determine recognized state
                    SomeoddpilotUIUtils.isRecognized().done(function (isRecognized) {
                        // Set cookie
                        document.cookie = cookieName + '=true; path=/; max-age=31536000';
                        // Return if recognized
                        if (isRecognized) {
                            return;
                        }
                        // Display promo
                        Layout.addChildView('Promo.Email', function () {
                            return new PromoEmailView(container, UIScriptingConfig);
                        });
                    });
                }
            }
        };
    });
};
extensions['TavanoTeam.UpdateDiscount.1.0.0'] = function(){
function getExtensionAssetsPath(asset){
return 'extensions/TavanoTeam/UpdateDiscount/1.0.0/' + asset;
};
// @module TavanoTeam.UpdateDiscount.OrderSummary
define('TavanoTeam.UpdateDiscount.OrderSummary.View', [
	'tavanoteam_updatediscount_ordersummary.tpl', 'Backbone'
], function (
	tavanoteam_updatediscount_ordersummary_tpl, Backbone
) {
	'use strict';
	// @class TavanoTeam.UpdateDiscount.OrderSummary.View @extends Backbone.View
	return Backbone.View.extend({
		template: tavanoteam_updatediscount_ordersummary_tpl
			,
		initialize: function (options) {
				/*  Uncomment to test backend communication with an example service
					(you'll need to deploy and activate the extension first)
				*/
				// this.model = new OrderSummaryModel();
				// var self = this;
				// this.model.fetch().done(function(result) {
				// 	self.message = result.message;
				// 	self.render();
				// });
			}
			,
		events: {}
		,
		bindings: {}
		,
		childViews: {
		}
		//@method getContext @return TavanoTeam.UpdateDiscount.OrderSummary.View.Context
		,
		getContext: function getContext() {
			//@class TavanoTeam.UpdateDiscount.OrderSummary.View.Context
			this.message = this.message || 'Hello World!!'
			return {
				message: this.message
			};
		}
	});
});
// Model.js
// -----------------------
// @module Case
define("TavanoTeam.UpdateDiscount.OrderSummary.Model", ["Backbone", "Utils"], function(
    Backbone,
    Utils
) {
    "use strict";
    // @class Case.Fields.Model @extends Backbone.Model
    return Backbone.Model.extend({
        
});
});
define(
	'TavanoTeam.UpdateDiscount.OrderSummary', ['Utils', 'Item.Model'],
	function (Utils, ItemModel) {
		'use strict';
		var showCartDiscount = false;
		var showCheckoutDiscount = false;
		return {
			mountToApp: function mountToApp(container) {
				showCartDiscount = false;
				showCheckoutDiscount = false;
				var layout = container.getComponent('Layout');
				var cart = container.getComponent("Cart");
				var checkout = container.getComponent("Checkout");
				var self = this;
				if (cart) {
					layout.addToViewContextDefinition('Cart.Summary.View', 'summary', 'object', function (context) {
						var lines = (context.model && context.model.lines) || [];
						var summary = context.summary;
						//console.log('context', context)
						if (lines) {
							summary = self.calculateDiscount(lines, summary)
						}
						return summary;
					});
					layout.addToViewContextDefinition('Cart.Summary.View', 'showDiscountTotal', 'boolean', function (context) {
						return showCartDiscount;
					});
				}
				if (checkout) {
					layout.addToViewContextDefinition('OrderWizard.Module.CartSummary', 'model', 'object', function (context) {
						var lines = (context.model && context.model.lines) || [];
						var summary = (context.model && context.model.summary) || {};
						if (lines) {
							summary = self.calculateDiscount(lines, summary)
						}
						context.model.summary = summary;
						return context.model;
					});
					layout.addToViewContextDefinition('OrderWizard.Module.CartSummary', 'showDiscount', 'boolean', function (context) {
						return showCheckoutDiscount;
					});
				}
			},
			calculateDiscount: function (lines, summary) {
				try {
					var discount = summary.discounttotal;
					var subtotal = summary.subtotal;
					var isFullDiscount = discount == subtotal ? true : false;
					//console.log('isFullDiscount', isFullDiscount)
					if (isFullDiscount) {
						return summary;
					} else {
						var newDiscount = this.getItemDicount(lines, summary);
						return summary;
					}
				} catch (error) {
					console.log('err@calculateDiscount', error);
				}
			},
			getItemDicount: function (lines, summary) {
				try {
					var discount = 0;
					var total = 0;
					var itemDiscountTotal = 0;
					for (var i in lines) {
						var item = lines[i].item;
						var itemModel = new ItemModel(item);
						var price_container_object = itemModel.getPrice();
						var currentItemTotal = 0;
						var currentItemCompare = 0;
						discount = parseFloat(discount) + parseFloat(lines[i].discount);
						var quantity = lines[i].quantity;
						var comparePrice = price_container_object.compare_price || item.keyMapping_comparePriceAgainst;
						//var comparePrice = this.getQuantityPrice(quantity, item.onlinecustomerprice_detail) || item.keyMapping_comparePriceAgainst;
						//console.log('comparePrice', comparePrice)
						var price = lines[i].rate;
						//console.log('price', price)
						currentItemTotal = parseFloat(comparePrice * quantity);
						total = parseFloat(total) + parseFloat(comparePrice * quantity);
						if (comparePrice != price) {
							currentItemCompare = lines[i].amount;
							currentItemCompare = Math.abs(currentItemTotal - currentItemCompare);
							itemDiscountTotal = parseFloat(itemDiscountTotal) + parseFloat(currentItemCompare);
						}
					}
					//itemDiscountTotal = Math.abs(total - itemDiscountTotal);
					discount = discount + itemDiscountTotal;
					showCartDiscount = false;
					showCheckoutDiscount = false;
					//console.log('discount', discount)
					if (discount != 0 && !isNaN(discount)) {
						showCartDiscount = true;
						showCheckoutDiscount = true;
						summary.discounttotal = this.toCurrency(discount);
						summary.discounttotal_formatted = Utils.formatCurrency(discount);
						summary.subtotal = this.toCurrency(total);
						summary.subtotal_formatted = Utils.formatCurrency(total);
					} else {
						summary.discounttotal = '0.00';
						summary.discounttotal_formatted = '$0.00';
					}
					//console.log('total', total)
					return summary;
				} catch (error) {
					console.log('err@getItemDicount', error);
				}
			},
			getQuantityPrice: function (quantity, priceDetails) {
				try {
					var priceSchedule = priceDetails.priceschedule || [];
					var price = 0;
					if (priceSchedule) {
						for (var i in priceSchedule) {
							var minimumquantity = parseInt(priceSchedule[i].minimumquantity);
							if (minimumquantity < quantity) {
								price = priceSchedule[i].price;
							}
						}
						return price;
					}
					return false;
				} catch (error) {
					console.log('err@getQuantityPrice', error);
				}
			},
			toCurrency: function (amount) {
				var r = parseFloat(amount);
				return isNaN(r) ? 0 : r;
			}
		};
	});
};
try{
	extensions['Someoddpilot.B2B.0.0.18']();
	SC.addExtensionModule('Someoddpilot.B2B');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['SuiteCommerce.Blog.2.1.1']();
	SC.addExtensionModule('SuiteCommerce.Blog.Shopping');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.CCT_SOP_Alternating_Feature.0.0.14']();
	SC.addExtensionModule('Someoddpilot.CCT_SOP_Alternating_Feature.SomeoddpilotAlternatingFeature');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.CCT_SOP_Alternating_Feature_Nav.0.0.4']();
	SC.addExtensionModule('Someoddpilot.CCT_SOP_Alternating_Feature_Nav.SomeoddpilotAlternatingFeatureNav');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.CCT_SOP_Amenities.0.0.4']();
	SC.addExtensionModule('Someoddpilot.CCT_SOP_Amenities.SomeoddpilotAmenities');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.CCT_SOP_Feature_Grid.0.0.7']();
	SC.addExtensionModule('Someoddpilot.CCT_SOP_Feature_Grid.SomeoddpilotFeatureGrid');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.CCT_SOP_Hero_Slider.0.0.3']();
	SC.addExtensionModule('Someoddpilot.CCT_SOP_Hero_Slider.SomeoddpilotHeroSlider');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.CCT_SOP_Page_Hero.1.0.0']();
	SC.addExtensionModule('Someoddpilot.CCT_SOP_Page_Hero.SomeoddpilotPageHero');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.CCT_SOP_Promo_Feature.0.0.5']();
	SC.addExtensionModule('Someoddpilot.CCT_SOP_Promo_Feature.SomeoddpilotPromoFeature');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.CCT_SOP_Testimonial.0.0.14']();
	SC.addExtensionModule('Someoddpilot.CCT_SOP_Testimonial.SomeoddpilotTestimonial');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['CXExtensibility.CoreContent.1.0.5']();
	SC.addExtensionModule('CXExtensibility.CoreContent.CoreContentModule');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['SuiteCommerce.CustomFields.1.1.4']();
	SC.addExtensionModule('SuiteCommerce.CustomFields.PDP.Main');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['SuiteCommerce.GiftCertificateValueCheck.1.2.4']();
	SC.addExtensionModule('SuiteCommerce.GiftCertificate.Shopping');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.Locations.0.0.6']();
	SC.addExtensionModule('Someoddpilot.Locations');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['SuiteCommerce.InventoryDisplay.1.2.3']();
	SC.addExtensionModule('SuiteCommerce.InventoryDisplay.Main');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['SuiteCommerce.MapContactInfo.1.1.5']();
	SC.addExtensionModule('SuiteCommerce.MapAndContactUs.Main');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.Pages.1.0.10']();
	SC.addExtensionModule('Someoddpilot.Pages');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.Subscriptions.0.0.46']();
	SC.addExtensionModule('Someoddpilot.Subscriptions');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['Someoddpilot.UI_Scripting.0.0.16']();
	SC.addExtensionModule('Someoddpilot.UI_Scripting.UIScripting');
}
catch(error)
{
	console.error(error)
}
try{
	extensions['TavanoTeam.UpdateDiscount.1.0.0']();
	SC.addExtensionModule('TavanoTeam.UpdateDiscount.OrderSummary');
}
catch(error)
{
	console.error(error)
}
SC.ENVIRONMENT.EXTENSIONS_JS_MODULE_NAMES = ["Someoddpilot.B2B.Login.View","Someoddpilot.B2B.View","Someoddpilot.B2B.Wholesale.View","Someoddpilot.B2B.Model","Someoddpilot.B2B.SS2Model","Someoddpilot.B2B.Utils","Someoddpilot.B2B","SuiteCommerce.Blog.BlogHome.Configuration","SuiteCommerce.Blog.BlogHome.Model","SuiteCommerce.Blog.BlogHome.View","SuiteCommerce.Blog.BlogHome","SuiteCommerce.Blog.Common.Searcher.Helper","SuiteCommerce.Blog.Common","SuiteCommerce.Blog.Common.Configuration","SuiteCommerce.Blog.Common.Instrumentation.Helper","SuiteCommerce.Blog.Common.PageTypeModel","SuiteCommerce.Blog.Common.ParameterProcessor","SuiteCommerce.Blog.DataProvider.Author.Collection","SuiteCommerce.Blog.DataProvider.Author.Model","SuiteCommerce.Blog.DataProvider.Category.Collection","SuiteCommerce.Blog.DataProvider.Category.Model","SuiteCommerce.Blog.DataProvider.File.Collection","SuiteCommerce.Blog.DataProvider.File.Model","SuiteCommerce.Blog.DataProviderEntities.Model","SuiteCommerce.Blog.DataProvider.Term.Collection","SuiteCommerce.Blog.DataProvider.Term.Model","SuiteCommerce.Blog.DataProvider","SuiteCommerce.Blog.EmptyState.Model","SuiteCommerce.Blog.EmptyState.View","SuiteCommerce.Blog.ExtCarousel.DOMHandler","SuiteCommerce.Blog.ExtCarousel.GestureInterpreter","SuiteCommerce.Blog.ExtCarousel.Indicator.Collection","SuiteCommerce.Blog.ExtCarousel.Indicator.Model","SuiteCommerce.Blog.ExtCarousel.Indicator.View","SuiteCommerce.Blog.ExtCarousel.Model","SuiteCommerce.Blog.ExtCarousel.Slide.View","SuiteCommerce.Blog.ExtCarousel.View","SuiteCommerce.Blog.Instrumentation.Log","SuiteCommerce.Blog.Instrumentation.Logger","SuiteCommerce.Blog.Instrumentation.MockAppender","SuiteCommerce.Blog.Instrumentation","SuiteCommerce.Blog.LatestPosts.Indicator.View","SuiteCommerce.Blog.LatestPosts.Indicator.Model","SuiteCommerce.Blog.LatestPosts.Model","SuiteCommerce.Blog.LatestPosts.Slide.Collection","SuiteCommerce.Blog.LatestPosts.Slide.Model.ts","SuiteCommerce.Blog.LatestPosts.Slide.View","SuiteCommerce.Blog.LatestPosts.View","SuiteCommerce.Blog.Shopping","SuiteCommerce.Blog.Pagination.Button.Collection","SuiteCommerce.Blog.Pagination.Button.Model","SuiteCommerce.Blog.Pagination.Button.View","SuiteCommerce.Blog.Pagination.Configuration","SuiteCommerce.Blog.Pagination.Model","SuiteCommerce.Blog.Pagination.View","SuiteCommerce.Blog.Post.Author.View","SuiteCommerce.Blog.Post.Category.View","SuiteCommerce.Blog.Post.Collection","SuiteCommerce.Blog.Post.Configuration","SuiteCommerce.Blog.Post.Content.View","SuiteCommerce.Blog.Post.Footer.View","SuiteCommerce.Blog.Post.Header.Image.View","SuiteCommerce.Blog.Post.Header.View","SuiteCommerce.Blog.Post.Model","SuiteCommerce.Blog.Post.View","SuiteCommerce.Blog.Post","SuiteCommerce.Blog.PostCard.View","SuiteCommerce.Blog.PostCardsCCT.Model","SuiteCommerce.Blog.PostCardsCCT.View","SuiteCommerce.Blog.PostCardsCCT","SuiteCommerce.Blog.PostList.Model","SuiteCommerce.Blog.PostList.View","SuiteCommerce.Blog.PostSearch.Configuration","SuiteCommerce.Blog.PostSearch.Model","SuiteCommerce.Blog.PostSearch.View","SuiteCommerce.Blog.SuggestionsList.Model","SuiteCommerce.Blog.SuggestionsList.View","SuiteCommerce.Blog.TaxonomyNavigation.Configuration","SuiteCommerce.Blog.TaxonomyNavigation.Model","SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Collection","SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.Model","SuiteCommerce.Blog.TaxonomyNavigation.Taxonomy.View","SuiteCommerce.Blog.TaxonomyNavigation.View","Someoddpilot.Alternating.Feature.View","Someoddpilot.CCT_SOP_Alternating_Feature.SomeoddpilotAlternatingFeature.Model","Someoddpilot.CCT_SOP_Alternating_Feature.SomeoddpilotAlternatingFeature","Someoddpilot.Alternating.Feature.Nav.View","Someoddpilot.CCT_SOP_Alternating_Feature_Nav.SomeoddpilotAlternatingFeatureNav","Someoddpilot.Amenities.View","Someoddpilot.CCT_SOP_Amenities.SomeoddpilotAmenities","Someoddpilot.CCT_SOP_Feature_Grid.SomeoddpilotFeatureGrid.SS2Model","Someoddpilot.CCT_SOP_Feature_Grid.SomeoddpilotFeatureGrid","Someoddpilot.Feature.Grid.View","Someoddpilot.CCT_SOP_Hero_Slider.SomeoddpilotHeroSlider.SS2Model","Someoddpilot.CCT_SOP_Hero_Slider.SomeoddpilotHeroSlider","Someoddpilot.Hero.Slider.View","Someoddpilot.CCT_SOP_Page_Hero.SomeoddpilotPageHero.Model","Someoddpilot.CCT_SOP_Page_Hero.SomeoddpilotPageHero","Someoddpilot.Page.Hero.View","Someoddpilot.CCT_SOP_Promo_Feature.SomeoddpilotPromoFeature","Someoddpilot.Promo.Feature.View","Someoddpilot.CCT_SOP_Testimonial.SomeoddpilotTestimonial.SS2Model","Someoddpilot.CCT_SOP_Testimonial.SomeoddpilotTestimonial","Someoddpilot.Testimonial.View","CXExtensibility.CoreContent.CMSMerchzoneCCT.View","CXExtensibility.CoreContent.CMSMerchzoneCCT","CXExtensibility.CoreContent.CoreContentModule","SuiteCommerce.CustomFields.Instrumentation.Helper","SuiteCommerce.CustomFields.JavaScript.Utils","SuiteCommerce.CustomFields.Instrumentation.Log","SuiteCommerce.CustomFields.Instrumentation.Logger","SuiteCommerce.CustomFields.Instrumentation.MockAppender","SuiteCommerce.CustomFields.Instrumentation","SuiteCommerce.CustomFields.PDP.Main","SuiteCommerce.CustomFields.Utils","SuiteCommerce.CustomFields.PDP.Configuration","SuiteCommerce.CustomFields.PDP.Main.View","SuiteCommerce.CustomFields.PDP.Model","SuiteCommerce.CustomFields.PDP","SuiteCommerce.GiftCertificate.Utils.Configuration","SuiteCommerce.GiftCertificate.Currency.Model","SuiteCommerce.GiftCertificate.Customer.Model","SuiteCommerce.GiftCertificate.Common.DependencyProvider","SuiteCommerce.GiftCertificate.Common.FeedbackMessageManager","SuiteCommerce.GiftCertificates.Collection","SuiteCommerce.GiftCertificate.Model","SuiteCommerce.GiftCertificate.Common.InstrumentationHelper","SuiteCommerce.GiftCertificate.Common.Utils","SuiteCommerce.GiftCertificate.GiftCertificatesList.Button.View","SuiteCommerce.GiftCertificate.Group.Collection","SuiteCommerce.GiftCertificate.Group.Model","SuiteCommerce.GiftCertificate.Instrumentation.FallbackLogger","SuiteCommerce.GiftCertificate.Instrumentation.Log","SuiteCommerce.GiftCertificate.Instrumentation.Logger","SuiteCommerce.GiftCertificate.Instrumentation.MockAppender","SuiteCommerce.GiftCertificate.Instrumentation","SuiteCommerce.GiftCertificate.Item.Model","SuiteCommerce.GiftCertificate.LandingPage.Configuration","SuiteCommerce.GiftCertificate.LandingPage.Router","SuiteCommerce.GiftCertificate.LandingPage.View","SuiteCommerce.GiftCertificate.Main.Configuration","SuiteCommerce.GiftCertificate.Shopping","SuiteCommerce.GiftCertificate.Utils","SuiteCommerce.GiftCertificate.OptionTiles.Configuration","SuiteCommerce.GiftCertificate.OptionTiles.Tile.Collection","SuiteCommerce.GiftCertificate.OptionTiles.Tile.CollectionView","SuiteCommerce.GiftCertificate.OptionTiles.Tile.Model","SuiteCommerce.GiftCertificate.OptionTiles.Tile.View","SuiteCommerce.GiftCertificate.OptionTiles.TilesContainer.View","SuiteCommerce.GiftCertificate.OptionTiles","SuiteCommerce.GiftCertificate.PDP","SuiteCommerce.GiftCertificate.PLP.Group.View","SuiteCommerce.GiftCertificate.PLP","SuiteCommerce.GiftCertificate.ValueCheck.Configuration","SuiteCommerce.GiftCertificate.ValueCheck.Form.View","SuiteCommerce.GiftCertificate.ValueCheck.Model","SuiteCommerce.GiftCertificate.ValueCheck.Result.View","SuiteCommerce.GiftCertificate.ValueCheck.View","Someoddpilot.Location.View","Someoddpilot.Locations.View","Someoddpilot.Locations.Model","Someoddpilot.Locations.SS2Model","Someoddpilot.Locations","Someoddpilot.MapStyles","SuiteCommerce.InventoryDisplay.Configuration","SuiteCommerce.InventoryDisplay.Common.InstrumentationHelper","SuiteCommerce.InventoryDisplay.Instrumentation.Log","SuiteCommerce.InventoryDisplay.Instrumentation.Logger","SuiteCommerce.InventoryDisplay.Instrumentation.MockAppender","SuiteCommerce.InventoryDisplay.Instrumentation","SuiteCommerce.InventoryDisplay.InventoryDisplay.Configuration","SuiteCommerce.InventoryDisplay.Message.DropShipItem.View","SuiteCommerce.InventoryDisplay.Message.RegularItem.View","SuiteCommerce.InventoryDisplay.Message.SpecialOrderItem.View","SuiteCommerce.InventoryDisplay.Message.View","SuiteCommerce.InventoryDisplay.Website.Model","SuiteCommerce.InventoryDisplay.Main","SuiteCommerce.MapAndContactUs.Common.DependencyProvider","SuiteCommerce.MapAndContactUs.Common.Instrumentation.Helper","SuiteCommerce.MapAndContactUs.Utils","SuiteCommerce.ContactUsForm.CCTSettingsHelper","SuiteCommerce.ContactUsForm.InputField.Collection","SuiteCommerce.ContactUsForm.InputField.Model","SuiteCommerce.ContactUsForm.InputField.View","SuiteCommerce.ContactUsForm.Model","SuiteCommerce.ContactUsForm.View","SuiteCommerce.ContactUsFormCCT","SuiteCommerce.MapAndContactUs.ExtMessage.Model","SuiteCommerce.MapAndContactUs.ExtMessage.View","SuiteCommerce.MapAndContactUs.Instrumentation.Log","SuiteCommerce.MapAndContactUs.Instrumentation.Logger","SuiteCommerce.MapAndContactUs.Instrumentation.MockAppender","SuiteCommerce.MapAndContactUs.Instrumentation","SuiteCommerce.MapAndContactUs.Main","SuiteCommerce.MapAndContactInfoCCT.View","SuiteCommerce.MapAndContactInfoCCT","Someoddpilot.Pages.About.View","Someoddpilot.Pages.Components.View","Someoddpilot.Pages.Contact.View","Someoddpilot.Pages.Privacy.View","Someoddpilot.Pages.Terms.View","Someoddpilot.Pages.Model","Someoddpilot.Pages","Someoddpilot.Subscriptions.SS2Model","Someoddpilot.Subscriptions","Someoddpilot.Utils","Someoddpilot.Subscriptions.Account.Frequency.Lightbox.View","Someoddpilot.Subscriptions.Account.Lightbox.View","Someoddpilot.Subscriptions.Account.View","Someoddpilot.Subscriptions.Amount.View","Someoddpilot.Subscriptions.Frequency.View","Someoddpilot.Subscriptions.HeaderMenu.View","Someoddpilot.Subscriptions.Select.View","Someoddpilot.Subscriptions.Shipments.View","Someoddpilot.Subscriptions.Summary.View","Someoddpilot.Subscriptions.View","Someoddpilot.Promo.Email.View","Someoddpilot.UI.Footer","Someoddpilot.UI.Header","Someoddpilot.UI.Utils","Someoddpilot.UI_Scripting.UIScripting.Model","Someoddpilot.UI_Scripting.UIScripting","TavanoTeam.UpdateDiscount.OrderSummary.View","TavanoTeam.UpdateDiscount.OrderSummary.Model","TavanoTeam.UpdateDiscount.OrderSummary"];
